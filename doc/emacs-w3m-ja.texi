\input texinfo @c -*-texinfo -*- coding: iso-2022-jp -*-
@c %**start of header
@setfilename emacs-w3m-ja.info
@settitle Emacs-w3m -- an Emacs interface to w3m --
@c %**end of header
@documentlanguage ja
@include version.texi
@synindex pg cp
@finalout

@dircategory GNU Emacs Lisp
@direntry
* Emacs-w3m-ja: (emacs-w3m-ja).  An Emacs interface to w3m
@end direntry

@c permissions text appears in an Info file before the first node.
@ifinfo
This file documents emacs-w3m, an Emacs interface to w3m.

このファイルは Emacs で動く w3m のインタフェースである emacs-w3m に関す
る説明書です。

Copyright @copyright{} 2000, 2001, 2002, 2003 @w{TSUCHIYA Masatoshi}.

This edition is for emacs-w3m version @value{VERSION}.

この版は emacs-w3m バージョン @value{VERSION} に対応します。

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU
Manual'', and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License'' in the Emacs manual.

この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契約書
第 1.1 版またはそれ以降の版が定める条件の下で複製、配布、あるいは変更す
ることを許可します。変更不可部分は指定しません。「A GNU Manual」は表表紙
テキスト、以下の (a) は裏表紙テキストです。この利用許諾契約書の複写は
「Emacs manual」の「GNU フリー文書利用許諾契約書」という章に含まれていま
す。

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''

(a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を GNU ソフトウェア
のように複製したり変更する自由があります。複製はフリーソフトウェア財団に
よって出版されました。(フリーソフトウェア財団は) GNU の開発のために必要
な資金を集めています。」

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.

この文書は「GNU フリー文書利用許諾契約書」に基づいて配布された収集著作物
の一部です。もしあなたがこの文書を収集著作物から分離して配布したいときは、
契約書の第 6 項に記述されているように、文書に契約書の複写を付加すること
によって、行なうことができます。
@end ifinfo

@titlepage
@sp 10
@title Emacs-w3m ユーザマニュアル
@subtitle An Emacs interface to w3m for emacs-w3m version @value{VERSION}
@author Emacs-w3m 開発チーム
@page

@vskip 0pt plus 1filll
Copyright @copyright{} 2000, 2001, 2002, 2003 @w{TSUCHIYA Masatoshi}.

This manual corresponds to emacs-w3m version @value{VERSION}.

このマニュアルは emacs-w3m バージョン @value{VERSION} に対応します。

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU
Manual'', and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License'' in the Emacs manual.

この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契約書
第 1.1 版またはそれ以降の版が定める条件の下で複製、配布、あるいは変更す
ることを許可します。変更不可部分は指定しません。「A GNU Manual」は表表紙
テキスト、以下の (a) は裏表紙テキストです。この利用許諾契約書の複写は
「Emacs manual」の「GNU フリー文書利用許諾契約書」という章に含まれていま
す。

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''

(a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を GNU ソフトウェア
のように複製したり変更する自由があります。複製はフリーソフトウェア財団に
よって出版されました。(フリーソフトウェア財団は) GNU の開発のために必要
な資金を集めています。」

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.

この文書は「GNU フリー文書利用許諾契約書」に基づいて配布された収集著作物
の一部です。もしあなたがこの文書を収集著作物から分離して配布したいときは、
契約書の第 6 項に記述されているように、文書に契約書の複写を付加すること
によって、行なうことができます。
@end titlepage

@ifnottex
@node Top
@top Emacs-w3m ユーザマニュアル

@flushright
Emacs-w3m 開発チーム
@end flushright

この文書は emacs-w3m バージョン @value{VERSION} に対応します。
@end ifnottex

@menu
* Introduction::                はじめに
* Getting Started::             Emacs-w3m を使い始めるのはとっても簡単
* Basic Usage::                 基本的な使い方
* Pretty Good Features::        たくさんのすぐれもの
* Customizable Variables::      デフォルトのままでも結構良いと思うけれど
* Hooking into MUAs::           メール/ニュースリーダーで使う
* Frequently Asked Questions::  必ず答があるとは限らない
* Known Problems::              あなたならきっと解決できる
* Shimbun Library::             ウェブ上の新聞を読むための道具
* Mailing List::                メーリングリスト、バグリポート
* Emacs-w3m Functions::         Emacs-w3m の関数の詳しい説明
* Index::                       索引

@detailmenu
 --- 項目の詳細なリスト ---

Getting Started

* Required Emacs Version::      どんなバージョンの Emacs で使えるの?
* You Need w3m::                w3m を使います: emacs-w3m が速いわけ
* Other Requirements::          Emacs-w3m を動作させるのに必要なもの
* Installing Emacs-w3m::        Emacs-w3m をインストールする
* Non-UNIX-like systems::       非 UNIX 系環境でのインストール
* Minimal Settings::            設定しなければならない最低限のもの

Basic Usage

* Browsing Web Pages::          ネットサーフィンしよう!
* Inline Images::               画像表示を ON/OFF する
* Tracing History::             時空を遡る
* Managing Bookmarks::          ぼくの/わたしのお気に入り
* Using Tabs::                  これが流行のタブ・ブラウザだ
* Selecting Buffers::           たくさんのセッションから一つを選ぶ
* Downloading::                 ファイルをダウンロードする
* Submitting Forms::            HTML フォームに記入する

Pretty Good Features

* Using Search Engines::        使いやすいウェブ検索
* Grouping URLs::               一つの URL で複数のウェブページを見る
* Weather Information::         明日の天気は晴れでしょう
* Using Antenna::               アンテナを張り巡らそう
* Showing Directory Tree::      ディレクトリの木構造を表示する
* Viewing Perl Documents::      Perl のドキュメントを見る
* Using Namazu::                Namazu でファイルを検索する
* Octet::                       application/octet-stream データを見る

Customizable Variables

* General Variables::           一般的な変数
* Image Variables::             画像に関連した変数
* Bookmark Variables::          ブックマークに関連した変数
* Search Variables::            ウェブ検索に関連した変数
* Weather Variables::           天気予報に関連した変数
* Dtree Variables::             dtree に関連した変数
* Antenna Variables::           アンテナに関連した変数
* Perldoc Variables::           Perldoc に関連した変数
* Namazu Variables::            Namazu に関連した変数
* Octet Variables::             Octet に関連した変数
* Other Variables::             その他の変数

Hooking into MUAs

* Gnus::                        Gnus で HTML メールを読む
* Mew::                         Mew で HTML メールを読む
* SEMI MUAs::                   SEMI MUA で HTML メールを読む

Frequently Asked Questions

Known Problems

Shimbun Library

* Nnshimbun::                   Gnus をウェブブラウザにする!
* Mew Shimbun::                 Mew で新聞を読む
* Shimbun with Wanderlust::     Wanderlust で新聞を読む
* Shimbun Basics::              新聞モジュールの作り方

Mailing List

Emacs-w3m Functions

@end detailmenu
@end menu

@node Introduction
@chapter はじめに
@cindex Introduction

すばらしい w3m プログラムを開発してくれた伊藤彰則さんと w3m チームのみな
さんに、格段の感謝を捧げます。さらにコメント、提案およびバグの修正をして
くれたすべての人々に感謝します。たとえ問題があっても、責任はすべて私た
ち (emacs-w3m 開発チーム) にあります。もっとも、保証はまったくありません
が。Emacs-w3m は 2000年6月に土屋雅稔によって最初に作られました。

Emacs-w3m の公式ページ @uref{http://emacs-w3m.namazu.org/} も併せてご覧
下さい。

@node Getting Started
@chapter Emacs-w3m を使い始めるのはとっても簡単
@cindex Getting started
@cindex Starting up

ひょっとすると、あなたのシステムには emacs-w3m がすでにインストールされ
ているかもしれません。その場合、あなたはこの項を読み飛ばして、直ちに使い
始めることができます。そんな幸運に恵まれなかったならば、emacs-w3m のイン
ストールの仕方を会得するために、読み続けて下さい。

@menu
* Required Emacs Version::      どんなバージョンの Emacs で使えるの?
* You Need w3m::                w3m を使います: emacs-w3m が速いわけ
* Other Requirements::          Emacs-w3m を動作させるのに必要なもの
* Installing Emacs-w3m::        Emacs-w3m をインストールする
* Non-UNIX-like systems::       非 UNIX 系環境でのインストール
* Minimal Settings::            設定しなければならない最低限のもの
@end menu

@node Required Emacs Version
@section どんなバージョンの Emacs で使えるの?
@cindex Possible Emacs versions

以下に挙げたいろいろなバージョンの Emacsen で emacs-w3m を動作させること
ができます。

@table @samp
@item Emacs 21.x
追加のパッケージは不要です。

@item XEmacs 21.x
@sc{apel} パッケージと @samp{gifsicle} プログラムが必要で
す (@pxref{Other Requirements})。最も安定している最新の XEmacs 21.4 を使
うことを推奨します。

@item Emacs 20.x
追加のパッケージは不要です。さらに @sc{bitmap-mule} パッケージを使うこと
によって、白黒のビットマップ画像をインライン表示することができま
す (@pxref{Other Requirements})。


@item Emacs 19.34 (含 Mule 2.3)
@sc{apel} パッケージ、@samp{新しい custom} パッケージおよ
び @file{regexp-opt.el} モジュールが必要です。Emacs 19.34 を元にし
た Mule 2.3 では、@sc{bitmap-mule} パッケージを使うことによって、白黒の
ビットマップ画像をインライン表示することができます (@pxref{Other
Requirements})。
@end table

@node You Need w3m
@section w3m を使います: emacs-w3m が速いわけ
@cindex w3m

Emacs-w3m は外部コマンド w3m を、ウェブコンテンツを取得するためのバック
エンドとして、または HTML の翻訳エンジンとして使用します。そうして、私た
ちは非同期動作によって加速された Emacs ウェブブラウザを実現することがで
きました。

あなたは最新の w3m をインストールしなければなりません。それは以下の場所
で取得できます:

@uref{http://prdownloads.sourceforge.net/w3m/}

@node Other Requirements
@section Emacs-w3m を動作させるのに必要なもの
@cindex APEL package
@cindex Gifsicle program
@cindex ImageMagick package
@cindex BITMAP-MULE package
@cindex New custom
@cindex regexp-opt.el
@cindex FLIM package

Emacs のバージョンによっては、サードパーティのパッケージが必要です。この
項では、それらを見つけてインストールするための資料を提供します。

@table @samp
@item APEL
XEmacs、Emacs 19.34 または Mule 2.3 に不可欠です。Emacs-w3m を構築する前
に @sc{apel} をインストールしなければなりません。@sc{apel} は以下の場所
にあります:

@uref{ftp://ftp.m17n.org/pub/mule/apel/apel-10.4.tar.gz}

もしすでに @sc{apel} XEmacs パッケージをインストールしているならば、それ
を上記のリンクで示した @sc{apel} で置き換えることを強く勧めます。置き換
えるには、以下に示すような命令を使って下さい:

@example
% rm -fr /usr/local/lib/xemacs/xemacs-packages/lisp/apel
% cd apel-10.4
% make install-package XEMACS=xemacs-21.4.x\
  PACKAGEDIR=/usr/local/lib/xemacs/xemacs-packages
@end example

@item gifsicle
XEmacs に不可欠です。すべての XEmacs 21.x には、オプティマイズされたアニ
メーション gif が正常に表示されなかったり、ある種のインターレース gif を
表示しようとするとクラッシュしてしまう既知のバグがあります。
Emacs-w3m は gif データを XEmacs 21.x で扱える形式に変換するため
に、@samp{gifsicle} プログラムを使います。これは次の場所から入手すること
ができます:

@uref{http://www.lcdf.org/gifsicle/}

@item ImageMagick
ImageMagick パッケージに含まれている @samp{convert} プログラムがあれば、
emacs-w3m は画像サイズの変更や @samp{favicon} 画像を Emacs が扱えるフォー
マットに変換するためにそれを使います。Emacs-w3m は ImageMagick が無くて
も動作しますが、あればウェブページの見栄えが良くなるでしょう。
ImageMagick パッケージは、以下の場所から手に入れることができます:

@uref{ftp://ftp.imagemagick.org/pub/ImageMagick/}

ImageMagick バージョン 5.4.0-5 以上のものが @samp{favicon} 画像の操作に
使えることを、ざっと確認しています。

@item BITMAP-MULE
Emacs 20.x か Emacs 19.34 を元にした Mule 2.3 で白黒のビットマップ画像を
表示するために使います。画像に興味が無ければ、必ずしも必要ではありません。
以下の場所で取得できます:

@uref{ftp://ftp.jpl.org/pub/elisp/bitmap/}

@item new custom
Emacs 19.34 (含 Mule 2.3) に不可欠です。Emacs 19.34 に含まれてい
る @samp{custom} ライブラリは @emph{古い} もので、これの API は最近
の Emacs  に含まれている @samp{新しい custom} とは違っています。Emacs
19.34 用の @samp{新しい custom} は、以下の場所から手に入れることができま
す:

@uref{ftp://ftp.dina.kvl.dk/pub/Staff/Per.Abrahamsen/custom/custom-1.9962.tar.gz}

Mule 2.3 のユーザは、以下のパッチを当てて、少し変更しなければならないこ
とに注意して下さい:

@example
----8<------8<------8<------8<------8<------8<------8<------8<----
--- custom-1.9962/cus-face.el~	Wed Mar  4 19:52:39 1998
+++ custom-1.9962/cus-face.el	Mon Mar  9 08:05:33 1998
@@@@ -96,7 +96,7 @@@@
       "Define a new FACE on all frames, ignoring X resources."
       (interactive "SMake face: ")
       (or (internal-find-face name)
-	  (let ((face (make-vector 8 nil)))
+	  (let ((face (make-vector face-vector-length nil)))
 	    (aset face 0 'face)
 	    (aset face 1 name)
 	    (let* ((frames (frame-list))
----8<------8<------8<------8<------8<------8<------8<------8<----
@end example

@item regexp-opt.el
Emacs 19.34 (含 Mule 2.3) に不可欠です。ファイ
ル @file{regexp-opt.el} は emacs-w3m の配布の @file{attic/} ディレクトリ
に含まれています。以下のように、単にどこか (例えば @file{site-lisp/} ディ
レクトリ) にコピーして、byte-compile すれば良いです:

@example
# cp -p attic/regexp-opt.el /usr/local/share/emacs/19.34/site-lisp
# cd /usr/local/share/emacs/19.34/site-lisp
# emacs -batch -q -no-site-file -f batch-byte-compile regexp-opt.el
@end example

@item FLIM
@samp{Shimbun} ライブラリ (@pxref{Shimbun Library}) を使うために
は @sc{flim} パッケージが必要です。@samp{Shimbun} ライブラリはウェブ上の
新聞を読むための道具類のコレクションで、Gnus、Mew、Nana-gnus、T-gnus、
Wanderlust などとともに使うことができます。@xref{Shimbun Library}。

たとえ Emacs 20.x か Emacs 21.x を使っている場合でも、@sc{flim} パッケー
ジには @sc{apel} パッケージが必要であることに注意して下さい。したがっ
て @samp{shimbun} ライブラリを使うには、@sc{apel} と @sc{flim} の両方を
インストールしなければなりません。@sc{flim} パッケージは以下の場所にあり
ます:

@uref{ftp://ftp.m17n.org/pub/mule/flim/flim-1.14/}
@end table

@node Installing Emacs-w3m
@section Emacs-w3m をインストールする
@cindex Installing emacs-w3m

Emacs-w3m の取得に関しては公式ペー
ジ @uref{http://emacs-w3m.namazu.org/} を参照して下さい。すべて準備でき
ましたか?  では始めましょう。

非 UNIX 系のシステム (@samp{configure} を実行できないか @samp{make} コマ
ンドが無い、何らかのシステム) に emacs-w3m をインストールするには、この
項を飛ばして次の項 @xref{Non-UNIX-like systems} に行って下さい。

@enumerate
@item
最初に、以下のように配布された emacs-w3m の tarball を適当な場所で展開し
て、先頭のディレクトリに入って下さい:

@example
% tar zxf emacs-w3m-@value{VERSION}.tar.gz
% cd emacs-w3m-@value{VERSION}
@end example

Emacs-w3m を CVS で取得したのならば、@samp{configure} スクリプトを生成す
るために引数無しで @samp{autoconf} を実行しなければなりません。

@item
@samp{configure} スクリプトを実行します。

@example
% ./configure
@end example

@sc{apel}、@sc{flim} または他の何かを、デフォルトの @code{load-path} 以
外の非標準ディレクトリにインストールしてある場合は、以下のよう
に @samp{--with-addpath} オプションを使ってそれらを指定しなければなりま
せん:

@example
% ./configure --with-addpath=/opt/share/apel:/opt/share/flim
@end example

@item
単に @samp{make} と @samp{make install} を実行します。XEmacs を使ってい
る場合は、さらに次の段落も見て下さい。

@example
% make
% make install
@end example

すべての Lisp ファイルと info ファイルが適切なディレクトリにインストール
されるでしょう。

さて、あなたはどんなファイルがどこに行くか分かりますか?  それを前もって
知るためには、これを使って下さい:

@example
% make what-where
@end example

Emacs 21 または XEmacs を使っているならば、アイコン画像のファイルをイン
ストールした方が良いでしょう。それを行なうには:

@example
% make install-icons
@end example

@item
以下のように @samp{make install} の代わり
に @samp{make install-package} を使うことによって、
emacs-w3m を XEmacs パッケージとしてインストールすることもできます:

@example
% make
% make install-package
@end example

この場合 @samp{make install-icons} を実行する必要はありません。

パッケージ・ディレクトリを指定するには二つの方法があります:

@itemize @bullet
@item
@samp{configure} オプションの @samp{--with-packagedir=} を使います。例で
す:

@example
% ./configure --with-packagedir=/opt/xemacs/xemacs-packages
% make what-where
% make
% make install-package
@end example

@item
変数 @samp{PACKAGEDIR} を使います。例です:

@example
% ./configure
% make what-where PACKAGEDIR=/opt/xemacs/xemacs-packages
% make
% make install-package PACKAGEDIR=/opt/xemacs/xemacs-packages
@end example
@end itemize
@end enumerate

@node Non-UNIX-like systems
@section 非 UNIX 系環境でのインストール
@cindex Installing on non-UNIX-like systems

あなたのシステムで @samp{configure} スクリプトを実行することができないか、
@samp{make} コマンドが利用できない場合は、以下の文句を唱えて下さい。

@example
% emacs -batch -q -no-site-file -l w3mhack.el NONE -f w3mhack-nonunix-install
@end example

@sc{apel}、@sc{flim} (または他の何か) が普通の場所にインストールされてい
ないと、インストーラはそれらを無視してしまうでしょう。そんな場合は、以下
に示すように、それらの場所をインストーラに告げる必要があります:

@example
% emacs -batch -q -no-site-file -l w3mhack.el //c/share/apel://c/share/flim -f w3mhack-nonunix-install
@end example

@node Minimal Settings
@section 設定しなければならない最低限のもの

この項には基本的な設定しかありません。ユーザの好みによってカスタマイズで
きるたくさんの変数は @xref{Customizable Variables} に書かれています。

@table @samp
@item Autoloads
@cindex Adding autoload settings
Emacs-w3m を XEmacs パッケージとしてインストール (@pxref{Installing
Emacs-w3m}) してあれば @file{w3m/auto-autoloads.el} ファイルがあるので、
autoload の設定を行なう必要はありません。そうでなければ、以下の行
を @file{~/.emacs} ファイルに入れて下さい:

@lisp
(autoload 'w3m "w3m"
  "Visit the WWW page using w3m" t)
@end lisp

これ以外に、必要に応じて以下のような設定を追加して下さい。

@lisp
(autoload 'w3m-find-file "w3m"
  "Find a local file using emacs-w3m." t)
(autoload 'w3m-browse-url "w3m"
  "Ask emacs-w3m to show a URL." t)
(autoload 'w3m-antenna "w3m-antenna"
  "Report changes of web sites." t)
(autoload 'w3m-bookmark-view "w3m-bookmark"
  "Show bookmarks." t)
(autoload 'w3m-dtree "w3m-dtree"
  "Display a directory tree." t)
(autoload 'w3m-namazu "w3m-namazu"
  "Search files with Namazu." t)
(autoload 'w3m-perldoc "w3m-perldoc"
  "View Perl documents" t)
(autoload 'w3m-search "w3m-search"
  "Search words using emacs-w3m." t)
(autoload 'w3m-weather "w3m-weather"
  "Display a weather report." t)
@end lisp

@item Startup File
@cindex Startup file
@vindex w3m-init-file
Emacs-w3m のいろんな変数をいじるときは、@file{~/.emacs-w3m}
(@code{w3m-init-file} のデフォルト値) の利用を推奨します。このファイル
は @file{~/.emacs} と似ていますが、こちらは emacs-w3m が起動するときに読
み込まれます。しかし、例えば前述の autoload のように、そこに書けない例外
の設定があることに注意して下さい。

@item Proxy Gateway
@cindex Firewall
@cindex Proxy gateways
@cindex Proxy servers
@vindex w3m-command-arguments
@vindex w3m-no-proxy-domains
あなたが防火壁 (firewall) の中にいて、proxy ゲートウェイを通してしか外部
のウェブサイトに接続できない場合は、proxy ゲートウエイを使うよう
に w3m に指示する必要があります。

これにはいくつかの方法があります。一つは環境変
数 @code{http_proxy} を shell 上で、こんなふうにグローバルに設定すること
です:

@example
setenv http_proxy http://proxy.hogege.com:8000/
@end example

他に、変数 @code{w3m-command-arguments} をカスタマイズして、@samp{-o} お
よび @samp{http_proxy=http://PROXY_SERVER_NAME:PORT/} を追加する方法があ
ります。これは @file{~/.emacs-w3m} ファイルで以下のように行なうこともで
きます。

@lisp
(setq w3m-command-arguments
      (nconc w3m-command-arguments
             '("-o" "http_proxy=http://proxy.hogege.com:8000/")))
@end lisp

環境変数 @code{no-proxy} にコンマで区分けされたホスト名を設定するか、ま
たは以下のようにドメイン名 (ホスト名ではない) のリストを変
数 @code{w3m-no-proxy-domains} に設定することによって、proxy ゲートウェ
イを使わずに接続するホストを指定することができます。

@lisp
(setq w3m-no-proxy-domains '("local.com" "neighbor.com"))
@end lisp

@code{no-proxy} ホストの設定に正規表現を使うには、変
数 @code{w3m-command-arguments-alist} のドキュメントを見て下さい。
@end table

@node Basic Usage
@chapter 基本的な使い方


@menu
* Browsing Web Pages::          ネットサーフィンしよう!
* Inline Images::               画像表示を ON/OFF する
* Tracing History::             時空を遡る
* Managing Bookmarks::          ぼくの/わたしのお気に入り
* Using Tabs::                  これが流行のタブ・ブラウザだ
* Selecting Buffers::           たくさんのセッションから一つを選ぶ
* Downloading::                 ファイルをダウンロードする
* Submitting Forms::            HTML フォームに記入する
@end menu

@node Browsing Web Pages
@section ネットサーフィンしよう!
@vindex w3m-lynx-like-map
@vindex w3m-info-like-map

Emacs-w3mでのウェブブラウジングは、御期待通り、キー操作で全て行なうこと
ができます。Emacs-w3mには、既存のウェブブラウザ／ドキュメントブラウザに
基づいた2種類のキー割当て体系(キーマップ)が用意されています。一つはテキ
ストベースのウェブブラウザlynxに基づくものです。このキーマップは
Emacs-w3mのコード中では、@code{w3m-lynx-like-map} という変数で定義されて
います。もう一つは、GNUプロジェクトの標準ドキュメントブラウザ info のに
基づくものです。このキーマップは@code{w3m-info-like-map} という変数で定
義されています。ユーザは自分の好みやlynx、infoの利用経験に基づいて、どち
らかのキーマップを選ぶことができます。キーマップを選択する方法については
@xref{Customizable Variables}を見て下さい。特に選択をしなかった場合、
w3m-lynx-like-mapがデフォルトのキーマップとして使われます。以降では、
w3m-lynx-like-mapに基づきEmacs-w3mの使い方を記述します。

@c マウス
ターミナル以外でEmacsが動作している場合、例えばX Window Systemのクライア
ントとして、Emacsが動作している場合、他のGUIベースのウェブブラウザと同様
にマウスを使ってもブラウジングの基本操作を行なうことができます。キー操作
の方が迅速なブラウジングが可能ですが、マウス操作の方が覚えることは少ない
です。

@menu
* Launching and Jumping::       とにかく動かしてみよう
* Moving in a page::            ページ内を飛びまわる
* Moving over pages::           ページ間を渡り歩く
* Browsing with mouse operations:: マウスでサーフィン
* Leaving for daily hacking and/or daily writing:: 普段の生活に戻るには
@end menu

@node Launching and Jumping
@subsection とにかく動かしてみよう

以下に挙げる三つの違うコマンドを使って emacs-w3m を起動することができま
す。それらのコマンドの一つを試して下さい。ウェブページが ``*w3m*'' とい
う名前の Emacs のバッファ (emacs-w3m のバッファのこと) に表示されます。
たぶんあなたは気付くでしょうけれども、emacs-w3m のバッファのメジャーモー
ドは @code{w3m-mode} です。他にマイナーモード (@pxref{Managing
Bookmarks}) もあります。

ここでは、それらのコマンドの最も基本的な使い方だけを説明します。個々のコ
マンドについてもっと詳しく知りたい場合は、@ref{Emacs-w3m Functions} を参
照して下さい。また、ユーザの好みによって emacs-w3m の動作を変えることが
できる変数に関する詳細は @ref{Customizable Variables} をご覧下さい。

@table @code
@item w3m
@findex w3m
@vindex w3m-home-page
@vindex w3m-quick-start
@cindex Using emacs-w3m as a batch command
Emacs-w3m を起動して、このとき @code{w3m-home-page} という変数で指定され
たホームページを表示します。@code{w3m-home-page} のデフォルトの値
は ``about:'' です。毎回 URL を指定できるようにしたい場合は、変
数 @code{w3m-quick-start} の値を @code{nil} にして下さ
い (@pxref{Customizable Variables})。

これは Emacs のバッチコマンドとして使うこともできます。以下は例です:

@example
% emacs -f w3m
@end example

URL を指定して、このように使うこともできます:

@example
% emacs -f w3m http://emacs-w3m.namazu.org/
@end example

@item w3m-find-file
@findex w3m-find-file
ローカルファイル名の入力をミニバッファで促して、それを emacs-w3m で表示
します。

@item w3m-browse-url
@findex w3m-browse-url
URL の入力をミニバッファで促して、それを emacs-w3m で表示します。このコ
マンドは、どちらかと言えば、他のアプリケーションプログラムか
ら emacs-w3m を起動するために用意されています。
@end table

あなたがすでに Emacs のユーザであるならば、emacs-w3m バッファの中で移動
するのに苦労は無いでしょう。多くの標準のキーがそのまま使えるのですから。
例えば @kbd{C-n}、@kbd{C-v} それに @kbd{C-s} は emacs-w3m バッファで有効
なキーです (これらは一行下降、一ページ送り、または後方単語検索として共通
に使われます)。

リンクを辿るには @key{RET} キーを使って下さい。それにはポイントをリンク
の場所に移動しなければなりません。リンクは普通のテキストとは違って表示さ
れているので、簡単に見分けることができます。それらは下線付き、または違う
色になっているはずです。それらの見栄えは @code{w3m-anchor-face} というフェー
スによって決まります (@pxref{Customizable Variables})。

@table @kbd
@item RET
@kindex RET
@findex w3m-view-this-url
現在位置のリンクが指し示すページを表示します (@code{w3m-view-this-url})。

このコマンドの振る舞いは、厳密には現在位置のリンクの性質に、または接頭引
数を与えるかどうかに依存します。詳細は @ref{Emacs-w3m Functions} を参照
して下さい。
@end table

前述のように、変数 @code{w3m-quick-start} の値を @code{nil} に設定するこ
とによって、@kbd{M-x w3m} コマンドを使ったときに URL を指定することが可
能です。emacs-w3m のバッファでは、入力した新しい URLs のページに行くため
の一般的な方法がさらに二つあります。

@table @kbd
@item RET
@kindex RET
@findex w3m-view-this-url
Emacs-w3m のバッファにおいて、ヘッダラインに表示されている URL の位置に
ポイントを移動させてから @key{RET} を叩くことによって、ミニバッファか
ら URL を入力して、そページを表示させることができます。この機能
は、Mozilla などの GUI ベースのウェブブラウザに慣れている人には親しみを
感じさせるでしょう。これに関する詳しい説明が @ref{Emacs-w3m
Functions} で見つかるはずです (@code{w3m-view-this-url})。

@item g
@kindex g
@findex w3m-goto-url
emacs-w3m のバッファで @kbd{g} キーを押すと、ミニバッファから URL を入力
して、そのページを表示させることができます (ポイントの位置とは無関係で
す)。このキーの割り当ては、Gnus や Mew を利用している人には親しみやすい
でしょう (@code{w3m-goto-url})。

@item c
@kindex c
@findex w3m-print-current-url
表示しているページの URL をエコーエリアに表示するとともに、
@code{kill-ring} に URL を挿入します (@code{w3m-print-current-url})。

@item u
@kindex u
@findex w3m-print-this-url
現在位置のリンクが指し示す URL をエコーエリアに表示するとともに、
@code{kill-ring} に URL を挿入します (@code{w3m-print-this-url})。
@end table

さて、あなたが読んでいるページが今日の時事ニュースかだれかの日記だったら、
それを取り込んだ後で新しい内容で置き換えられているかもしれません。次のコ
マンドを使うと、同じページの最新の内容を取り寄せることができます。(この
コマンドは、ページが壊れているように見える場合に、全画面の再描画を強制さ
せるためにも役立てることができます。)

@table @kbd
@item R
@kindex R
@findex w3m-reload-this-page
現在表示しているページを読み込み直します (@code{w3m-reload-this-page})。
@end table

@node Moving in a page
@subsection ページ内を飛びまわる
@cindex Moving in a page

Emacs で移動用に割り当てられている馴染み深いキーがウェブページの閲覧中に
使えることは、おそらくすでにあなたを魅了しているでしょう。信じてもらえな
いかもしれませんが、もっとあるのです!  私たちはあなたの時間を大切にした
いので、ポイントの移動、ページのスクロール、あるいはとても速いやり方でリ
ンクを見つけるためのキーを追加しました。それらをマスターすれば、それらが
どんなに便利かを分かってもらえるでしょう。

Emacs の標準のキーバインドに比べて @code{w3m-mode} では、より短いキース
トロークでスクロールコマンド群を呼び出せるようにキーが割当てられています。
ウェブページ内でテキストを入力できる個所はかなり特別なの
で (@pxref{Submitting Forms})、たいていのキーは特別な意味を持っていて、
もはや @code{self-insert-command} に割り当てられてはいません。

@c スクロール
@table @kbd
@item SPC
@kindex SPC
@findex w3m-scroll-up-or-next-url
下に向かってスクロールします。@samp{more} コマンドや @samp{less} コマン
ド、あるいは Emacs の @code{view-mode} を使ったことがあれば、馴染みがあ
るはずです (@code{w3m-scroll-up-or-next-url})。

@item DEL
@kindex DEL
@findex w3m-scroll-down-or-previous-url
上に向かってスクロールします。@samp{less} コマンド
や Emacs の @code{view-mode} を使ったことがあれば、馴染みがあるはずで
す (@code{w3m-scroll-down-or-previous-url})。

@item >
@kindex >
@findex w3m-scroll-left
@vindex w3m-horizontal-scroll-columns
左にスクロールします。スクロールの量
は @code{w3m-horizontal-scroll-columns} で与え、デフォルトは 10 で
す (@code{w3m-scroll-left})。

@item <
@kindex <
@findex w3m-scroll-right
@vindex w3m-horizontal-scroll-columns
右にスクロールします。スクロールの量
は @code{w3m-horizontal-scroll-columns} で与え、デフォルトは 10 で
す (@code{w3m-scroll-right})。

@item .
@kindex .
@findex w3m-shift-left
@vindex w3m-horizontal-shift-columns
左にシフトします (小刻みな水平スクロール)。シフトの量
は @code{w3m-horizontal-shift-columns} で与え、デフォルトは 2 で
す (@code{w3m-shift-left})。

@item ,
@kindex ,
@findex w3m-shift-right
@vindex w3m-horizontal-shift-columns
右にシフトします (小刻みに水平スクロールです)。シフトの量
は @code{w3m-horizontal-shift-columns} で与え、デフォルトは 2 で
す (@code{w3m-shift-right})。

@item M-l
@kindex M-l
@findex w3m-horizontal-recenter
現在ポイントがある位置のテキストが、水平方向に関して中心になるように
スクロールします (@code{w3m-horizontal-recenter})。
@end table

@c 移動
@code{w3m-mode} メジャーモードは、いろいろな種類の移動コマンドを定義しま
す。すなわち、リンク、フォーム、それに画像 (それが表示されていてもいなく
ても) です。

簡単な例を挙げてみます。広く知られている Google 検索エンジンで単語を調べ
たいのだとしましょう。ステップ１:
emacs-w3m で @uref{http://www.google.com} を開きます。ステップ２: ページ
が表示されたら hit @kbd{]} を叩いて下さい。ぐわしっ!  ポイントがページの
最初の入力フォームに移動しましたね。今や @kbd{RET} を叩いてそこに何かを
入力して、@kbd{C-c C-c} で送ることができます。このコマンド無しでは、その
ページに @kbd{C-n} や @kbd{C-f} などを打ち込んで移動しなければならなくて、
まったく骨折りなことだったでしょう。

@table @key
@item TAB
@kindex TAB
@findex w3m-next-anchor
次のアンカーへポイントを移動します。より厳密には、順方向で最も近いアンカー
へ移動します。
@end table

@table @kbd
@item M-@key{TAB}
@itemx S-@key{TAB}
@kindex M-@key{TAB}
@kindex S-@key{TAB}
@findex w3m-previous-anchor
前のアンカーへポイントを移動します。より厳密には、逆方向で最も近いアンカー
へ移動します (@code{w3m-previous-anchor})。

@item ]
@kindex ]
@findex w3m-next-form
次のフォームへポイントを移動します。より厳密には、順方向で最も近いフォー
ムへ移動します (@code{w3m-next-form})。

@item [
@kindex [
@findex w3m-previous-form
前のフォームへポイントを移動します。より厳密には、逆方向で最も近いフォー
ムへ移動します (@code{w3m-previous-form})。

@item @}
@kindex @}
@findex w3m-next-image
次の画像へポイントを移動します。より厳密には、順方向で最も近い画像へ移動
します (@code{w3m-next-image})。

@item @{
@kindex @{
@findex w3m-previous-image
前の画像へポイントを移動します。より厳密には、逆方向で最も近い画像へ移動
します (@code{w3m-previous-image})。
@end table

@c TODO?
@c C-a	Go to the entire beginning of line.
@c C-e	Go to the entire end of line.
@c j	Next line.
@c k	Previous line.

@c l	Forward char.
@c h	Backward char.

@c M-g	Jump to line.

@node Moving over pages
@subsection ページ間を渡り歩く

この項ではページからページに移動するやり方を説明します。リンクを辿った
り URL を入力する方法はここにはありません (それら二つの方法
は @ref{Launching and Jumping} で説明されています)。

ここには、以前に訪問したページの履歴を後ろに、および前に移動する (他のブ
ラウザでは「戻る」「進む」としておなじみの) コマンドと、仮にもブラウザた
るものが義務として提供すべき「ホームページへ移動する」機能があります。あ
らかじめ @ref{Tracing History} の項を読んでおいた方が、たぶん理解しやす
いでしょう。

@table @kbd
@item B
@kindex B
@findex w3m-view-previous-page
以前に訪問したページの履歴を１ページ戻りま
す (@code{w3m-view-previous-page})。数の引数 N が与えられると N ページ戻
ります。これは過去に戻るためのお勧めの方法です。

@item N
@kindex N
@findex w3m-view-next-page
以前に訪問したページの履歴を１ページ進みます (@code{w3m-view-next-page})。
もちろん @kbd{B} で履歴を戻った後でなければ働きません。数の引数 N が与え
られると N ページ進みます。このコマンドは、まさに back to the future を
実現します!

@item H
@kindex H
@findex w3m-gohome
@vindex w3m-quick-start
ホームページへ移動します (@code{w3m-gohome})。ホームページ
の URL は @code{w3m-home-page} という変数で指定しま
す (@pxref{Customizable  Variables})。@code{w3m-home-page} のデフォルト
の値は ``about:'' です。

@end table

以下のコマンドは、他には無い emacs-w3m の特長です。私たちはそれらの特許
を得ることができました。従って、他のいかなる場所でも見つからないでしょう。
そのため、今日それらを使うことを学ばなければなりません! (真に受けないで
下さいね。ただの冗談ですから。)

@table @kbd
@item ^
@kindex ^
@findex w3m-view-parent-page
現在表示されているページの親ディレクトリへの移動を試みます。例えば、
``http://foo/bar/'' が表示されている場合は ``http://foo/'' に移動しよう
とします。この機能は次の観察に基づいて実装されました: ウェブブラウザのユー
ザは、しばしば一段階上のディレクトリに移動しなければなりません。彼らが捜
している情報が、現在のページに表示されないから (それが削除されたので、あ
るいは検索エンジンが間違っているページに連れて行ったため) です。

他のウェブブラウザを使う場合、一般には、URL から @key{DEL} キー等を複数
回使って、手作業で末尾のコンポーネントを削除する手間が必要です。
Emacs-w3m では、この操作を @kbd{^} のたった一押し! で行なうことができま
す。
@end table

@table @key
@item SPC
@findex w3m-view-next-page
Scroll up or go to next url.
(TODO)

@item DEL
@findex w3m-view-previous-page
Scroll down or go to previous url.
(TODO)
@end table

@node Browsing With Mouse Operations
@subsection マウスでサーフィン

ツールバーとメニューについて...
@table @key
@item mouse-2
View this url use mouse.
If w3m-use-form is t, RET and <mouse-2> action a form input.
You may use the prefix arg `2' or `C-u C-u' to make a new session.
@end table

@node Leaving for daily hacking and/or daily writing
@subsection 普段の生活に戻るには

@table @kbd
@item q
Close this window and make the other buffer current.
@end table

@table @kbd
@item Q
Quit browsing WWW after updating arrived URLs list.
@end table

@example
G	Goto URL in the new session.

M	View current url with external browser.
\	Display source of this current buffer.
=	Display header of this current buffer.
E	Edit the local file pointed by the URL of current page.
e	Edit the local file by the under the point.

C-c C-@@	Mark the current position.
C-c C-v	Goto the last position.

s	Display arrived history.
	If called with 'C-u', this command displays arrived-DB history.
A	Display the report change of WEB sites.
	If called with 'C-u', this command reloads report.
+	Add the current page to antenna.
S	Search query.
	If called with 'C-u', you can choose search engine.
W	Display weather report.
	If called with 'C-u', you can choose local area.
D	Display directory tree.
	If called with 'C-u', view all directories and files.
M-x w3m-namazu	Search files with Namazu.
	If called with 'C-u', you can choose index.

C-c C-t	Create a twin copy of the current buffer.
C-c C-n	Switch to next w3m buffer.
C-c C-p	Switch to previous w3m buffer.
C-c C-s	Select one buffer of all w3m buffers.
C-c C-a	Switch one buffer of all w3m buffers.
C-c C-w	Kill current w3m buffer.
C-c M-w	Kill other w3m buffers.
@end example

@node Inline Images
@section 画像表示を ON/OFF する
@cindex Displaying images

使用している Emacs のバージョンがバッファに画像を表示することができるな
らば、あたかも Netscape のような「グラフィカル」ブラウザのように、
emacs-w3m はウェブページにそれらを表示することができます。下記のコマンド
のどれかを使おうとする前に、あなたの Emacs が正しく画像表示に使えること
を確かめて下さい (@pxref{Required Emacs Version})。

現在のバッファにおける画像の表示を切り替えるには @kbd{T} を使って下さい。
それによって emacs-w3m はサーバから画像を取ってきて、しかる後にそれらを
「グラフィカル」ブラウザとしてそうなるであろうバッファの位置に表示します。
もう一度キーを叩くと、画像はバッファから消え去ります。

デフォルトでは emacs-w3m は画像を表示しませんが、その振る舞いを変更して
常に画像表示することを選ぶのは可能で、それには変
数 @code{w3m-default-display-inline-images} をカスタマイズして、その
値を @code{nil} から @code{t} に変更する必要があります。
@xref{Customizable Variables}。

さらに Emacs-w3m には、画像の拡大縮小、ファイルへのセーブ、または外部ビュー
ワで見る、といった気の利いた機能が付属しています。

@table @kbd
@item T
@kindex T
@findex w3m-toggle-inline-images
現在のバッファ (および後でそれを元に生成されるバッファ) におけるインライ
ン画像の表示をトグルで切り替えます (@code{w3m-toggle-inline-images})。

@item I
@kindex I
@findex w3m-view-image
@cindex Viewing images
ポイントの下にある画像を外部ビューワで見ます (@code{w3m-view-image})。

@item M-i
@kindex M-i
@findex w3m-save-image
@cindex Saving images
ポイントの下にある画像を外部ファイルにセーブします。デフォルトの名前はそ
の画像の元の名前です。それ故に、ほとんどの場合に @kbd{M-i RET} は正しい
名前で画像をセーブするでしょう (@code{w3m-save-image})。

@cindex Zooming images
@item M-[
@kindex M-[
@findex w3m-zoom-out-image
ポイントの下にある画像を縮小 (zoom out) しま
す (@code{w3m-zoom-out-image})。

@item M-]
@kindex M-]
@findex w3m-zoom-in-image
ポイントの下にある画像を拡大 (zoom in) します (@code{w3m-zoom-in-image})。
@end table

@node Tracing History
@section 時空を遡る
@cindex Browsing history
@cindex Arrived URLs

Emacs-w3m には、以前に訪問したすべてのページのリストを提示するための、複
数の方法があります。第一の方法は「emacs-w3m 履歴」(emacs-w3m history) と
単純に呼ばれるもので、そのセッション (注: そのバッファ内で行なう操作とそ
れに対する反応) において訪問したページのリストを階層的に提示します。すな
わち、あるリンクを辿ると、それまでのページは行き先の「親」になります。そ
れは、訪れたページの跡を辿ったり、履歴が長くなってしまった場合にどこから
着たかを思い出すためには、たいへん都合の良いものです。

これは、GNU プロジェクトのホームページをちょっと訪ねた後における、この機
能の動作の例です:

@example
GNU's Not Unix! - the GNU Project and the Free Software Foundation (FSF)
  Philosophy of the GNU Project - Free Software Foundation (FSF)
    GNU Emacs - GNU Project - Free Software Foundation (FSF)
     Order from the Free Software Foundation (FSF)
  Links to Other Free Software Sites - GNU Project - Free Software Fo...
    EFF: Homepage
@end example

(実際には、この例は 72 桁に収まるように、少しばかり編集されています。現
実の emacs-w3m バッファでは URLs は切り詰められません。)

どの emacs-w3m バッファからでも @kbd{s} キーを使うことによって、このよう
な履歴を提示させることが可能です。

この履歴はバッファ・ローカル、すなわち、ある emacs-w3m のバッファに固有
のものであることに注意して下さい。でも emacs-w3m にはユニークな機能があ
ります: あなたが新しいページを訪問する場合、履歴は新しいバッファにコピー
されます。その結果、それまでに訪れたページに今まで通りアクセスすることが
できます。これは、Mozilla などの、新しいバッファでは履歴が常にゼロからス
タートするブラウザとは異なります。

もう一つの過去に訪れたページに関する情報を手に入れる方法は、「arrived
URLs」です。これはあなたが emacs-w3m で訪問した、最後の 500個! の URL の
リストです。リストは日付順で、最も最近のものを先頭に、それぞれのページの
訪問時刻が表示されます。これは例です (info の表示が拡がり過ぎないように
編集されています):

@example
Order from the Free Software Foundation (FSF)             22:53:25
GNU Emacs - GNU Project - Free Software Foundation (FS    22:53:05
Philosophy of the GNU Project - Free Software Foundati... 22:52:46
Philosophy of the GNU Project - Free Software Foundati... 22:52:39
EFF: Homepage                                             22:52:18
Links to Other Free Software Sites - GNU Project - Fre... 22:52:07
Links to Other Free Software Sites - GNU Project - Fre... 22:52:07
GNU's Not Unix! - the GNU Project and the Free Softwar... 22:51:32
Bookmarks                                                 22:51:02
The DICT Development Group- upwards                       2003-01-08
the monkey puzzle: new debian packages as an rss feed     2003-01-08
new-debian-packages.rss                                   2003-01-07
it's a miracle                                            2003-01-06
@end example

前のコマンドに接頭引数を渡す、すなわち @kbd{C-u s} を使うことによって、
この履歴を得ることができます。このページに表示される URLs の数はカスタマ
イズできます。変数 @code{w3m-keep-arrived-urls} を参照して下さい。それ
は 500 を越えることはできません。@xref{Customizable Variables}。

もちろん、すべての場合に、例に示されているすべての行はリンクです。そのリ
ンクを辿ることによって、通常のページを訪問していたらちょうどそうなるよう
に、以前に訪ねたどのページにも行くことができます。

@table @kbd
@item s
@kindex s
@findex w3m-history
このセッションにおいて訪問した URLs のリストを表示します。接頭引数付きで
呼ばれると、代わりに arrived URLs を表示します (@code{w3m-history})。
@end table

@ref{Moving over pages} の項も見て下さい。そこでは「戻る」「進む」などの
機能に割り当てられた単純なキーで、履歴の中を移動するやり方を説明していま
す。

@node Managing Bookmarks
@section ぼくの/わたしのお気に入り
@cindex Bookmarks

現代的なあまたのブラウザの例に漏れず、emacs-w3m には先進のブックマークの
機能があります。それによってカテゴリー毎に分類し、それらを編集し、ああ、
もちろん簡単に閲覧することができます。

日本語版注釈: ブックマークの語源は、本に挟む栞 (しおり) のことです。

@menu
* Adding Bookmarks::            お気に入りに URL を加える
* Consulting Bookmarks::        ブックマークを閲覧する
* Editing Bookmarks::           ブックマークを変更するには?
@end menu

@node Adding Bookmarks
@subsection お気に入りに URL を加える
@cindex Adding a bookmark
@kindex a
@kindex C-u a
@findex w3m-bookmark-add-current-url
@kindex M-a
@findex w3m-bookmark-add-this-url

ブックマークに URL を加えるには、いくつかのやり方があります。最初の一つ
は、@kbd{a} キーを使って (または @code{w3m-bookmark-add-current-url} コ
マンドを呼んで) 今現在閲覧しているページを加えることです。すると、そのブッ
クマークをどの項目に入れるかを尋ねられ (@key{TAB} キーによる補完が効きま
す)、タイトルの書き換えが促されます (デフォルトは、そのページのタイトル
になっています)。これらの二つをこなしたら、それらを有効にするため
に @kbd{RET} を叩いて下さい。すると ``Added'' というメッセージがミニバッ
ファに現れて、(うろたえるなかれ!) そのページがブックマークに記録されます。

ブックマークを加えるもう一つの方法は、@kbd{M-a} を使う (また
は @code{w3m-bookmark-add-this-url} コマンドを呼ぶ) ことです。これは、現
在位置の URL (もしそのリンクを辿ると、閲覧することができる URL) をブック
マークに加えます。その場合でも最初に説明した方法と同様に、項目の名前とタ
イトルを入力しなければなりません。そのとき、それらのデフォルトはリンク自
体の名前になっています。

最後に、三番目の方法は @kbd{C-u a} を叩くことです。このときは、ブックマー
クに加える URL、その項目、およびタイトルの入力が促されます。

@table @kbd
@item a
現在のページをブックマークに加えます。接頭引数付きで呼ばれた場合は、加え
る URL の入力が求められます (@code{w3m-bookmark-add-current-url})。

@item M-a
現在位置の URL をブックマークに加えま
す (@code{w3m-bookmark-add-this-url})。
@end table

@node Consulting Bookmarks
@subsection ブックマークを閲覧する
@cindex Consulting bookmarks
@kindex v
@findex w3m-bookmark-view

ブックマークされたページを閲覧する最も簡単な方法は、emacs-w3m のバッファ
で @kbd{v} キーを叩くことです。ですがもう一つ、特別な URL であ
る @uref{about://bookmark/} に行くことによっても可能です。すると一行あた
り一つずつのブックマークが、項目ごとにまとめられて表示されるでしょう。そ
こでは、他のページを閲覧するのと同じように、それらを確実に閲覧することが
できます。

ブックマークのページでは bookmark マイナーモードが働いています。それは、
ブックマークを編集するためのキーバインドを追加します。@xref{Editing
Bookmarks}。

@table @kbd
@item v
ブックマークのページを呼び出します (@code{w3m-bookmark-view})。
@end table

@node Editing Bookmarks
@subsection ブックマークを変更するには?
@cindex Editing bookmarks
@findex w3m-bookmark-kill-entry
@findex w3m-bookmark-edit
@findex w3m-bookmark-undo

Bookmark マイナーモード (@pxref{Consulting Bookmarks}) は、ブックマーク
を編集するためにいくつかのキーバインドを設けています。中でもブックマーク
を kill (すなわち消去) するための @kbd{C-k} とブックマーク・ファイルを編
集するための @kbd{E} は、最も注目に値します。

ブックマークは HTML ファイルに収められています。したがってそのファイルは
手で編集することができますが、十分に注意して下さい。emacs-w3m が項目名を
認識するために必要なコメントを消してしまうことによって、ものごとは簡単に
台無しになります。あなたが HTML の基本を知っていれば、むしろファイルは極
めて分かり易いものでしょう。

@table @kbd
@item C-k
現在位置のブックマークを kill します (@code{w3m-bookmark-kill-entry})。

@item E
ブックマーク・ファイルを読み込んで、編集可能な状態にしま
す (@code{w3m-bookmark-edit})。

@item C-_
やり直しをします (@code{w3m-bookmark-undo})。
@end table

@node Using Tabs
@section これが流行のタブ・ブラウザだ


@node Selecting Buffers
@section たくさんのセッションから一つを選ぶ


@node Downloading
@section ファイルをダウンロードする
@c d	Download this url.

@node Submitting Forms
@section HTML フォームに記入する

これらの emacs-w3m コマンドは、単純なキーバインドと専用の Emacs のウィン
ドゥかミニバッファを使って、フォームからフォームへの移動とフィールドに入
力するための機能を提供します。

覚えておいて欲しい大事なキーバインドは @kbd{RET} です。これは現在位置に
あるものによって異なる意味を持ちます。テキスト領域 (textarea) では、ミニ
バッファで値を入力することが促されます。選択用のタグでは、選択肢のリスト
が Emacs のエレクトリック (electric == 自己挿入) ウィンドゥに現れま
す (そこでは矢印キーで移動して、@kbd{RET} キーで一つを選ぶことができま
す)。ラジオボタンおよびチェックボックスでは、@kbd{RET} キーでそれらのう
ちの一つを選びます。

ミニバッファかエレクトリック・ウィンドゥにいるときは、@kbd{C-c C-q} キー
で取り消すことができます。フォームに記入したものを送り出すに
は @kbd{C-c C-c} を使って下さい。

@table @kbd
@item ]
次のフォームにジャンプします (@code{w3m-next-form})。

@item [
前のフォームにジャンプします (@code{w3m-previous-form})。

@item C-c C-c
現在位置のフォームに記入したものを送り出します (@code{w3m-submit-form})。

@item RET
現在位置にあるのフォーム値を書き換えます。

@item RET @r{(w3m-form-*-keymap)}
その値を選択します。

@item C-c C-q @r{(w3m-form-*-keymap)}
フォームの編集を中断して、変更を取り止めます。
@end table

@node Pretty Good Features
@chapter たくさんのすぐれもの


@menu
* Using Search Engines::        使いやすいウェブ検索
* Grouping URLs::               一つの URL で複数のウェブページを見る
* Weather Information::         明日の天気は晴れでしょう
* Using Antenna::               アンテナを張り巡らそう
* Showing Directory Tree::      ディレクトリの木構造を表示する
* Viewing Perl Documents::      Perl のドキュメントを見る
* Using Namazu::                Namazu でファイルを検索する
* Octet::                       application/octet-stream データを見る
@end menu

@node Using Search Engines
@section 使いやすいウェブ検索
@cindex Search engines

Emacs-w3m には検索エンジンを利用するための先進の機能があり、二つのインター
フェースを通して利用することができます:

@itemize
@item
標準のインターフェースです。@kbd{S} キーでいずれかの emacs-w3m バッファ
から起動されます。これは検索エンジンを指定して検索語を入力する、単純な対
話型のやり方です。@ref{The Search Interface} を参照して下さい。

@item
クイックサーチ・インターフェースです。これは技巧的に作られた URL に行く
ことによって検索エンジンを利用するための、より速い (さらに、より複雑
な) 方法です。この機能に関する詳細は @ref{Quick Searching} を参照して下
さい。
@end itemize

@menu
* The Search Interface::        Emacs-w3m による検索のやり方
* Quick Searching::             もう一つの (そして速い) ウェブ検索
* Adding New Search Engines::   お気に入りのエンジンを使うには?
@end menu

@node The Search Interface
@subsection Emacs-w3m による検索のやり方
@cindex Searching
@kindex S
@findex w3m-search
@vindex w3m-search-default-engine

Emacs-w3m のバッファで @kbd{S} キーを使うことにより (デフォルトのキーマッ
プを使うものとします)、標準の検索インターフェースを立ち上げることができ
ます。すると、ミニバッファで検索語の入力を求めるプロンプトが現れるので、
一つまたは複数の語を入れて、@kbd{RET} を叩いて下さい。そのエンジンの検索
結果のページが現れ、その後、あたかも検索エンジンに通常のウェブの流儀によ
る入力を行なったときのように、結果を閲覧することができます。

たぶん、あなたはどのエンジンで探索したいかを決める機会が与えられていない
ことに気付くでしょう。Emacs-w3m はデフォルトで Google 検索エンジンを使い
ますが、変数 @code{w3m-search-default-engine} (@ref{Customizable
Variables} 参照) をカスタマイズすることによって、この振る舞いを変更する
ことができます。あるいは、このコマンドを使うたびに検索エンジンを指定する
ことができます。

どのエンジンを使用するかを明示するためには、コマンドに接頭引数を与えなけ
ればなりません (これは @kbd{C-u S} のように、コマンドの前に通
常 @kbd{C-u} を叩くことを意味します)。すると emacs-w3m はエンジンの入力
を促すので、その名前を一つ選ぶことができます (@key{TAB} キーで補完ができ
ます)。いったん選択したら @kbd{RET} キーを叩いて下さい。その後で検索語を
入力することができ、@kbd{RET} をタイプすれば検索結果が現れるでしょう。

@table @kbd
@item S
新しい検索を始めます。接頭引数付きで呼ばれた場合は、どのエンジンを使うか
を尋ねます (@code{w3m-search})。
@end table

@node Quick Searching
@subsection もう一つの (そして速い) ウェブ検索
@cindex Quick Searching
@cindex Special URLs
@vindex w3m-search-quick-search-engine-alist
@vindex w3m-search-engine-alist
@vindex w3m-default-coding-system

ウェブ・パワーユーザ (これを読んでいるあなた) には、迅速で効率的な検索の
方法が必要です。クイックサーチはその一つです。

それは何をするのかって?  それは @uref{gg:emacs} のような特別の URL に行
くだけで、ウェブ検索を始めさせるのです。このモードの動作の長所は、次の通
りです:

@itemize
@item
速い。エンジンと検索語を選ぶのに、一つの URL をタイプするだけです。

@item
便利。この機能によって、容易に emacs-w3m のタブかウィンドゥを開いて、検
索を始めることができます。例えば、@kbd{G} キーで新しいウィンドウを開いて
クイックサーチ URL に行くように。そして、特別のクイックサーチ URL そのも
のにも、ブックマークを付けることができます。

@item
グルーピング機能も使える。例えば @uref{group:gg:emacs&ya:w3m} のよう
な URL によって、同時に二つの検索を始めることができます。例えばこの場合
は、Google で ``emacs'' の、Yahoo! で ``w3m'' の検索をそれぞれ始めます。
@xref{Grouping URLs}。
@end itemize

これを使うのはとても簡単です。``gnu'' という単語を Google で探したいとす
れば、@kbd{g} を叩いてから ``gg:gnu'' という URL をタイプして下さい。こ
の表現の第一の部分 "gg" は、Google 検索エンジンを使用したいことを示しま
す。第二の部分は検索語です。エンジンと検索語は、コロンで分けなければなり
ません。そして @kbd{RET} を叩けば検索結果を見ることができます。スペース
で分離した複数の語を入力できることを、心に留めておいて下さい (ミニバッファ
でスペースをタイプするには、@kbd{C-q @key{SPC}} のように、最初に
@kbd{C-q} を叩いて下さい)。

Emacs-w3m のデフォルトでは、利用可能ないくつかの検索エンジンの短縮形があ
り、それらは変数 @code{w3m-search-quick-search-engine-alist} で定義され
ています。例えば Google には ``gg''、Google Groups 用には ``ggg''、
Yahoo! のための ``ya''、および Altavista に対する ``al'' などの短い名前
です。さらに検索エンジンの短縮形を追加するには、@xref{Adding New Search
Engines} を参照して下さい。

短縮形の代わりに、``google'' や ``yahoo'' のような完全なエンジンの名前を、
クイックサーチ URL に使うこともできます。それらの名前は、変
数 @code{w3m-search-engine-alist} で定義されます。

@node Adding New Search Engines
@subsection お気に入りのエンジンを使うには?
@cindex Adding new search engines

Emacs-w3m は利用可能な多くの検索エンジンを持っています。あなたのお気に入
りの検索エンジンを使いたいのに、万が一にもそれが既知の検索エンジンのリス
トに載っていなかったらどうしましょう?  それを検索エンジンのリストに加え
れば良いのです。そしてそれは極めて簡単です:

@enumerate
@item
最初に、あなたが加えたい検索エンジンのエントリー・ポイントが何かを知らな
ければなりません。例えば:

@uref{http://my.searchengine.com/?query=foobar}

ここで foobar はあなたが検索したい語です。

@item
この情報が手に入ったら、@file{~/.emacs-w3m} ファイルに加えてください:

@lisp
(eval-after-load "w3m-search"
  '(add-to-list 'w3m-search-engine-alist
                '("My engine"
                  "http://my.searchengine.com/?query=%s"
                  nil)))
@end lisp

第一フィールドの "My engine" をあなたのエンジンの説明で、第二フィールド
をエントリー・ポイントで置き換えて下さい (@samp{%s} は重要です。これは検
索を行なうときに、検索語で置き換えられます)。そして第三フィールドは使用
するエンコーディングを意味し、@code{nil} またはそれが省略された場合は変
数 @code{w3m-default-coding-system} の値が標準のエンコーディングとして使
われます。

エンコーディングに関してご参考までに、英語の検索エンジンのためには、ほと
んどそれを考慮する必要がありません。しかしながら、ある日本の検索エンジン
については、それに何か (例えば @code{euc-japan}) を指定する必要があるか
もしれません。

@item
今やこの検索エンジンは、emacs-w3m で通常の @kbd{S} キーで使うことができ
ます。このエンジンを頻繁に使うのならば、短いエンジンの名前をクイックサー
チエンジン (@ref{Quick Searching} を参照) に加えることもできます。それに
は、以下のコードを @file{~/.emacs-w3m} ファイルに追加して下さい:

@lisp
(eval-after-load "w3m-search"
  '(progn
     (add-to-list 'w3m-search-engine-alist
                  '("My engine"
                    "http://my.searchengine.com/?query=%s"
                    nil))
     (add-to-list 'w3m-search-quick-search-engine-alist
                  '("my" . "My engine"))))
@end lisp

これにより、@uref{my:foobar} のような URL を使って、あなたの検索エンジン
で ``foobar'' という語を検索することができます。
@end enumerate

@node Grouping URLs
@section 一つの URL で複数のウェブページを見る
@cindex Grouping URLs

Emacs-w3m は ``group URLs'' という、複数の実際の URL を一つにまとめた特
別な URL を扱うことができます。そのようなグループ URL を開くと、
emacs-w3m は一度に複数のページを開くために、そのグループに含まれるそれぞ
れの URL に対して一つのバッファを開きます。

グループ URL を作るには、開きたいすべてのページのアドレスを単にアンパサ
ンド記号 (``&'') で一緒にして (すなわち結合して)、グループ URL を表す接
頭辞の ``group:'' を付ければ良いのです。例を挙げると、GNU プロジェクトの
ホームページ @uref{http://www.gnu.org/} と Savannah ホームペー
ジ @uref{http://savannah.nongnu.org/} を見たいものとすれば、グルー
プ URL は次のようなものになるでしょう。

@uref{group:http://www.gnu.org/&http://savannah.nongnu.org/}

この構文を日常的に使うのはかなり辛いものがありますが、非常に短い URL (例
えばクイックサーチ URL、@ref{Quick Searching} を参照) や非対話型で使う状
況では、この機能はおおいに役立つでしょう。

@node Weather Information
@section 明日の天気は晴れでしょう


@node Using Antenna
@section アンテナを張り巡らそう
@cindex Antenna
@cindex Tracking changes in web pages
@cindex about://antenna/

アンテナはウェブページの変化を追跡するための道具です。アンテナを使うと、
特定のページが、以前に見たときから更新されたかされなかったかを、周期的に
チェックすることができます。

いずれかの emacs-w3m バッファで @kbd{A} を使うことによって、アンテナを始
めることができます。あるいは、特別の URL @uref{about://antenna/} に行く
ことによっても同じことができます。

@menu
* Setting up Antenna::          ウェブサイトをアンテナに加えるには?
* Daily web tracking::          アンテナで変化を追跡する
@end menu

@node Setting up Antenna
@subsection ウェブサイトをアンテナに加えるには?
@cindex about://antenna-edit/
@kindex +
@findex w3m-antenna-add-current-url

アンテナは、アンテナ・ページにあるカスタマイズのための ``Edit'' ボタン、
または特別の URL @uref{about://antenna-edit/} からカスタマイズすることが
できます。それはかなり分かりやすいものです。ウェブサイトを加えるには以下
のことを行なって下さい:

@enumerate
@item
例えば ``http://my.website.com/index.html'' のような、監視したいウェブペー
ジの完全な URLを、``Key'' フィールドに追加して下さい。

@item
``Title'' フィールドに、``My website'' のようなタイトルを記入して下さい。

@item
``Time'' フィールドで、``Normal''、``Time'' または ``HNS'' のどれかを選
んで下さい。あなたはたぶん第一候補を望むでしょう。
@end enumerate

すべてのフィールドを満たしたら、``New'' のボタンを押して下さい。すると、
あなたのウェブサイトはアンテナ・データベースに加えられます。追跡したい他
のサイトに対して、同じ操作を繰り返して下さい。

アンテナにウェブサイトを加える他の方法は、そのサイトに行って @kbd{+} キー
を使うことです。すべてのフィールドがすでに書きこまれた、アンテナをカスタ
マイズするためのバッファが現れるでしょう。あなたは単に ``Save for future
sessions'' と ``Finish'' のボタンを押せば良いのです。

@table @kbd
@item +
URL をアンテナ・データベースに加えます。接頭引数付きで呼ばれた場合は、現
在のページを追加するのではなくて、加える URL を尋ねま
す (@code{w3m-antenna-add-current-url})。
@end table

@node Daily web tracking
@subsection アンテナで変化を追跡する
@cindex The Antenna interface
@kindex A
@findex w3m-antenna

アンテナ・ページには二つの項目が現れます。一つは ``Updated'' と呼ばれ、
もう一つは ``Visited'' と呼ばれます。``Updated'' の項目では最後にアンテ
ナを更新した後で変化したウェブサイトが、そして ``Visited'' の項目では変
化しなかったウェブサイトが見つかります。それぞれの項目で、各行はアンテナ・
データベースの一つのウェブサイトを表し、以下の構造になっています:

@samp{  * 2002/12/15 16:43  (T)  My website}

最初の部分は、アンテナが最後にそのページの変化を報告した、そのウェブサイ
トが更新された最終時刻です。またはその情報が得られないこともあります。

@samp{(T)} は ``Time'' を表し、最後にアンテナを更新した後で、そのページ
の変更時刻が変化したので、変化が検出されたことを意味します。もう一つの可
能性がある値は @samp{S} (``Size'' のこと) で、そのページのサイズが変化し
たので、変化が検出されたことを意味します。

行の最後の部分は、データベースに追加したときに与えた、このウェブサイトの
タイトルです。

どうか、アンテナ・データベースは自動的に更新されないことに注意して下さい。
アンテナ・ページで @kbd{R} を叩くか、または接頭引数をコマンドに渡す (例
えば @kbd{C-u A} でアンテナを始める) ことによって、サイトが変化したかど
うかをチェックしたい毎に、それを更新しなければなりません。

@table @kbd
@item A
アンテナのページに行きます。接頭引数付きで呼ばれた場合は、表示する前にア
ンテナ・データベースを更新します (@code{w3m-antenna})。
@end table

@node Showing Directory Tree
@section ディレクトリの木構造を表示する
@cindex Showing the tree structure of local directory

@code{w3m-dtree} コマンドを使うと、ローカルディレクトリのすべてのサブディ
レクトリの木構造を表示して、普通のウェブページのように閲覧することができ
ます。この機能を使ったときに現れる emacs-w3m のバッファは、その名前ゆえ
に外部の ``tree'' プログラムの出力に非常に類似したものになります。さら
にemacs-w3m からのボーナス: このコマンドを接頭引数付きで呼ぶとファイルも
表示し、emacs-w3m は完全装備のファイル閲覧器に変身します。

Emacs-w3m dtree がどんなふうに動作するかの例です:

@example
/home/romain/.elisp/emacs-w3m/
 |-CVS/
 |-attic/
 |  +-CVS/
 |-autom4te.cache/
 |-doc/
 |  |-CVS/
 |  +-emacs-w3m/
 |-icons/
 |  +-CVS/
 |-patches/
 |  +-CVS/
 +-shimbun/
    +-CVS/
@end example

接頭引数を付けると、代わりにこんなふうになります:

@example
/home/romain/.elisp/emacs-w3m/ (allfiles)
 |-(f).cvsignore
 |-(f)BUGS.ja
 |-(f)COPYING
 |-[d]CVS/
 |  |-(f)Entries
 |  |-(f)Repository
 |  +-(f)Root
 |-(f)ChangeLog
 |-(f)ChangeLog.1
 |-(f)FAQ
 |-(f)FAQ.ja
 |-(f)Makefile
 |-(f)Makefile.in
 |-(f)README
 |-(f)README.ja
 |-(f)README.namazu.ja
 |-(f)README.shimbun.ja
 |-(f)TIPS
 |-(f)TIPS.ja
@end example

@table @kbd
@item D
@kindex D
@findex w3m-dtree
ミニバッファでローカルディレクトリの入力を求め、その木構造を表示します。
接頭引数付きで呼ばれると (例: @kbd{C-u D})、そのディレクトリにあるファイ
ルも表示します (@code{w3m-dtree})。
@end table

@node Viewing Perl Documents
@section Perl のドキュメントを見る


@node Using Namazu
@section Namazu でファイルを検索する


@node Octet
@section application/octet-stream データを見る


@node Customizable Variables
@chapter デフォルトのままでも結構良いと思うけれど
@cindex Customizing user options
@vindex w3m-init-file

たくさんの emacs-w3m の変数が、Custom の仕掛けによってカスタマイズするこ
とができます。Custom は変数を定義するための、Emacs のグラフィック・イン
ターフェースです。Custom にはいくつかのカスタマイズのための手段があり、
例えば単一のオプション (すなわち、Emacs Lisp 変数) のための @kbd{M-x
customize-option}、またはある ``group'' (この場合のグループ
は @code{w3m}) に属するすべてのオプション (変数とフェース) を見て、かつ
変更するための @kbd{M-x customize-group} が使えます。

あるいは (もし Custom を使いたくないのであれば)、任意の Emacs Lisp 式
を emacs-w3m 初期設定ファイルに書き込むことができます。デフォルトのファ
イルは @file{~/.emacs-w3m} です。例えば、

@lisp
(setq w3m-home-page "http://emacs-w3m.namazu.org/")
@end lisp

これはデフォルトのホームページを @uref{http://emacs-w3m.namazu.org/} に
設定します。シンタックスは @file{.emacs} ファイルと同じです。
@xref{(emacs)Init File}.

気を付けなければいけないのは、外部モジュールで定義されているいくつかの変
数が @file{~/.emacs-w3m} が読み込まれるときには未定義で、それらを変更で
きないかもしれないことです (もちろん、デフォルトの値を気にしないのであれ
ば、@file{~/.emacs-w3m} で完璧に上書きしてしまうことは可能なのですけれど
ね)。変数 @code{w3m-search-quick-search-engine-alist} は典型的な例で
す (@pxref{Search Variables})。

@table @code
@item w3m-init-file
Emacs-w3m が起動すると、@code{w3m-init-file} ファイルを読み込みます。デ
フォルト値は @file{~/.emacs-w3m} です。たぶん、あなたはこれを変更する必
要は無いでしょう。これは普通の Emacs Lisp ファイルで、
@file{~/.emacs} や @file{site-init} ファイルを emacs-w3m 関係のもので乱
雑にしないようにするために使うことができます。Emacs-w3m はこれと同じ名前
に、拡張子 @file{.elc} と @file{.el} が付いているものも (言い換えれば、
@file{~/.emacs-w3m.elc}、@file{~/.emacs-w3m.el} およ
び @file{~/.emacs-w3m} の順に) 調べます。
@end table

@menu
* General Variables::           一般的な変数
* Image Variables::             画像に関連した変数
* Bookmark Variables::          ブックマークに関連した変数
* Search Variables::            ウェブ検索に関連した変数
* Weather Variables::           天気予報に関連した変数
* Dtree Variables::             dtree に関連した変数
* Antenna Variables::           アンテナに関連した変数
* Perldoc Variables::           Perldoc に関連した変数
* Namazu Variables::            Namazu に関連した変数
* Octet Variables::             Octet に関連した変数
* Other Variables::             その他の変数
@end menu

@node General Variables
@section 一般的な変数


@node Image Variables
@section 画像に関連した変数


@node Bookmark Variables
@section ブックマークに関連した変数


@node Search Variables
@section ウェブ検索に関連した変数


@node Weather Variables
@section 天気予報に関連した変数


@node Dtree Variables
@section dtree に関連した変数


@node Antenna Variables
@section アンテナに関連した変数


@node Perldoc Variables
@section Perldoc に関連した変数


@node Namazu Variables
@section Namazu に関連した変数


@node Octet Variables
@section Octet に関連した変数


@node Other Variables
@section その他の変数


@node Hooking into MUAs
@chapter メール/ニュースリーダーで使う


@menu
* Gnus::                        Gnus で HTML メールを読む
* Mew::                         Mew で HTML メールを読む
* SEMI MUAs::                   SEMI MUA で HTML メールを読む
@end menu

@node Gnus
@section Gnus で HTML メールを読む
@cindex Reading HTML mails in Gnus
@vindex mm-inline-text-html-with-images
@vindex mm-inline-text-html-with-w3m-keymap
@vindex mm-text-html-renderer
@vindex w3m-minor-mode
@vindex w3m-minor-mode-command-alist

Gnus (Emacs のニューズリーダー) が emacs-w3m をサポートしているって、知っ
ていましたか?  実際には Emacs に同梱されている (または XEmacs パッケージ
の) Gnus は、(今はまだ) emacs-w3m をサポートしていません。@samp{Oort
Gnus} として知られている開発版の Gnus を使うのが良いでしょう。それは以下
の場所で手に入ります:

@uref{ftp://ftp.gnus.org/pub/gnus/ognus.tar.gz}

ご注意: あなたの Emacs に付属している Gnus のバージョンで emacs-w3m がサ
ポートされているとしたら、この説明書が古い、または非常に古いバージョン
の emacs-w3m を使っている、のどちらかを意味します。前者であれ
ば @ref{Mailing List} を参照して、このバグを知らせて下さい。後者の場合に
は、もっと新しいバージョンに更新するべきです。

@itemize @bullet
@item
Emacs-w3m で何ができるの?

HTML の spam メールを、emacs-w3m を使って人間が読めるように変換すること
ができます。もちろん HTML の ham メール (spam ではないメール) に対しても
働き、どちらの場合でも Emacs-w3m はデフォルトの変換器よりもたぶん速いで
しょう。追加の操作は必要ありません。それは単に表示されます。

記事バッファの HTML の部分では @code{w3m-minor-mode} が on になって、
emacs-w3m のと同じ主要なキーを使うことができます。例えば @key{RET} は、
現在位置のリンクが指し示すページに行きます。それらのキーは変
数 @code{w3m-minor-mode-command-alist} で定義されています。保安上の理由
から、いくつかのコマンドはそれに似た別のコマンドで置き換えられていること
を心に留めておいて下さい (下記参照)。

@item
何をしなければいけないの?

Gnus のマニュアルを読んで下さい (@pxref{(emacs-mime)Display
Customization})。最も簡単な方法は、以下の行を @file{~/.gnus.el} ファイル
に入れることです:

@lisp
(setq mm-text-html-renderer 'w3m)
@end lisp

記事バッファで emacs-w3m のキーを使う必要が無いならば、以下の行も追加し
て下さい:

@lisp
(setq mm-inline-text-html-with-w3m-keymap nil)
@end lisp

@item
ご注意

前に spam と ham のことを書いたのはふざけているわけではなくて、あなたの
注意を喚起するためにまさにここにあるのです。HTML メールに
は @samp{<img>} タグを使った spammers (spam をばらまくやから) の悪巧みが
含まれているかもしれません。それは @samp{Click Here!} ボタンよりはるかに
有害です。最もありそうなのは、そんなたちの悪い spam があなたの目に止まっ
たかどうかの確認が意図されていることです。それは、画像を表示するときに自
動的に取得しに行くであろう URL に、識別文字列を埋め込むことによって行な
われます。デフォルトでは変
数 @code{mm-inline-text-html-with-images} が @code{nil} であって、
Gnus が勝手に spammer のサイトに接続することはありません。

@code{mm-inline-text-html-with-images} を @code{t} にすれば、記事バッファ
にインライン画像を表示することができますよね?  いいえ、断じて違います。
あなたはまだ守られているのです。あなたのメールアドレスが到達可能だという
事実が漏れることを気にしないのであれば、変
数 @code{mm-w3m-safe-url-regexp} を @code{nil} にして下さい。
@code{mm-w3m-safe-url-regexp} のデフォルト値は @samp{"\\`cid:"} で、これ
は私たちが @samp{cid:} URL によってメールに含まれている画像が安全だと考
えていることを意味します (すなわち、@code{mm-w3m-safe-url-regexp} を変更
しなくても、そのような画像は表示することができます)。
@end itemize

@node Mew
@section Mew で HTML メールを読む


@node SEMI MUAs
@section SEMI MUA で HTML メールを読む


@node Frequently Asked Questions
@chapter 必ず答があるとは限らない


@node Known Problems
@chapter あなたならきっと解決できる


@node Shimbun Library
@chapter ウェブ上の新聞を読むための道具
@cindex Shimbun library

新聞は ``she-n-boon'' のように聞こえます。実際にはどの母音も伸ばしてはい
けません。それは厳密に newspaper のことです (日本語版にこんなことを書い
ても意味無いですね)。@samp{Shimbun} ライブラリは様々なモジュールのコレク
ションで、各々は単独では何もすることができません。ここでは代表的な三つ
の @samp{shimbun} のアプリケーションプログラム (それらのうちの二つ
は @samp{shimbun} ライブラリに含まれています) と、あなたが自分
で @samp{shimbun} モジュールを作る方法について説明します (Emacs Lisp プ
ログラムを書くことができる必要があります)。それら三つのアプリケーション
プログラムはすべて、世界中のウェブサイトから新しい情報 (それらは時々刻々
と更新されている) を取って来て、あたかもメールメッセージを日頃読んでいる
かのようにそれらを読むことを可能にします。

@menu
* Nnshimbun::                   Gnus をウェブブラウザにする!
* Mew Shimbun::                 Mew で新聞を読む
* Shimbun with Wanderlust::     Wanderlust で新聞を読む
* Shimbun Basics::              新聞モジュールの作り方
@end menu

@node Nnshimbun
@section Gnus をウェブブラウザにする!


@node Mew Shimbun
@section Mew で新聞を読む


@node Shimbun with Wanderlust
@section Wanderlust で新聞を読む


@node Shimbun Basics
@section 新聞モジュールの作り方


@node Mailing List
@chapter メーリングリスト、バグリポート
@cindex Subscribing to the emacs-w3m mailing list
@cindex Reporting bugs


@node Emacs-w3m Functions
@chapter Emacs-w3m の関数の詳しい説明
@cindex Functions details


@node Index
@unnumbered 索引

@menu
* Concept Index::               概念索引
* Key Index::                   キーバインド索引
* Variable Index::              変数索引
* Function Index::              関数索引
@end menu

@node Concept Index
@unnumberedsec 概念索引
@printindex cp

@node Key Index
@unnumberedsec キーバインド索引
@printindex ky

@node Variable Index
@unnumberedsec 変数索引
@printindex vr

@node Function Index
@unnumberedsec 関数索引
@printindex fn

@summarycontents
@contents
@bye

@c Local Variables:
@c fill-column: 72
@c End:
