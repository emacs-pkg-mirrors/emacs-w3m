\input texinfo @c -*-texinfo -*-
@c %**start of header
@setfilename emacs-w3m.info
@settitle Emacs-w3m -- an Emacs interface to w3m --
@c %**end of header
@documentlanguage en
@include version.texi
@synindex pg cp
@finalout

@dircategory GNU Emacs Lisp
@direntry
* Emacs-w3m: (emacs-w3m).  An Emacs interface to w3m
@end direntry

@c permissions text appears in an Info file before the first node.
@ifinfo
This file documents emacs-w3m, an Emacs interface to w3m.

Copyright @copyright{} 2000, 2001, 2002 @w{TSUCHIYA Masatoshi}.

This edition is for emacs-w3m version @value{VERSION}.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU
Manual'', and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License'' in the Emacs manual.

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.

@end ifinfo

@titlepage
@sp 10
@title Emacs-w3m User's Manual
@subtitle An Emacs interface to w3m for emacs-w3m version @value{VERSION}
@author The emacs-w3m development team
@page

@vskip 0pt plus 1filll
Copyright @copyright{} 2000, 2001, 2002 @w{TSUCHIYA Masatoshi}.

This manual corresponds to emacs-w3m version @value{VERSION}.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU
Manual'', and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License'' in the Emacs manual.

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.

@end titlepage

@ifnottex
@node Top
@top Emacs-w3m User's Manual

@flushright
The emacs-w3m development team
@end flushright

This manual corresponds to emacs-w3m version @value{VERSION}.

@end ifnottex

@menu
* Introduction::                Preliminary remarks
* Getting Started::             It's so easy to begin to use emacs-w3m
* Basic Usage::                 Basic usage
* Pretty Good Features::        Pretty good features
* Customizable Options::        Customizable options
* Hooking into MUAs::           Hooking emacs-w3m into mail/newsreaders
* Frequently Asked Questions::  There isn't always an answer
* Known Problems::              You can surely solve it
* Shimbun Library::             A tool for reading a web newspaper
* Mailing List::                Mailing list and submitting bug reports
* Emacs-w3m Functions::         Details of some emacs-w3m functions
* Index::                       Index

@detailmenu
 --- The Detailed Node Listing ---

Getting Started

* Required Emacs Version::      What version of Emacs can be used?
* You Need w3m::                Using w3m: the reason why emacs-w3m is fast
* Other Requirements::          Things required to run emacs-w3m
* Installing Emacs-w3m::        Installing emacs-w3m
* Non-UNIX-like systems::       Installing on non-UNIX-like systems
* Minimal Settings::            Minimal settings to run emacs-w3m

Basic Usage

* Browsing Web Pages::          Let's go netsurfing!
* Inline Images::               Toggle displaying inline images
* Tracing History::             Looking back at the old pages
* Managing Bookmarks::          That's a favorite with me!
* Using Tabs::                  This is the tab browser of fashion
* Selecting Buffers::           Choosing one from many sessions
* Downloading::                 Downloading a file
* Submitting Forms::            Filling in HTML forms

Pretty Good Features

* Using Search Engines::        A convenient way to search the web
* Grouping URLs::               Visiting several web pages in one URL
* Weather Information::         It will be fine tomorrow
* Using Antenna::               Raise your antenna
* Showing Directory Tree::      Showing the tree structure of local directory
* Viewing Perl Documents::      Viewing Perl Documents
* Using Namazu::                Searching files with Namazu
* Octet::                       Viewing data in various octal form

Customizable Options

* General Options::             General options
* Image Options::               Options related to images
* Bookmark Options::            Options related to bookmarks
* Search Options::              Options related to searching the web
* Weather Options::             Options related to weather information
* Dtree Options::               Options related to the dtree feature
* Antenna Options::             Options related to antenna
* Perldoc Options::             Options related to perldoc
* Namazu Options::              Options related to namazu
* Octet Options::               Options related to the octet feature
* Other Options::               Other options

Hooking into MUAs

* Gnus::                        Reading HTML mails in Gnus
* Mew::                         Reading HTML mails in Mew
* SEMI MUAs::                   Reading HTML mails in SEMI MUAs

Frequently Asked Questions

Known Problems

Shimbun Library

Mailing List

Emacs-w3m Functions

@end detailmenu
@end menu

@node Introduction
@chapter Preliminary remarks
@cindex Introduction

Our special thanks go to Akinori ITO and the w3m team for the excellent
w3m program.  We would also like to thank everybody who has submitted
comments, suggestions, and bug fixes.  Even though we're not aware of
any problems, all responsibility for this program is ours (the emacs-w3m
development team), but there is absolutely no warranty.  The emacs-w3m
program was first created by TSUCHIYA Masatoshi in June 2000.

See also the emacs-w3m official page: @uref{http://emacs-w3m.namazu.org/}

@node Getting Started
@chapter It's so easy to begin to use emacs-w3m
@cindex Getting started
@cindex Starting up

Emacs-w3m may have already been installed on your system, in which case
you can skip this section and begin to use the program at once.  If
you're not that lucky, read on to learn how to install emacs-w3m.

@menu
* Required Emacs Version::      What version of Emacs can be used?
* You Need w3m::                Using w3m: the reason why emacs-w3m is fast
* Other Requirements::          Things required to run emacs-w3m
* Installing Emacs-w3m::        Installing emacs-w3m
* Non-UNIX-like systems::       Installing on non-UNIX-like systems
* Minimal Settings::            Minimal settings to run emacs-w3m
@end menu

@node Required Emacs Version
@section What version of Emacs can be used?
@cindex Possible Emacs versions

You can run emacs-w3m in various versions of Emacsen listed below:

@table @samp

@item Emacs 21.x
No additional package is required.

@item XEmacs 21.x
The APEL package and the @samp{gifsicle} program are required
(@pxref{Other Requirements}).  We recommend using the most recent XEmacs
21.4 since that version of XEmacs seems to be most stable.

@item Emacs 20.x
No additional package is required.  Furthermore, you can see monochrome
bitmap images inline by using the BITMAP-MULE package (@pxref{Other
Requirements}).

@item Emacs 19.34 (including Mule 2.3)
The APEL package, the @samp{new custom} package and the
@file{regexp-opt.el} module are required.  If you are using Mule 2.3
based on Emacs 19.34, you can see monochrome bitmap images inline by
using the BITMAP-MULE package (@pxref{Other Requirements}).

@end table

@node You Need w3m
@section Using w3m: the reason why emacs-w3m is fast
@cindex w3m

Emacs-w3m uses the external w3m program as a back-end to retrieve web
contents and as a HTML rendering engine; that's how we could create an
accelerated Emacs web browser with asynchronous operation.

You must install the latest w3m, it is available at:

@uref{http://prdownloads.sourceforge.net/w3m/}

@node Other Requirements
@section Things required to run emacs-w3m
@cindex APEL package
@cindex Gifsicle program
@cindex ImageMagick package
@cindex BITMAP-MULE package
@cindex New custom
@cindex regexp-opt.el
@cindex FLIM package

Depending on the version of Emacs, third party packages are required.
This section provides resources to help you find and install them.

@table @samp

@item APEL
Indispensable to XEmacs, Emacs 19.34 or Mule 2.3.  You should install
APEL before building emacs-w3m.  APEL is available at:

@uref{ftp://ftp.m17n.org/pub/mule/apel/apel-10.4.tar.gz}

If you are using XEmacs and already have the APEL XEmacs package
installed, we strongly recommend replacing it with APEL which is
linked above.  To replace it, use the directives like shown below:

@example
# rm -fr /usr/local/lib/xemacs/xemacs-packages/lisp/apel
# cd apel-10.4
# make install-package XEMACS=xemacs-21.4.x\
  PACKAGEDIR=/usr/local/lib/xemacs/xemacs-packages
@end example

@item gifsicle
Indispensable to XEmacs.  There is a known bug in all XEmacs 21.x series
that won't let it display optimized animated gifs correctly or may make
it crash when some kind of an interlaced gif image is displayed.
Emacs-w3m uses the @samp{gifsicle} program to convert gif data in order
to make it possible to be handled by XEmacs 21.x.  It is available at:

@uref{http://www.lcdf.org/gifsicle/}

@item ImageMagick
If the @samp{convert} program bundled with the ImageMagick package is
available in your system, emacs-w3m will use it for resizing images or
converting a @samp{favicon} image into a certain format which Emacs can
handle.  Emacs-w3m works without ImageMagick, but it will improve the
appearance of web pages.  You can get the ImageMagick package from:

@uref{ftp://ftp.imagemagick.org/pub/ImageMagick/}

We have roughly checked that the ImageMagick version 5.4.0-5 and later
can be used for manipulating @samp{favicon} images.

@item BITMAP-MULE
Used to display monochrome bitmap images inline in Emacs 20.x or Mule
2.3 based on Emacs 19.34.  It isn't necessary if you aren't interested
in images.  It is available at:

@uref{ftp://ftp.jpl.org/pub/elisp/bitmap/}

@item new custom
Indispensable to Emacs 19.34 (including Mule 2.3).  The @samp{custom}
library bundled with Emacs 19.34 is too @emph{old}, its API is
incompatible with the @samp{new custom} bundled with recent Emacsen.
The @samp{new custom} for Emacs 19.34 is available at:

@uref{ftp://ftp.dina.kvl.dk/pub/Staff/Per.Abrahamsen/custom/custom-1.9962.tar.gz}

Note that Mule 2.3 users should slightly modify it by applying the
following patch:

@example
----8<------8<------8<------8<------8<------8<------8<------8<----
--- custom-1.9962/cus-face.el~	Wed Mar  4 19:52:39 1998
+++ custom-1.9962/cus-face.el	Mon Mar  9 08:05:33 1998
@@ -96,7 +96,7 @@
       "Define a new FACE on all frames, ignoring X resources."
       (interactive "SMake face: ")
       (or (internal-find-face name)
-	  (let ((face (make-vector 8 nil)))
+	  (let ((face (make-vector face-vector-length nil)))
 	    (aset face 0 'face)
 	    (aset face 1 name)
 	    (let* ((frames (frame-list))
----8<------8<------8<------8<------8<------8<------8<------8<----
@end example

@item regexp-opt.el
Indispensable to Emacs 19.34 (including Mule 2.3).  The file
@file{regexp-opt.el} is included in the @file{attic/} directory of the
emacs-w3m distribution.  You may simply copy it somewhere (e.g.
@file{site-lisp/} directory) and perform byte-compilation as follows:

@example
# cp -p attic/regexp-opt.el /usr/local/share/emacs/19.34/site-lisp
# cd /usr/local/share/emacs/19.34/site-lisp
# emacs -batch -q -no-site-file -f batch-byte-compile regexp-opt.el
@end example

@item FLIM
The FLIM package is required to use the shimbun library.  The shimbun
library is a collection of tools for reading a web newspaper, you can
use it with Gnus, Mew, Nana-gnus, T-gnus, Wanderlust, etc.
@xref{Shimbun Library}.

Note that the FLIM package requires the APEL package even if you are
using Emacs 20.x or Emacs 21.x.  Therefore, you must install both APEL
and FLIM if you would like to use the shimbun library.  The FLIM package
is available at:

@uref{ftp://ftp.m17n.org/pub/mule/flim/flim-1.14/}

@end table

@node Installing Emacs-w3m
@section Installing emacs-w3m
@cindex Installing emacs-w3m

See the official page @uref{http://emacs-w3m.namazu.org/} for
instructions on how to get the latest emacs-w3m.  Is everything ready?
Now, let's begin.

In order to install emacs-w3m on non-UNIX-like systems (or any system
lacking the ability to execute the @samp{configure} script or has no
@samp{make} command), skip this section and go to the next section
@xref{Non-UNIX-like systems}.

@enumerate
@item
First, extract a tarball of the emacs-w3m distribution and enter the top
directory as follows:

@example
% tar zxf emacs-w3m-@value{VERSION}.tar.gz
% cd emacs-w3m-@value{VERSION}
@end example

If you've checked out emacs-w3m from CVS, you have to run
@samp{autoconf} with no argument to generate the @samp{configure}
script.

@item
Run @samp{configure} script.

@example
% ./configure
@end example

If you've installed APEL, FLIM or something in non-standard directories
other than the default @code{load-path}, you must specify them using the
@samp{--with-addpath} option as follows:

@example
% ./configure --with-addpath=/opt/share/apel:/opt/share/flim
@end example

@item
Just run @samp{make} and @samp{make install}.  See also the next step if
you are using XEmacs.

@example
% make
% make install
@end example

All Lisp and info files will be installed in the appropriate
directories.  Now, how do you know what files will go where?  To know it
beforehand, use this:

@example
% make what-where
@end example

If you are using Emacs 21 or XEmacs, you had better install icon image
files.  To do this:

@example
% make install-icons
@end example

@item
You can also install emacs-w3m as an XEmacs package using @samp{make
install-package} instead of @samp{make install} as follows:

@example
% make
% make install-package
@end example

In this case, you don't have to execute @samp{make install-icons}.

If you need to specify the package directory, there are two ways to do
that:

@itemize @bullet

@item
Use the @samp{configure} option @samp{--with-packagedir=}.  For example:

@example
% ./configure --with-packagedir=/opt/xemacs/xemacs-packages
% make what-where
% make
% make install-package
@end example

@item
Use the variable @samp{PACKAGEDIR}.  For example:

@example
% ./configure
% make what-where PACKAGEDIR=/opt/xemacs/xemacs-packages
% make
% make install-package PACKAGEDIR=/opt/xemacs/xemacs-packages
@end example

@end itemize

@end enumerate

@node Non-UNIX-like systems
@section Installing on non-UNIX-like systems
@cindex Installing on non-UNIX-like systems

If you cannot execute the @samp{configure} script on your system, or if
no @samp{make} command is available, cast the following spell:

@example
% emacs -batch -q -no-site-file -l w3mhack.el NONE -f w3mhack-nonunix-install
@end example

If APEL, FLIM (or any other library) aren't installed in the ordinary
places, the installer will leave them out.  In such a case, it is
necessary to tell those places to the installer as shown below:

@example
% emacs -batch -q -no-site-file -l w3mhack.el //c/share/apel://c/share/flim -f w3mhack-nonunix-install
@end example

@node Minimal Settings
@section Minimal settings to run emacs-w3m

There are only fundamental items in this section.  Many options which
can be customized by user's preferences are described in
@xref{Customizable Options}.

@table @samp

@item Autoloads
@cindex Adding autoload settings

You never need to set the autoload definitions if you've emacs-w3m
installed as an XEmacs package (@pxref{Installing Emacs-w3m}) because of
the @file{w3m/auto-autoloads.el} file.  If not, put the following line
in your @file{~/.emacs} file:

@lisp
(autoload 'w3m "w3m"
  "Visit the WWW page using w3m" t)
@end lisp

In addition to this, put the following setups if needed:

@lisp
(autoload 'w3m-find-file "w3m"
  "Find a local file using emacs-w3m." t)
(autoload 'w3m-browse-url "w3m"
  "Ask emacs-w3m to show a url." t)
(autoload 'w3m-antenna "w3m-antenna"
  "Report changes of web sites." t)
(autoload 'w3m-bookmark-view "w3m-bookmark"
  "Show bookmarks." t)
(autoload 'w3m-dtree "w3m-dtree"
  "Display a directory tree." t)
(autoload 'w3m-namazu "w3m-namazu"
  "Search files with Namazu." t)
(autoload 'w3m-perldoc "w3m-perldoc"
  "View Perl documents" t)
(autoload 'w3m-search "w3m-search"
  "Search words using emacs-w3m." t)
(autoload 'w3m-weather "w3m-weather"
  "Display a weather report." t)
@end lisp

@item Startup File
@cindex Startup file
@vindex w3m-init-file

We recommend using the file @file{~/.emacs-w3m} (which is the default
value of @code{w3m-init-file}) when you twiddle some options of
emacs-w3m.  This file is similar to @file{~/.emacs}, but is read when
emacs-w3m starts.  However, note that there are setups of the exception
which cannot write there, for example, the autoload definitions as
mentioned above.

@item Proxy Gateway
@cindex Firewall
@cindex Proxy gateways
@cindex Proxy servers
@vindex w3m-command-arguments
@vindex w3m-no-proxy-domains

If you are behind a firewall and only have access to foreign web sites
through the proxy gateway, you need to instruct w3m to use the proxy
gateway.

There are some ways to do this, one is to set the environment variable
@code{http_proxy} globally in the shell something like:

@example
setenv http_proxy http://proxy.hogege.com:8000/
@end example

Another way is to customize the option @code{w3m-command-arguments} to
add the options @samp{-o} and
@samp{http_proxy=http://PROXY_SERVER_NAME:PORT/}.

This can also be done in your @file{~/.emacs-w3m} file as shown below:

@lisp
(setq w3m-command-arguments
      (nconc w3m-command-arguments
             '("-o" "http_proxy=http://proxy.hogege.com:8000/")))
@end lisp

To specify @code{no-proxy} hosts that not to use proxy gateways to
connect to, you can set the environment variable @code{no_proxy} with
the comma separated host names, or set the option
@code{w3m-no-proxy-domains} with a list of domain names (not host names)
as follows:

@lisp
(setq w3m-no-proxy-domains '("local.com" "neighbor.com"))
@end lisp

See also the documentation for the option
@code{w3m-command-arguments-alist} to use regexps to specify the
@code{no-proxy} hosts.

@end table

@node Basic Usage
@chapter Basic usage


@menu
* Browsing Web Pages::          Let's go netsurfing!
* Inline Images::               Toggle displaying inline images
* Tracing History::             Looking back at the old pages
* Managing Bookmarks::          That's a favorite with me!
* Using Tabs::                  This is the tab browser of fashion
* Selecting Buffers::           Choosing one from many sessions
* Downloading::                 Downloading a file
* Submitting Forms::            Filling in HTML forms
@end menu

@node Browsing Web Pages
@section Let's go netsurfing!


@menu
* Elementary operations::       The first steps of operations
@end menu

@node Elementary operations
@subsection The first steps of operations
@findex w3m
@findex w3m-browse-url
@findex w3m-find-file
@vindex w3m-home-page
@vindex w3m-quick-start
@findex w3m-view-this-url
@findex w3m-goto-url
@findex w3m-reload-this-page

There are three commands which can invoke emacs-w3m.  When you use one
of those commands, a web page will be displayed in an emacs-w3m buffer
which has the name ``*w3m*''.  The major mode for an emacs-w3m buffer
will be made into @code{w3m-mode}.

This section explains only the most fundamental usage of the commands.
@xref{Emacs-w3m Functions}, for more information on each command.  And
see @ref{Customizable Options} for details on user options.

@table @code

@item w3m
@findex w3m
@vindex w3m-home-page
@vindex w3m-quick-start
@cindex Using emacs-w3m as a batch command

Start emacs-w3m.  At that time, the homepage specified as the option
@code{w3m-home-page} is displayed.  The default value for
@code{w3m-home-page} is ``about:''.  Set the option
@code{w3m-quick-start} to @code{nil} if each time you want to specify
URL.

You can also use this as an Emacs' batch command.  Here's an example:

@example
% emacs -f w3m
@end example

To specify a URL, say like this:

@example
% emacs -f w3m http://emacs-w3m.namazu.org/
@end example

@item w3m-find-file
@findex w3m-find-file

Specify a local file which you want to browse and start emacs-w3m.

@item w3m-browse-url
@findex w3m-browse-url

Specify a URL which you want to visit and start emacs-w3m.  You will be
prompted for a URL in the minibuffer.  This command is provided, if
anything, in order to start emacs-w3m from other application programs.

@end table

Looking around in a web page being displayed in an emacs-w3m buffer
wouldn't be pains to you making a habitual use of Emacs.  In an
emacs-w3m buffer, you can use many of the standard command keys, for
instance, @kbd{C-n}, @kbd{C-v} and @kbd{C-s}, which Emacs has bound.

Use the @key{RET} key for following a link.  You can make emacs-w3m
display a page which a link points to by typing @key{RET} key after
moving point to the position of a link.  Links in a web page will be
displayed with a different color from an ordinary text or underline
which is specified by the face @code{w3m-anchor-face} (see
@pxref{Customizable Options}).

@table @key

@item RET @code{(lynx, info)}
@itemx M-x w3m-view-this-url
@kindex RET
@findex w3m-view-this-url

Display a page which a link in the current position points to.

The behavior of this command will be altered variously by a property of
a link under point or a prefix argument which you may specify.  See
@ref{Emacs-w3m Functions} for details.

@end table

This section explained to you as mentioned above that you can specify a
URL when you type the command @kbd{M-x w3m} to display a certain page by
setting the option @code{w3m-quick-start} to @code{nil}.  In addition,
in an emacs-w3m buffer, there also be two popular ways to specify a URL
when displaying a page.

@table @key
@item RET @code{(lynx, info)}
@itemx M-x w3m-view-this-url
@kindex RET
@findex w3m-view-this-url

In an emacs-w3m buffer, you can specify a URL in the minibuffer and make
emacs-w3m display the corresponding page by typing the @key{RET} key
after moving point to a URL which displayed in the @samp{header-line}.
This feature would make you feel familiarity if you are experienced with
GUI-based web browsers like Mozilla.  More detailed explanation about
this command is mentioned in @xref{Emacs-w3m Functions}.

@item g @code{(lynx, info)}
@itemx M-x w3m-goto-url
@findex w3m-goto-url

You can specify a URL in the minibuffer and display the corresponding
page by typing the @key{g} key unrelated to the current position in an
emacs-w3m buffer.  This feature may impress you familiarity if you are
using Gnus or Mew.

@item c @code{lynx}
@itemx M-x w3m-print-this-url
@kindex c
@findex w3m-print-this-url

Display a URL of the page being displayed in the echo area and put it
into @code{kill-ring} (that is, you can yank it in the other place
later).

@item u @code{lynx}
@itemx y @code{info}
@itemx M-x w3m-print-this-url
@kindex u
@kindex y
@findex w3m-print-this-url

Display a URL under point in the echo area and put it into
@code{kill-ring} (that is, you can yank it in the other place later).

@end table

If the page which you are reading is the news of the day or someone's
diary, it may have been updated with contents new now.  You can fetch
the newest contents of the same page by using the following command.
Even if the displayed page seems to have been broken, you may be able to
get the right display with this command.

@table @key

@item R @code{(lynx, info)}
@itemx M-x w3m-reload-this-page
@findex w3m-reload-this-page

Reload the page which is currently displayed.

@end table


@node Inline Images
@section Toggle displaying inline images


@node Tracing History
@section Looking back at the old pages


@node Managing Bookmarks
@section That's a favorite with me!
@cindex Bookmarks

Like all modern browsers, emacs-w3m has advanced features related to
bookmarks: it lets you classify them in categories, edit them and of
course, browse them easily.

@menu
* Adding Bookmarks::            Adding a URL to your favorites
* Consulting Bookmarks::        Browse your bookmarks
* Editing Bookmarks::           How to change your bookmarks
@end menu

@node Adding Bookmarks
@subsection Adding a URL to your favorites
@cindex Adding a bookmark
@kindex a
@kindex C-u a
@findex w3m-bookmark-add-current-url
@kindex M-a
@findex w3m-bookmark-add-this-url

There are several ways to add a URL to your bookmarks.  The first one is
to use the @kbd{a} key (or call the @code{w3m-bookmark-add-current-url}
command) to add the page you're currently browsing: it will prompt you
for a section to where the bookmark should go (completion is available
with the @key{TAB} key) and will let you edit the title of the bookmark
(the default being the title of the current page).  Complete these two
steps, validating each with @kbd{RET}, and you will see the message
``Added'' in the minibuffer, which means (surprise!) that the page has
been added to your bookmarks.

Another way to add a bookmark is to use the @kbd{M-a} key (or call the
@code{w3m-bookmark-add-this-url} command): it adds the URL under point
(that means, the URL you would be taken to if you followed the link) to
the bookmarks.  As before, you will have to input the section for this
bookmark and its title, the default being this time the name of the
link itself.

The third and final way to do this is to use @kbd{C-u a}, this time you
will be prompted for the URL to add, its section, and the title to use
for it in the bookmarks.

@table @kbd
@item a
Add the current page to the bookmarks, or if called with a prefix
argument, prompt for a URL and add it
(@code{w3m-bookmark-add-current-url}).

@item M-a
Add the URL under point to the bookmarks
(@code{w3m-bookmark-add-this-url}).
@end table

@node Consulting Bookmarks
@subsection Browse your bookmarks
@cindex Consulting bookmarks
@kindex v
@findex w3m-bookmark-view

The easiest way to see the bookmarks is to use the @kbd{v} key in an
emacs-w3m buffer; another possibility is to go to the special URL
@uref{about://bookmark/}.  You will see your bookmarks, organized by
section, each line being one bookmark.  You can browse them exactly
like you would browse any other page.

On the bookmarks page a w3m minor mode is activated, the bookmark mode.
It adds key bindings to edit the bookmarks. @xref{Editing Bookmarks}.

@table @kbd
@item v
Visit the bookmarks page (@code{w3m-bookmark-view}).
@end table

@node Editing Bookmarks
@subsection How to change your bookmarks
@cindex Editing bookmarks
@findex w3m-bookmark-kill-entry
@findex w3m-bookmark-edit
@findex w3m-bookmark-undo

The bookmark minor mode (@pxref{Consulting Bookmarks}) offers several
key bindings related to bookmark edition, most noticeably @kbd{C-k} to
kill (i.e. delete) a bookmark, and @kbd{E} to edit the bookmark file.

Bookmarks are kept in a HTML file, so you can edit the file by hand, but
be very careful: if you erase the comments emacs-w3m needs to recognize
section names, things can break easily.  If you know the basics of HTML,
the file should otherwise be quite self-explanatory.

@table @kbd
@item C-k
Kill the bookmark under point (@code{w3m-bookmark-kill-entry}).

@item E
Visit the bookmarks file (@code{w3m-bookmark-edit}).

@item C-_
Undo the last changes (@code{w3m-bookmark-undo}).
@end table

@node Using Tabs
@section This is the tab browser of fashion


@node Selecting Buffers
@section Choosing one from many sessions


@node Downloading
@section Downloading a file


@node Submitting Forms
@section Filling in HTML forms

These emacs-w3m commands let you move between forms and fill in fields,
using simple key bindings and optionally prompting you for values in
Emacs windows or in the minibuffer.

The main key binding to remember is @kbd{RET}.  It has different
meanings, depending on the thing under point: for textareas, you will be
prompted for a value in the minibuffer.  For select tags, you will be
given a list of choices in an electric Emacs window (you can move using
the arrow keys, and pick one with the @kbd{RET} key).  For radio and
checkbox buttons, the @kbd{RET} key selects one of the elements.

When in the minibuffer or in the electric window, you can cancel with
the @kbd{C-c C-q} sequence.  To submit the form, use @kbd{C-c C-c}.

@table @kbd
@item ]
Jump to the next form (@code{w3m-next-form}).

@item [
Jump to the previous form (@code{w3m-previous-form}).

@item C-c C-c
Submit form at point (@code{w3m-submit-form}).

@item RET
Edit the value of the form item under point.

@item RET @r{(w3m-form-*-keymap)}
Accept the value.

@item C-c C-q @r{(w3m-form-*-keymap)}
Quit editing the form item, leaving changes.
@end table

@node Pretty Good Features
@chapter Pretty good features


@menu
* Using Search Engines::        Convenient ways to search the web
* Grouping URLs::               Visiting several web pages in one URL
* Weather Information::         It will be fine tomorrow
* Using Antenna::               Raise your antenna
* Showing Directory Tree::      Showing the tree structure of local directory
* Viewing Perl Documents::      Viewing Perl Documents
* Using Namazu::                Searching files with Namazu
* Octet::                       Viewing data in various octal form
@end menu

@node Using Search Engines
@section Convenient ways to search the web
@cindex Search engines

Emacs-w3m comes with advanced features related to search engines, they
are accessible through two interfaces:

@itemize
@item
The regular interface, invoked by the @kbd{S} key in any emacs-w3m
buffer.  It is a simple interactive way to choose which search engine to
use and input a search term; see @ref{The Search Interface}.

@item
The Quicksearch interface: it is a faster (yet more complicated) way to
use search engines, by going to specially crafted URLs.  For more
information about this feature, see @ref{Quick Searching}.
@end itemize

@menu
* The Search Interface::        How to search with emacs-w3m
* Quick Searching::             An alternative (and fast) way to search the web
* Adding New Search Engines::   Using your favorite engines
@end menu

@node The Search Interface
@subsection How to search with emacs-w3m
@cindex Searching
@kindex S
@findex w3m-search
@vindex w3m-search-default-engine

You can fire up the regular search interface by using the @kbd{S} key in
an emacs-w3m buffer (provided you use the default keymap).  You will see
a prompt in the minibuffer, asking for a search term.  Type one or
several words at the prompt, then hit @kbd{RET}.  The result page of
your search in the engine appears, you can then browse the results, just
as if you had used the normal web based entry point to the engine.

You probably noticed that you have not been given a chance to choose
which engine you want to search with.  By default, emacs-w3m will use
the Google search engine, you can change this behavior by customizing
the @code{w3m-search-default-engine} variable (see @ref{Customizable
Options}), or you can specify the search engine each time you use the
command.

To specify which engine to use, you have to give the command a prefix
argument (usually, this means hitting @kbd{C-u} before the command,
e.g. @kbd{C-u S}).  Emacs-w3m will prompt you for an engine, you can
choose one by typing its name (completion is also available with the
@key{TAB} key).  Once you have made your choice, hit the @kbd{RET} key.
You can then type your search term, hit @kbd{RET}, and you will see the
search results.

@table @kbd
@item S
Begin a new search.  If called with a prefix argument, prompt for the
engine to use (@code{w3m-search}).
@end table

@node Quick Searching
@subsection An alternative (and fast) way to search the web
@cindex Quick Searching
@cindex Special URLs
@vindex w3m-search-quick-search-engine-alist
@vindex w3m-search-engine-alist
@vindex w3m-default-coding-system

If you're a ``Web Power User'' (and since you're reading this, you
probably are), you need a quick and efficient way to perform searches.
The Quick Searching feature is one.

What does it do?  It lets you launch web searches by simply going to a
special URL such as @uref{gg:emacs}.  The advantages of this mode of
operation are:

@itemize
@item
It's fast.  You just have to type a URL to choose the engine and the
search word(s), in one go.

@item
It's convenient.  With this feature, you can easily open a new emacs-w3m
tab or window, and launch a search in it, using for example, the @kbd{G}
key to open a URL in a new window, and going to a Quicksearch URL.  You
can also bookmark searches just by bookmarking the special Quicksearch
URL.

@item
It works with the grouping feature.  You can launch two searches at the
same time, with a URL like @uref{group:gg:emacs&ya:w3m}.  This would
for instance launch a search for ``emacs'' on Google and for ``w3m'' on
Yahoo!.  @xref{Grouping URLs}.
@end itemize

Using it is very simple: suppose you want to search for the word ``gnu''
on Google.  Hit @kbd{g} to go to a new URL, and type ``gg:gnu''.  The
first part of this expression, ``gg'' indicates that we want to use the
Google search engine.  The second term is the word we will be searching
for.  The prefix and the search term must be separated by a colon.  Hit
@kbd{RET}, and you will see the results of your search.  Please note
that you can input several words by separating them with spaces (to
type a space in the minibuffer, hit @kbd{C-q} first, e.g. @kbd{C-q
@key{SPC}}).

The default configuration of emacs-w3m includes several prefixes you can
use, they are defined in the @code{w3m-search-quick-search-engine-alist}
variable.  There's for example ``gg'' for Google, ``ggg'' for Google
Groups, ``ya'' for Yahoo!, ``al'' for Altavista, to name a few.  You can
also add prefixes for the search engines you define, @xref{Adding New
Search Engines}.

Instead of prefixes, you can also use full engine names in Quicksearch
URLs, such as ``google'' or ``yahoo''.  These names are defined in
the @code{w3m-search-engine-alist} variable.

@node Adding New Search Engines
@subsection Using your favorite engines
@cindex Adding new search engines

Emacs-w3m has a number of built-in search engines you can use.  What if
you want to use your favorite search engine and it's not listed in the
known search engines?  You have to add it to the list of search
engines, and it's quite easy:

@enumerate
@item
First, you have to find what's the entry point of the search engine you
want to add, for example:

@uref{http://my.searchengine.com/?query=foobar}

where foobar is the term you want to search for.

@item
Once you have this information, add this to your @file{~/.emacs-w3m}
file:

@lisp
(eval-after-load "w3m-search"
  '(add-to-list 'w3m-search-engine-alist
                '("My engine"
                  "http://my.searchengine.com/?query=%s"
                  nil)))
@end lisp

Replace the first field ``My engine'' with the description of your
engine, the second field with the entry point (the @samp{%s} is
important, it will be replaced by the search term when you issue the
search), and the third field is the encoding to use, @code{nil} or
omitting this field means to use the value of
@code{w3m-default-coding-system} as a regular encoding.

For your information about an encoding, you have scarcely to consider it
for English search engines.  However, for a certain Japanese search
engine, you may need to specify something (e.g. @code{euc-japan}) to it.

@item
You can now use this engine to search, using the normal @kbd{S} key in
emacs-w3m.  If you use this engine often, you can also add it to the
Quicksearch (see @ref{Quick Searching}) engines and give it a small
prefix, by adding this to your @file{~/.emacs-w3m} instead:

@lisp
(eval-after-load "w3m-search"
  '(progn
     (add-to-list 'w3m-search-engine-alist
                  '("My engine"
                    "http://my.searchengine.com/?query=%s"
                    nil))
     (add-to-list 'w3m-search-quick-search-engine-alist
                  '("my" . "My engine"))))
@end lisp

This way you can also use a URL like @uref{my:foobar} to search for the
term ``foobar'' with your engine.
@end enumerate

@node Grouping URLs
@section Visiting several web pages in one URL
@cindex Grouping URLs

Emacs-w3m can manipulate ``group URLs'': special URLs that contain
several real URLs.  When you open these group URLs, emacs-w3m will open
one buffer for each URL in the group, allowing you to open several pages
in one go.

To build group URLs, you just have to put together (i.e. concatenate)
all the addresses you want to open, separating them with the ampersand
symbol (that's ``&''), and prefixing the grouped URLs with ``group:''.
For example, suppose you want to visit the GNU Project's homepage,
@uref{http://www.gnu.org/}, and the Savannah homepage,
@uref{http://savannah.nongnu.org/}: the group URL would be

@uref{group:http://www.gnu.org/&http://savannah.nongnu.org/}

Since this syntax can be quite hard to use on a daily basis, this
feature will be most useful when used with very short URLs (Quicksearch
URLs for example, see @ref{Quick Searching}); or in non-interactive
contexts.

@node Weather Information
@section It will be fine tomorrow


@node Using Antenna
@section Raise your antenna
@cindex Antenna
@cindex Tracking changes in web pages
@cindex about://antenna/

Antenna is a tool to keep track of changes in web pages.  Using Antenna,
you can periodically check if particular pages have been updated, and if
they haven't, know the last time you saw them.

You can start Antenna using the @kbd{A} key in any emacs-w3m buffer.
Alternatively, you can go to the special URL @uref{about://antenna/}; it
does the same thing.

@menu
* Setting up Antenna::          How to add your web sites to Antenna
* Daily web tracking::          Tracking changes with Antenna
@end menu

@node Setting up Antenna
@subsection How to add your web sites to Antenna
@cindex about://antenna-edit/
@kindex +
@findex w3m-antenna-add-current-url

Antenna has a specific customization interface accessible via the
``Edit'' button in the Antenna page, or via the special
@uref{about://antenna-edit/} URL.  It is pretty self-explanatory, to add
a website, do the following:

@enumerate
@item
In the ``Key'' field, put the complete URL of the web page you want to
watch, for example ``http://my.website.com/index.html''.

@item
In the ``Title'' field, type a title for your webpage, such as ``My
website''.

@item
In the ``Time'' field, choose either ``Normal'', ``Time'' or ``HNS''.
You probably want the first choice.
@end enumerate

Once all the fields are filled, hit the ``New'' button.  Your website
is now added to the Antenna database; repeat the same steps for the
other sites you want to track.

An alternative way to add a website to Antenna is to go to this site,
and to use the @kbd{+} key.  You will be taken to the Antenna
customization buffer, with all fields already set up for you.  You just
have to hit the buttons ``Save for future sessions'' and ``Finish''.

@table @kbd
@item +
Add a URL to the Antenna database.  If called with a prefix argument,
ask for a URL instead of adding the current page
(@code{w3m-antenna-add-current-url}).
@end table

@node Daily web tracking
@subsection Tracking changes with Antenna
@cindex The Antenna interface
@kindex A
@findex w3m-antenna

On the Antenna page, you will see two sections: one called ``Updated''
and another called ``Visited''.  In the ``Updated'' section, you will
find websites which have changed since the last Antenna update, and in
the ``Visited'' section, the websites which haven't.  In each section,
each line stands for one website of the Antenna database, and has the
following structure:

@samp{  * 2002/12/15 16:43  (T)  My website}

The first part is the last time the website was updated, or if this
information is not available, the last time Antenna noticed a change in
this page.

The @samp{(T)} stands for ``Time'', it means that the change was
detected because the last modification time of that page has changed
since the last Antenna update.  Another possible value here is @samp{S}
(for ``Size''), which means that the change has been detected because
the size of the page has changed.

The last part of this line is the title you gave to this website when
you added it to the database.

Please note that the Antenna database doesn't get automatically updated,
you have to update it each time you want to check if the sites have
changed, either by hitting @kbd{R} in the Antenna page, or by passing a
prefix argument to the command (start Antenna with @kbd{C-u A}, for
example).

@table @kbd
@item A
Visit the Antenna page.  If called with a prefix argument, update the
Antenna database before displaying it (@code{w3m-antenna}).
@end table

@node Showing Directory Tree
@section Showing the tree structure of local directory


@node Viewing Perl Documents
@section Viewing perl documents


@node Using Namazu
@section Searching files with Namazu


@node Octet
@section Viewing data in various octal form


@node Customizable Options
@chapter Customizable options
@cindex Customizing user options
@vindex w3m-init-file

All emacs-w3m options are customizable via the Custom mechanism, a
graphical Emacs interface to define user options.  Custom offers several
methods to define your customizations, you can use for example @kbd{M-x
customize-option} for a single option (i.e. an Emacs Lisp variable) or
@kbd{M-x customize-group} to see all available options for a ``group''
and change them; in which case the group to use is @code{w3m}.

Alternatively (if you don't want to use Custom), you can put arbitrary
Emacs Lisp expressions in your emacs-w3m initialization file, which is
@file{~/.emacs-w3m} by default.  This example:

@lisp
(setq w3m-home-page "http://emacs-w3m.namazu.org/")
@end lisp

would set the default homepage to @uref{http://emacs-w3m.namazu.org/}.
The syntax to use is the same as in your @file{.emacs}
file. @xref{(emacs)Init File}.

Please note that some options from external modules could be undefined
at the time the @file{~/.emacs-w3m} file is loaded, thus making them
impossible to modify (of course if you don't care about the default
value, you can override them completely in your @file{~/.emacs-w3m}).
The @code{w3m-search-quick-search-engine-alist} option is a typical
example (@pxref{Search Options}).

@table @code

@item w3m-init-file
When emacs-w3m starts, it will read the @code{w3m-init-file} file.  The
default value is @file{~/.emacs-w3m}.  You probably don't need to change
this.  This is a normal Emacs Lisp file and can be used to avoid
cluttering your @file{~/.emacs} and @file{site-init} files with
emacs-w3m stuff.  Emacs-w3m will also check for files with the same
names as this, but with @file{.elc} and @file{.el} extensions (in other
words, @file{~/.emacs-w3m.elc}, @file{~/.emacs-w3m.el} and
@file{~/.emacs-w3m}, in this order).

@end table

@menu
* General Options::             General options
* Image Options::               Options related to images
* Bookmark Options::            Options related to bookmarks
* Search Options::              Options related to searching the web
* Weather Options::             Options related to weather information
* Dtree Options::               Options related to the dtree feature
* Antenna Options::             Options related to antenna
* Perldoc Options::             Options related to perldoc
* Namazu Options::              Options related to namazu
* Octet Options::               Options related to the octet feature
* Other Options::               Other options
@end menu

@node General Options
@section General options


@node Image Options
@section Options related to images


@node Bookmark Options
@section Options related to bookmarks


@node Search Options
@section Options related to searching the web


@node Weather Options
@section Options related to weather information


@node Dtree Options
@section Options related to the dtree feature


@node Antenna Options
@section Options related to antenna


@node Perldoc Options
@section Options related to perldoc


@node Namazu Options
@section Options related to namazu


@node Octet Options
@section Options related to the octet feature


@node Other Options
@section Other options


@node Hooking into MUAs
@chapter Hooking emacs-w3m into mail/newsreaders


@menu
* Gnus::                        Reading HTML mails in Gnus
* Mew::                         Reading HTML mails in Mew
* SEMI MUAs::                   Reading HTML mails in SEMI MUAs
@end menu

@node Gnus
@section Reading HTML mails in Gnus


@node Mew
@section Reading HTML mails in Mew


@node SEMI MUAs
@section Reading HTML mails in SEMI MUAs


@node Frequently Asked Questions
@chapter There isn't always an answer


@node Known Problems
@chapter You can surely solve it


@node Shimbun Library
@chapter A tool for reading a newspaper
@cindex Shimbun library


@node Mailing List
@chapter Mailing list and submitting bug reports
@cindex Subscribing to the emacs-w3m mailing list
@cindex Reporting bugs


@node Emacs-w3m Functions
@chapter Details of some emacs-w3m functions
@cindex Functions details


@node Index
@unnumbered Index

@menu
* Concept Index::               Concept Index
* Key Index::                   Key Index
* Variable Index::              Variable Index
* Function Index::              Function Index
@end menu

@node Concept Index
@unnumberedsec Concept Index
@printindex cp

@node Key Index
@unnumberedsec Key Index
@printindex ky

@node Variable Index
@unnumberedsec Variable Index
@printindex vr

@node Function Index
@unnumberedsec Function Index
@printindex fn

@summarycontents
@contents
@bye

@c Local Variables:
@c fill-column: 72
@c End:
