\input texinfo @c -*-texinfo -*-
@c %**start of header
@setfilename emacs-w3m.info
@settitle Emacs-w3m -- an Emacs interface to w3m --
@c %**end of header
@documentlanguage en
@include version.texi
@synindex pg cp
@finalout

@dircategory GNU Emacs Lisp
@direntry
* Emacs-w3m: (emacs-w3m).  An Emacs interface to w3m
@end direntry

@c permissions text appears in an Info file before the first node.
@ifinfo
This file documents emacs-w3m, an Emacs interface to w3m.

Copyright @copyright{} 2000, 2001, 2002, 2003 @w{TSUCHIYA Masatoshi}

This edition is for emacs-w3m version @value{VERSION}.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License, Version 2 or any
later version published by the Free Software Foundation.

This document is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with this document; if not, you can either send email to this document's
maintainer or write to: The Free Software Foundation, Inc.; 59 Temple
Place, Suite 330; Boston, MA 02111-1307, USA.
@end ifinfo

@titlepage
@sp 10
@title Emacs-w3m User's Manual
@subtitle An Emacs interface to w3m for emacs-w3m version @value{VERSION}
@author The emacs-w3m development team
@page

@vskip 0pt plus 1filll
Copyright @copyright{} 2000, 2001, 2002, 2003 @w{TSUCHIYA Masatoshi}

This manual corresponds to emacs-w3m version @value{VERSION}.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License, Version 2 or any
later version published by the Free Software Foundation.

This document is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with this document; if not, you can either send email to this document's
maintainer or write to: The Free Software Foundation, Inc.; 59 Temple
Place, Suite 330; Boston, MA 02111-1307, USA.
@end titlepage

@ifnottex
@node Top
@top Emacs-w3m User's Manual

@flushright
The emacs-w3m development team
@end flushright

This manual corresponds to emacs-w3m version @value{VERSION}.

@end ifnottex

@menu
* Introduction::                Preliminary remarks
* Getting Started::             It's so easy to begin to use emacs-w3m
* Basic Usage::                 Basic usage
* Pretty Good Features::        Pretty good features
* Customizable Variables::      Customizable variables
* Hooking into MUAs::           Hooking emacs-w3m into mail/newsreaders
* Frequently Asked Questions::  There isn't always an answer
* Known Problems::              You can surely solve it
* Shimbun Library::             A tool for reading a web newspaper
* Tips::                        Some knick-knacks using emacs-w3m
* Mailing List::                Mailing list and submitting bug reports
* Emacs-w3m Functions::         Details of some emacs-w3m functions
* Authors::                     Persons who wrote this manual
* Index::                       Index

@detailmenu
 --- The Detailed Node Listing ---

Getting Started

* Required Emacs Version::      What version of Emacs can be used?
* You Need w3m::                Using w3m: the reason why emacs-w3m is fast
* Other Requirements::          Things required to run emacs-w3m
* Installing Emacs-w3m::        Installing emacs-w3m
* Non-UNIX-like systems::       Installing on non-UNIX-like systems
* Minimal Settings::            Minimal settings to run emacs-w3m

Basic Usage

* Browsing Web Pages::          Let's go netsurfing!
* Inline Images::               Toggle displaying inline images
* Tracing History::             Going back through time and space
* Managing Bookmarks::          That's a favorite with me!
* Using Tabs::                  Everybody likes tabs
* Working with buffers::        Creating, killing and moving across buffers
* Downloading::                 Downloading a file
* Submitting Forms::            Filling in HTML forms

Pretty Good Features

* Using Search Engines::        A convenient way to search the web
* Grouping URLs::               Visiting several web pages in one URL
* Weather Information::         It will be fine tomorrow
* Using Antenna::               Raise your antenna
* Showing Directory Tree::      Showing the tree structure of local directory
* Viewing Perl Documents::      Viewing Perl Documents
* Using Namazu::                Searching files with Namazu
* Octet::                       Viewing data in various octal form

Customizable Variables

* General Variables::           General variables
* Image Variables::             Variables related to images
* Bookmark Variables::          Variables related to bookmarks
* Search Variables::            Variables related to searching the web
* Weather Variables::           Variables related to weather information
* Dtree Variables::             Variables related to the dtree feature
* Antenna Variables::           Variables related to antenna
* Perldoc Variables::           Variables related to perldoc
* Namazu Variables::            Variables related to namazu
* Octet Variables::             Variables related to the octet feature
* Other Variables::             Other variables

Hooking into MUAs

* Gnus::                        Reading HTML mails in Gnus
* Mew::                         Reading HTML mails in Mew
* SEMI MUAs::                   Reading HTML mails in @acronym{SEMI} MUAs

Frequently Asked Questions

* General FAQ::                 General Questions
* Trouble FAQ::                 Troubleshooting
* Shimbun FAQ::                 Questions of Shimbun Library

Known Problems

Shimbun Library

* Nnshimbun::                   Making Gnus into a web browser!
* Mew Shimbun::                 Reading web newspapers with Mew
* Shimbun with Wanderlust::     Reading web newspapers with Wanderlust
* Shimbun Sites::               Sites supported by Shimbun
* Shimbun Basics::              How to make a new shimbun module

Tips

Mailing List

Emacs-w3m Functions

@end detailmenu
@end menu

@node Introduction
@chapter Preliminary remarks
@cindex Introduction

@uref{http://www.cs.indiana.edu/elisp/w3/docs.html, W3} is known as the
most popular WEB browser on Emacs, but it works so slowly that we want a
simple and speedy alternative.  @uref{http://w3m.sourceforge.net/, w3m}
is a pager with WWW capability, developed by Akinori ITO.  Although it
is a pager, it can be used as a text-mode WWW browser.  So we developed
a simple Emacs interface to w3m.

Our special thanks go to Akinori ITO and the w3m team for the excellent
w3m program.  We would also like to thank everybody who has submitted
comments, suggestions, and bug fixes.  Even though we're not aware of
any problems, all responsibility for this program is ours (the emacs-w3m
development team), but there is absolutely no warranty.  The emacs-w3m
program was first created by TSUCHIYA Masatoshi in June 2000.

See also @uref{http://emacs-w3m.namazu.org/, the emacs-w3m official page}.

@node Getting Started
@chapter It's so easy to begin to use emacs-w3m
@cindex Getting started
@cindex Starting up

Emacs-w3m may have already been installed on your system, in which case
you can skip this section and begin to use the program at once.  If
you're not that lucky, read on to learn how to install emacs-w3m.

@menu
* Required Emacs Version::      What version of Emacs can be used?
* You Need w3m::                Using w3m: the reason why emacs-w3m is fast
* Other Requirements::          Things required to run emacs-w3m
* Installing Emacs-w3m::        Installing emacs-w3m
* Non-UNIX-like systems::       Installing on non-UNIX-like systems
* Minimal Settings::            Minimal settings to run emacs-w3m
@end menu

@node Required Emacs Version
@section What version of Emacs can be used?
@cindex Possible Emacs versions

You can run emacs-w3m in various versions of Emacsen listed below:

@table @samp

@item Emacs 21.x
No additional package is required.

@item XEmacs 21.x
The @acronym{APEL} package and the @samp{gifsicle} program are required
(@pxref{Other Requirements}).  We recommend using the most recent XEmacs
21.4 since that version of XEmacs seems to be most stable.

@item Emacs 20.x
No additional package is required.  Furthermore, you can see monochrome
bitmap images inline by using the @sc{bitmap-mule} package (@pxref{Other
Requirements}).

@item Emacs 19.34 (including Mule 2.3)
The @acronym{APEL} package, the @samp{new custom} package and the
@file{regexp-opt.el} module are required.  If you are using Mule 2.3
based on Emacs 19.34, you can see monochrome bitmap images inline by
using the @sc{bitmap-mule} package (@pxref{Other Requirements}).

@end table

@node You Need w3m
@section Using w3m: the reason why emacs-w3m is fast
@cindex w3m

Emacs-w3m uses the external w3m program as a back-end to retrieve web
contents and as an HTML rendering engine; that's how we could create an
accelerated Emacs web browser with asynchronous operation.

You must install the latest w3m, it is available at:

@uref{http://prdownloads.sourceforge.net/w3m/}

@node Other Requirements
@section Things required to run emacs-w3m
@cindex @acronym{APEL} package
@cindex Gifsicle program
@cindex ImageMagick package
@cindex BITMAP-MULE package
@cindex New custom
@cindex regexp-opt.el
@cindex @acronym{FLIM} package

Depending on the version of Emacs, third party packages may be required.
This section provides resources to help you find and install them.

@table @samp

@item @acronym{APEL}
Indispensable to XEmacs, Emacs 19.34 or Mule 2.3.  You should install
@acronym{APEL} before building emacs-w3m.  @acronym{APEL} is available
at:

@uref{ftp://ftp.m17n.org/pub/mule/apel/apel-10.6.tar.gz}

Note that you must not use the @acronym{APEL} XEmacs package (which is
contained in SUMO).  If you have already installed the @acronym{APEL}
XEmacs package, use the following directives to replace it with
@acronym{APEL} which is linked above (you can also use the same
directives in order to newly install @acronym{APEL}):

@example
% rm -fr /usr/local/lib/xemacs/xemacs-packages/lisp/apel
% cd apel-10.6
% make install-package XEMACS=xemacs-21.4.x\
  PACKAGEDIR=/usr/local/lib/xemacs/xemacs-packages
@end example

@item gifsicle
Indispensable to XEmacs.  There is a known bug in all XEmacs 21.x series
that won't let it display optimized animated gifs correctly or may make
it crash when some kind of an interlaced gif image is displayed.
Emacs-w3m uses the @samp{gifsicle} program to convert gif data in order
to make it possible to be handled by XEmacs 21.x.  It is available at:

@uref{http://www.lcdf.org/gifsicle/}

@item ImageMagick
If the @samp{convert} program bundled with the ImageMagick package is
available on your system, emacs-w3m will use it for resizing images or
converting @samp{favicon} images into a format Emacs can handle.
Emacs-w3m works without ImageMagick, but it will improve the appearance
of web pages.  You can get the ImageMagick package from:

@uref{ftp://ftp.imagemagick.org/pub/ImageMagick/}

We have roughly checked that the ImageMagick version 5.4.0-5 and later
can be used for manipulating @samp{favicon} images.

@item BITMAP-MULE
Used to display monochrome bitmap images inline in Emacs 20.x or Mule
2.3 based on Emacs 19.34.  It isn't necessary if you aren't interested
in images.  It is available at:

@uref{ftp://ftp.jpl.org/pub/elisp/bitmap/}

@item new custom
Indispensable to Emacs 19.34 (including Mule 2.3).  The @samp{custom}
library bundled with Emacs 19.34 is too @emph{old}, its API is
incompatible with the @samp{new custom} bundled with recent Emacsen.
The @samp{new custom} for Emacs 19.34 is available at:

@uref{ftp://ftp.dina.kvl.dk/pub/Staff/Per.Abrahamsen/custom/custom-1.9962.tar.gz}

Note that Mule 2.3 users should slightly modify it by applying the
following patch:

@example
----8<------8<------8<------8<------8<------8<------8<------8<----
--- custom-1.9962/cus-face.el~	Wed Mar  4 19:52:39 1998
+++ custom-1.9962/cus-face.el	Mon Mar  9 08:05:33 1998
@@@@ -96,7 +96,7 @@@@
       "Define a new FACE on all frames, ignoring X resources."
       (interactive "SMake face: ")
       (or (internal-find-face name)
-	  (let ((face (make-vector 8 nil)))
+	  (let ((face (make-vector face-vector-length nil)))
 	    (aset face 0 'face)
 	    (aset face 1 name)
 	    (let* ((frames (frame-list))
----8<------8<------8<------8<------8<------8<------8<------8<----
@end example

@item regexp-opt.el
Indispensable to Emacs 19.34 (including Mule 2.3).  The
@file{regexp-opt.el} file is included in the @file{attic/} directory of
the emacs-w3m distribution.  You may simply copy it somewhere (e.g.
@file{site-lisp/} directory) and perform byte-compilation as follows:

@example
# cp -p attic/regexp-opt.el /usr/local/share/emacs/19.34/site-lisp
# cd /usr/local/share/emacs/19.34/site-lisp
# emacs -batch -q -no-site-file -f batch-byte-compile regexp-opt.el
@end example

@item @acronym{FLIM}
The @acronym{FLIM} package is required to use the @samp{shimbun}
library.  The @samp{shimbun} library is a collection of tools for
reading a web newspaper, you can use it with Gnus, Mew, Nana-gnus,
T-gnus, Wanderlust, etc. @xref{Shimbun Library}.

Note that the @acronym{FLIM} package requires the @acronym{APEL} package
even if you are using Emacs 20.x or Emacs 21.x.  Therefore, you must
install both @acronym{APEL} and @acronym{FLIM} if you would like to use
the @samp{shimbun} library.  The @acronym{FLIM} package is available at:

@uref{ftp://ftp.m17n.org/pub/mule/flim/flim-1.14/}

@item Mule-UCS
The Mule-UCS Emacs Lisp package makes your Emacs handle the Unicode
system.  We recommend you install this package so that emacs-w3m can
display pages written in UTF-8, etc.  It is available at:

@uref{ftp://ftp.m17n.org/pub/mule/Mule-UCS/Mule-UCS-0.84.tar.gz}

If you are an XEmacs user, the compiled package is here:

@uref{ftp://ftp.xemacs.org/packages/mule-ucs-1.04-pkg.tar.gz}
@end table

@node Installing Emacs-w3m
@section Installing emacs-w3m
@cindex Installing emacs-w3m

See the official page @uref{http://emacs-w3m.namazu.org/} for
instructions on how to get the latest emacs-w3m.  Is everything ready?
Now, let's begin.

In order to install emacs-w3m on non-UNIX-like systems (or any system
lacking the ability to execute the @samp{configure} script or has no
@samp{make} command), skip this section and go to the next section
@xref{Non-UNIX-like systems}.

@enumerate
@item
First, extract a tarball of the emacs-w3m distribution and enter the top
directory as follows:

@example
% tar zxf emacs-w3m-@value{VERSION}.tar.gz
% cd emacs-w3m-@value{VERSION}
@end example

If you've checked out emacs-w3m from CVS, you have to run
@samp{autoconf} with no argument to generate the @samp{configure}
script.

@item
Run the @samp{configure} script.

@example
% ./configure
@end example

@emph{Important notice to Gnus users}:

If multiple versions of Gnus are installed on your system (it is likely
that there are the released version and the development version of
Gnus), make sure that the @code{load-path} contains the directory where
the version you use is installed (check for the @file{gnus.elc} file).
You can ensure that with the @samp{--with-addpath} option as follows:

@example
% ./configure --with-addpath=/usr/local/share/emacs/site-lisp/gnus
@end example

If you've installed @acronym{APEL}, @acronym{FLIM} or something in
non-standard directories other than the default @code{load-path}, you
must specify them using the @samp{--with-addpath} option as follows (you
may also include the Gnus directory in it separated with @samp{:}):

@example
% ./configure --with-addpath=/opt/share/apel:/opt/share/flim
@end example

@item
Just run @samp{make} and @samp{make install}.  See also the next step if
you are using XEmacs.

@example
% make
% make install
@end example

All Lisp and info files will be installed in the appropriate
directories.  Now, how do you know what files will go where?  To know it
beforehand, use this:

@example
% make what-where
@end example

If you are using Emacs 21 or XEmacs, you had better install icon image
files.  To do this:

@example
% make install-icons
@end example

@item
You can also install emacs-w3m as an XEmacs package using @samp{make
install-package} instead of @samp{make install} as follows:

@example
% make
% make install-package
@end example

In this case, you don't have to execute @samp{make install-icons}.

If you need to specify the package directory, there are two ways to do
that:

@itemize @bullet

@item
Use the @samp{configure} option @samp{--with-packagedir=}.  For example:

@example
% ./configure --with-packagedir=/opt/xemacs/xemacs-packages
% make what-where
% make
% make install-package
@end example

@item
Use the @samp{PACKAGEDIR} variable.  For example:

@example
% ./configure
% make what-where PACKAGEDIR=/opt/xemacs/xemacs-packages
% make
% make install-package PACKAGEDIR=/opt/xemacs/xemacs-packages
@end example

@end itemize

@end enumerate

@node Non-UNIX-like systems
@section Installing on non-UNIX-like systems
@cindex Installing on non-UNIX-like systems

If you cannot execute the @samp{configure} script on your system, or if
no @samp{make} command is available, cast the following spell:

@example
% emacs -batch -q -no-site-file -l w3mhack.el NONE -f w3mhack-nonunix-install
@end example

If @acronym{APEL}, @acronym{FLIM} (or any other library) aren't
installed in the ordinary places, the installer will leave them out.  In
such a case, it is necessary to tell those places to the installer as
shown below:

@example
% emacs -batch -q -no-site-file -l w3mhack.el //c/share/apel://c/share/flim -f w3mhack-nonunix-install
@end example

@node Minimal Settings
@section Minimal settings to run emacs-w3m

There are only fundamental items in this section.  Many variables which
can be customized by user's preferences are described in
@ref{Customizable Variables}.

@table @samp

@item Autoloads
@cindex Adding autoload settings

You never need to set the autoload definitions if you've emacs-w3m
installed as an XEmacs package (@pxref{Installing Emacs-w3m}) because of
the @file{w3m/auto-autoloads.el} file.  If not, put the following line
in your @file{~/.emacs} file:

@lisp
(autoload 'w3m "w3m"
  "Visit the WWW page using w3m" t)
@end lisp

In addition to this, put the following setups if needed:

@lisp
(autoload 'w3m-find-file "w3m"
  "Find a local file using emacs-w3m." t)
(autoload 'w3m-browse-url "w3m"
  "Ask emacs-w3m to show a URL." t)
(autoload 'w3m-antenna "w3m-antenna"
  "Report changes of web sites." t)
(autoload 'w3m-bookmark-view "w3m-bookmark"
  "Show bookmarks." t)
(autoload 'w3m-dtree "w3m-dtree"
  "Display a directory tree." t)
(autoload 'w3m-namazu "w3m-namazu"
  "Search files with Namazu." t)
(autoload 'w3m-perldoc "w3m-perldoc"
  "View Perl documents" t)
(autoload 'w3m-search "w3m-search"
  "Search words using emacs-w3m." t)
(autoload 'w3m-weather "w3m-weather"
  "Display a weather report." t)
@end lisp

@item Startup File
@cindex Startup file
@vindex w3m-init-file

We recommend using the @file{~/.emacs-w3m} file (which is the default
value of @code{w3m-init-file}) when you twiddle some variables of
emacs-w3m.  This file is similar to @file{~/.emacs}, but is read when
emacs-w3m starts.  However, note that there are commands which shouldn't
be put there, for example, the autoload definitions as
mentioned above.

@item Proxy Gateway
@cindex Firewall
@cindex Proxy gateways
@cindex Proxy servers
@vindex w3m-command-arguments
@vindex w3m-no-proxy-domains

If you are behind a firewall and only have access to foreign web sites
through the proxy gateway, you need to instruct w3m to use the proxy
gateway.

There are some ways to do this, one is to set the @code{http_proxy}
environment variable globally in the shell something like:

@example
setenv http_proxy http://proxy.hogege.com:8000/
@end example

Another way is to customize the @code{w3m-command-arguments} variable to
add the options @samp{-o} and
@samp{http_proxy=http://PROXY_SERVER_NAME:PORT/}.

This can also be done in your @file{~/.emacs-w3m} file as shown below:

@lisp
(setq w3m-command-arguments
      (nconc w3m-command-arguments
             '("-o" "http_proxy=http://proxy.hogege.com:8000/")))
@end lisp

To specify @code{no_proxy} hosts, which shouldn't be connected to with
proxy gateways, you can set the @code{no_proxy} (note that it is not
@code{no-proxy}) environment variable with the comma separated host
names, or set the @code{w3m-no-proxy-domains} variable with a list of
domain names (not host names) as follows:

@lisp
(setq w3m-no-proxy-domains '("local.com" "neighbor.com"))
@end lisp

See also the documentation for the @code{w3m-command-arguments-alist}
variable to use regexps to specify the @code{no_proxy} hosts.

@end table

@node Basic Usage
@chapter Basic usage

@menu
* Browsing Web Pages::          Let's go netsurfing!
* Inline Images::               Toggle displaying inline images
* Tracing History::             Going back through time and space
* Managing Bookmarks::          That's a favorite with me!
* Using Tabs::                  Everybody likes tabs
* Working with buffers::        Creating, killing and moving across buffers
* Downloading::                 Downloading a file
* Submitting Forms::            Filling in HTML forms
@end menu

@node Browsing Web Pages
@section Let's go netsurfing!

@menu
* Launching and Jumping::       Go ahead, just try it
* Moving in a page::            Moving from place to place in a page
* Moving over pages::           Moving from page to page
@end menu

@node Launching and Jumping
@subsection Go ahead, just try it

You can invoke emacs-w3m using three different commands, listed below.
Try one of these commands: a web page is displayed in an Emacs buffer
named ``*w3m*'', meaning that it is an emacs-w3m buffer.  As you will
probably notice, the major mode for an emacs-w3m buffer is
@code{w3m-mode}, there are also minor modes (@pxref{Managing
Bookmarks}).

This section explains the most fundamental usage of these commands, see
@ref{Emacs-w3m Functions} for more information on each command.  And see
@ref{Customizable Variables} for details on the variables which affect
the behavior of emacs-w3m by user's preferences.

@table @code
@item w3m
@findex w3m
@vindex w3m-home-page
@vindex w3m-quick-start
@cindex Using emacs-w3m as a batch command
Start emacs-w3m, displaying the homepage specified in the
@code{w3m-home-page} variable.  The default value for
@code{w3m-home-page} is ``about:''.  Set the @code{w3m-quick-start}
variable to @code{nil} if each time you want to specify URL.

You can also use this as an Emacs batch command.  Here's an example:

@example
% emacs -f w3m
@end example

To specify a URL, you could also use:

@example
% emacs -f w3m http://emacs-w3m.namazu.org/
@end example

@item w3m-find-file
@findex w3m-find-file
Prompt for a local file name in the minibuffer, and display it in
emacs-w3m.

@item w3m-browse-url
@findex w3m-browse-url
Prompt for a URL in the minibuffer, and display it in emacs-w3m.  This
command is provided, if anything, in order to start emacs-w3m from other
application programs.
@end table

Moving in an emacs-w3m buffer won't be painful if you're an Emacs user
already, since many of the standard keys work as intended.  For
instance, @kbd{C-n}, @kbd{C-v} and @kbd{C-s} (which are commonly used to
move down one line, one page, or search downwards for a word) are valid
keys in an emacs-w3m buffer.

To follow a link, use the @kbd{RET} key.  You have to move the point to
a link to do this; links are easily recognizable in a buffer because
they are not displayed like ordinary text: they can be underlined, or
have a different color.  The face @code{w3m-anchor-face} controls how
they are to be displayed (@pxref{Customizable Variables}).

@table @kbd
@item RET
@kindex RET
@findex w3m-view-this-url
Display the page pointed by the link under point
(@code{w3m-view-this-url}).

The exact behavior of this command depends on the properties of the link
under point, and on whether you give it a prefix argument or not.  See
@ref{Emacs-w3m Functions} for details.
@end table

As mentioned above, you can be prompted for a URL when you use the
command @kbd{M-x w3m}, by setting the @code{w3m-quick-start} variable to
@code{nil}.  In an emacs-w3m buffer, there are also two popular ways to
go to new pages by entering their URLs.

@table @kbd
@item RET
@kindex RET
@findex w3m-view-this-url
In an emacs-w3m buffer, you can be prompted for a URL in the minibuffer
and make emacs-w3m display the corresponding page by hitting @key{RET}
after moving the point to the URL displayed in the @samp{header-line}.
This feature will feel familiar to you if you are used to GUI-based web
browsers like Mozilla.  Detailed explanations about this can be found in
@ref{Emacs-w3m Functions} (@code{w3m-view-this-url}).

@item g
@kindex g
@findex w3m-goto-url
You can be prompted for a URL in the minibuffer and make emacs-w3m
display the corresponding page by typing the @key{g} key (independently
of the position of the point) in an emacs-w3m buffer.  This binding will
be familiar to you if you already use Gnus or Mew (@code{w3m-goto-url}).

@item c
@kindex c
@findex w3m-print-current-url
Display the URL of the page being displayed in the echo area and put it
into the @code{kill-ring} (@code{w3m-print-current-url}).

@item u
@kindex u
@findex w3m-print-this-url
Display the URL under point in the echo area and put it into the
@code{kill-ring} (@code{w3m-print-this-url}).
@end table

If the page you are reading is today's news or someone's diary, it may
have been updated since you loaded it.  You can fetch the newest
contents of the page by using the following command.  (This command can
also be useful to force a full redisplay of the page if it looks
broken.)

@table @kbd
@item R
@kindex R
@findex w3m-reload-this-page
Reload the page which is currently displayed
(@code{w3m-reload-this-page}).
@end table

@node Moving in a page
@subsection Moving from place to place in a page
@cindex Moving in a page

Being able to use familiar Emacs movement bindings while browsing a web
page probably fascinates you already.  Believe it or not, there is
more!  Since we value your time, we have added keys to move the point,
scroll the page or find links in a very fast way.  When you master
them, you will understand how handy they are.

The keys are assigned so that scroll commands can be called using
shorter keystrokes than the standard key bindings of Emacs.  And since
places where you can input text are pretty specific in web pages
(@pxref{Submitting Forms}), most keys have special meanings and aren't
assigned to @code{self-insert-command} anymore.

@c Scrolling
@table @kbd
@item SPC
@kindex SPC
@findex w3m-scroll-up-or-next-url
Scroll downwards.  You may be used to it if you have been using the
@samp{more} command, the @samp{less} command, or the @code{view-mode} on
Emacs (@code{w3m-scroll-up-or-next-url}).

@item DEL
@kindex DEL
@findex w3m-scroll-down-or-previous-url
Scroll upwards.  You may be used to it if you have been using the
@samp{less} command or the @code{view-mode} on Emacs
(@code{w3m-scroll-down-or-previous-url}).

@item >
@kindex >
@findex w3m-scroll-left
@vindex w3m-horizontal-scroll-columns
Scroll to the left.  The scroll step is given by the
@code{w3m-horizontal-scroll-columns} variable, default 10
(@code{w3m-scroll-left}).

@item <
@kindex <
@findex w3m-scroll-right
@vindex w3m-horizontal-scroll-columns
Scroll to the right.  The scroll step is given by the
@code{w3m-horizontal-scroll-columns} variable, default 10
(@code{w3m-scroll-right}).

@item .
@kindex .
@findex w3m-shift-left
@vindex w3m-horizontal-shift-columns
Shift to the left (a fine level horizontal scrolling).  The shift step
is given by the @code{w3m-horizontal-shift-columns} variable, default 2
(@code{w3m-shift-left}).

@item ,
@kindex ,
@findex w3m-shift-right
@vindex w3m-horizontal-shift-columns
Shift to the right (a fine level horizontal scrolling).  The shift step
is given by the @code{w3m-horizontal-shift-columns} variable, default 2
(@code{w3m-shift-right}).

@item M-l
@kindex M-l
@findex w3m-horizontal-recenter
Scroll horizontally so that the current position is centered
(@code{w3m-horizontal-recenter}).
@end table

@c Moving
The @code{w3m-mode} major mode defines commands to move to various kinds
of things; namely links, forms, and images (whether they are displayed
or not).

Let's consider this simple example: suppose we want to search for a word
on the widely-known Google search engine.  Step one: open
@uref{http://www.google.com} in emacs-w3m.  Step two: after opening the
page, hit @kbd{]}.  Tadaa!  The point has been moved to the first form
input in the page, you can now hit @kbd{RET} to enter something in it,
and then @kbd{C-c C-c} to submit it.  Without this command, you would
have had to move into the page using @kbd{C-n}, @kbd{C-f} and so forth,
it would have been a real pain.

@table @key
@item TAB
@kindex TAB
@findex w3m-next-anchor
Move the point to the next anchor.  More strictly speaking, move the
point forward to the nearest anchor.
@end table

@table @kbd
@item M-@key{TAB}
@itemx S-@key{TAB}
@kindex M-@key{TAB}
@kindex S-@key{TAB}
@findex w3m-previous-anchor
Move the point to the previous anchor.  More strictly speaking, move the
point backward to the nearest anchor (@code{w3m-previous-anchor}).

@item ]
@kindex ]
@findex w3m-next-form
Move the point to the next form.  More strictly speaking, move the point
forward to the nearest form (@code{w3m-next-form}).

@item [
@kindex [
@findex w3m-previous-form
Move the point to the previous form.  More strictly speaking, move the
point backward to the nearest form (@code{w3m-previous-form}).

@item @}
@kindex @}
@findex w3m-next-image
Move the point to the next image.  More strictly speaking, move the
point forward to the nearest image (@code{w3m-next-image}).

@item @{
@kindex @{
@findex w3m-previous-image
Move the point to the previous image.  More strictly speaking, move the
point backward to the nearest image (@code{w3m-previous-image}).
@end table

@c TODO?
@c C-a  Go to the entire beginning of line.
@c C-e  Go to the entire end of line.
@c j    Next line.
@c k    Previous line.

@c l    Forward char.
@c h    Backward char.

@c M-g  Jump to line.

@node Moving over pages
@subsection Moving from page to page

This section explains how to move from page to page, but not by
following links or inputing URLs (these ways of moving are explained in
@ref{Launching and Jumping}).

This includes commands to move backwards and forwards in history (the
familiar ``Back'' and ``Forward'' from other browsers), and the
obligatory ``Go to the home page'' feature.  You will probably
understand this better after reading the @ref{Tracing History} section.

@table @kbd
@item B
@kindex B
@findex w3m-view-previous-page
Move back one page in history (@code{w3m-view-previous-page}).  With a
numeric argument ARG, move back ARG pages.  This is the preferred way to
go back in time.

@item N
@kindex N
@findex w3m-view-next-page
Move forward one page in history (@code{w3m-view-next-page}).  Of
course, this will work only if you've used @kbd{B} to move back in
history.  If called with a numeric argument ARG, move forward ARG pages.
This command actually allows you to go back to the future!

@item H
@kindex H
@findex w3m-gohome
@vindex w3m-quick-start
Move to the home page (@code{w3m-gohome}).  You can specify the URL of
the home page by customizing the @code{w3m-home-page} variable
(``about:'' by default).
@end table

These commands are exclusive features of emacs-w3m, we were able to
obtain patents on them, so you won't find them anywhere else.  That's
why you must learn to use them today!  (Just kidding.)

@table @kbd
@item ^
@kindex ^
@findex w3m-view-parent-page
Attempt to move to the parent directory of the page currently displayed.
For instance, it will attempt to move to ``http://foo/'' when
``http://foo/bar/'' is displayed.  This function has been implemented
because of the following observation: users of web browsers often have
to move up one level of directories because the information they're
looking for isn't displayed on the current page (either because it has
been deleted, or because a search engine took them to the wrong page).

When you use another web browser, you usually need to remove the last
component from the URL by using the @key{DEL} key, etc. several times
manually.  In emacs-w3m, this operation can be performed in only one
keystroke, by typing @kbd{^}!
@end table

@table @key
@item SPC
@findex w3m-view-next-page
Scroll up or go to next url.
(TODO)

@item DEL
@findex w3m-view-previous-page
Scroll down or go to previous url.
(TODO)
@end table

@node Inline Images
@section Toggle displaying inline images
@cindex Displaying images

If the Emacs version you're using is capable of displaying images in
buffers, then emacs-w3m can display them in web pages, just like
``graphical'' browsers like Netscape do.  You should make sure your
Emacs is correctly setup for images before trying to use any of the
following commands (@pxref{Required Emacs Version}).

To toggle displaying of images in the current buffer, use @kbd{T}.  It
makes emacs-w3m fetch the images from the server, then display them in
the buffer, at the position they would have in a ``graphical'' browser.
If you hit the key again, images will disappear from the buffer.

By default, emacs-w3m won't display images, but you can change its
behavior and choose to always display images, for this you need to
customize the @code{w3m-default-display-inline-images} variable and
change its value from @code{nil} to @code{t}.  @xref{Customizable
Variables}.

Emacs-w3m also comes with nifty features that let you zoom an image in
or out, save it to a file, or view it in a external viewer.  See also
@ref{Moving in a page} for instructions on how to move from image to
image in an emacs-w3m buffer.

@table @kbd
@item T
@kindex T
@findex w3m-toggle-inline-images
Toggle displaying of inline images in this buffer and buffers created
from this buffer, later on (@code{w3m-toggle-inline-images}).

@item I
@kindex I
@findex w3m-view-image
@cindex Viewing images
View the image under point in an external viewer
(@code{w3m-view-image}).

@item M-i
@kindex M-i
@findex w3m-save-image
@cindex Saving images
Save the image under point to an external file.  The default name will
be the original name of the image, so most of the time @kbd{M-i RET}
will save the image with the right name (@code{w3m-save-image}).

@cindex Zooming images
@item M-[
@kindex M-[
@findex w3m-zoom-out-image
Zoom out the image under point (@code{w3m-zoom-out-image}).

@item M-]
@kindex M-]
@findex w3m-zoom-in-image
Zoom in the image under point (@code{w3m-zoom-in-image}).
@end table

@node Tracing History
@section Going back through time and space
@cindex Browsing history
@cindex Arrived URLs

Emacs-w3m has several ways to present you with a list of all the pages
you visited before.  The first way is simply called the ``emacs-w3m
history'', it is a list of the pages you visited in this session,
presented hierarchically, that is: when you follow a link, the page
you're leaving becomes the ``parent'' of the page you're going to.  It
is a very nice to keep track of the pages you visited, and remember
from where you came if the history gets too long.

Here is an example of this feature in action, after a short visit to the
GNU Project's homepage:

@example
GNU's Not Unix! - the GNU Project and the Free Software Foundation (FSF)
  Philosophy of the GNU Project - Free Software Foundation (FSF)
    GNU Emacs - GNU Project - Free Software Foundation (FSF)
     Order from the Free Software Foundation (FSF)
  Links to Other Free Software Sites - GNU Project - Free Software Fo...
    EFF: Homepage
@end example

(In fact, this example is slightly edited to fit in 72 columns; the
URLs won't be cut in the actual emacs-w3m buffer.)

You can get this kind of history using the @kbd{s} key in any emacs-w3m
buffer.

Please note that this history is buffer-local, i.e. specific to an
emacs-w3m buffer.  But emacs-w3m has a unique feature: when you visit a
new page, the history is copied over to the new buffer, so that you can
still access the pages you visited so far.  This is different from the
way Mozilla and others work; in these browsers the history always starts
from scratch in new buffers.

The other way to have information about past pages is the ``arrived
URLs'' list: it is a list of the last 500 URLs you have visited in
emacs-w3m.  The list is ordered by date, the most recent coming first,
and for each page the time of visit is displayed.  Here's an example
(edited):

@example
Order from the Free Software Foundation (FSF)             22:53:25
GNU Emacs - GNU Project - Free Software Foundation (FS    22:53:05
Philosophy of the GNU Project - Free Software Foundati... 22:52:46
Philosophy of the GNU Project - Free Software Foundati... 22:52:39
EFF: Homepage                                             22:52:18
Links to Other Free Software Sites - GNU Project - Fre... 22:52:07
Links to Other Free Software Sites - GNU Project - Fre... 22:52:07
GNU's Not Unix! - the GNU Project and the Free Softwar... 22:51:32
Bookmarks                                                 22:51:02
The DICT Development Group- upwards                       2003-01-08
the monkey puzzle: new debian packages as an rss feed     2003-01-08
new-debian-packages.rss                                   2003-01-07
it's a miracle                                            2003-01-06
@end example

You can get this history by passing a prefix argument to the previous
command, i.e. using @kbd{C-u s}.  The number of URLs showed in this page
is customizable, see the @code{w3m-keep-arrived-urls} variable.  It
cannot exceed 500 by default.  @xref{Customizable Variables}.

Of course, in all cases all the lines showed in the examples are links,
you can go to any of the pages you visited previously just like if you
were visiting a regular page, by following the link.

@table @kbd
@item s
@kindex s
@findex w3m-history
Display the list of URLs visited in this session.  If called with a
prefix argument, show the list of arrived URLs instead
(@code{w3m-history}).
@end table

Also see the @ref{Moving over pages} section, it explains how to move in
the history with simple keybindings, i.e. the ``Back'' and ``Next''
feature.

@node Managing Bookmarks
@section That's a favorite with me!
@cindex Bookmarks

Like all modern browsers, emacs-w3m has advanced features related to
bookmarks: it lets you classify them in categories, edit them and of
course, browse them easily.

@menu
* Adding Bookmarks::            Adding a URL to your favorites
* Consulting Bookmarks::        Browse your bookmarks
* Editing Bookmarks::           How to change your bookmarks
@end menu

@node Adding Bookmarks
@subsection Adding a URL to your favorites
@cindex Adding a bookmark
@kindex a
@kindex C-u a
@findex w3m-bookmark-add-current-url
@kindex M-a
@findex w3m-bookmark-add-this-url

There are several ways to add a URL to your bookmarks.  The first one is
to use the @kbd{a} key (or call the @code{w3m-bookmark-add-current-url}
command) to add the page you're currently browsing: it will prompt you
for a section to where the bookmark should go (completion is available
with the @key{TAB} key) and will let you edit the title of the bookmark
(the default being the title of the current page).  Complete these two
steps, validating each with @kbd{RET}, and you will see the message
``Added'' in the minibuffer, which means (surprise!) that the page has
been added to your bookmarks.

Another way to add a bookmark is to use the @kbd{M-a} key (or call the
@code{w3m-bookmark-add-this-url} command): it adds the URL under point
(that means, the URL you would be taken to if you followed the link) to
the bookmarks.  As before, you will have to input the section for this
bookmark and its title, the default being this time the name of the
link itself.

The third and final way to do this is to use @kbd{C-u a}, this time you
will be prompted for the URL to add, its section, and the title to use
for it in the bookmarks.

@table @kbd
@item a
Add the current page to the bookmarks, or if called with a prefix
argument, prompt for a URL and add it
(@code{w3m-bookmark-add-current-url}).

@item M-a
Add the URL under point to the bookmarks
(@code{w3m-bookmark-add-this-url}).
@end table

@node Consulting Bookmarks
@subsection Browse your bookmarks
@cindex Consulting bookmarks
@kindex v
@findex w3m-bookmark-view

The easiest way to see the bookmarks is to use the @kbd{v} key in an
emacs-w3m buffer; another possibility is to go to the special URL
@uref{about://bookmark/}.  You will see your bookmarks, organized by
section, each line being one bookmark.  You can browse them exactly
like you would browse any other page.

On the bookmarks page a w3m minor mode is activated, the bookmark mode.
It adds key bindings to edit the bookmarks.  @xref{Editing Bookmarks}.

@table @kbd
@item v
Visit the bookmarks page (@code{w3m-bookmark-view}).
@end table

@node Editing Bookmarks
@subsection How to change your bookmarks
@cindex Editing bookmarks

The bookmark minor mode (@pxref{Consulting Bookmarks}) offers several
key bindings related to bookmark edition, most noticeably @kbd{C-k} to
kill (i.e. delete) a bookmark, and @kbd{E} to edit the bookmark file.

Bookmarks are kept in an HTML file, so you can edit the file by hand,
but be very careful: if you erase the comments emacs-w3m needs to
recognize section names, things can break easily.  If you know the
basics of HTML, the file should otherwise be quite self-explanatory.

@table @kbd
@item C-k
@findex w3m-bookmark-kill-entry
Kill the bookmark under point (@code{w3m-bookmark-kill-entry}).

@item E
@findex w3m-bookmark-edit
Visit the bookmarks file (@code{w3m-bookmark-edit}).

@item C-_
@findex w3m-bookmark-undo
Undo the last changes (@code{w3m-bookmark-undo}).
@end table

@node Using Tabs
@section Everybody likes tabs

Unlike most other text-based browsers, emacs-w3m has support for tabbed
browsing@footnote{It's nobody's fault but Emacs 19 or 20 users cannot
use tabs.}.  What is tabbed browsing, you might ask?  It's very simple:
it is a way to represent all active emacs-w3m buffers in a single
window, by showing a line at the top which shows all the buffers in a
simple and self-explaining way, each buffer being shown as a ``tab''.
This line stays visible all the time and does not scroll with the rest
of the buffer, so that you can switch to another buffer, or use the
feedback it provides at any moment.

The easiest way to get the feeling of it is to just try, so go on and
open an emacs-w3m session.  If you didn't change anything to the
configuration, the tabs line is active by default, it is this bright
line at the top with a smaller rectangle that shows the title of the
current page.  Now create another w3m buffer (with @kbd{G}, for
example): now you have two of these rectangles.  These are tabs.

The most obvious use of tabs is switching: by clicking with the
@kbd{mouse-1} button on a tab, you make the buffer it represents active.
It also works with the @kbd{mouse-2} button.  It's a very quick and easy
way to work with several emacs-w3m buffers, you just have to point and
click.

Another nifty feature is the feedback it provides.  If you are on a
color terminal or window system, emacs-w3m shows the text in the tab in
different colors to show the status of the page@footnote{Although XEmacs
shows all tabs in the same colors at every moment, you can easily
distinguish the selected tab and others and see the status of the
current page in the modeline.}.  For example, when the page is being
loaded, the text is in red, and goes back to its default color (usually
black) when the loading is complete.  This way you can tell with a
single glance at the tabs line if the page you're waiting for has
arrived or not.

Finally, if the web page provides a favicon, it will be shown in the
tab as well@footnote{Under XEmacs, favicons will currently not be shown
in the tabs line.}.  More eye-candy for the emacs-w3m user!

User options:

@table @code
@item w3m-use-tab
@vindex w3m-use-tab
Whether to activate tabbed browsing or not.
@end table

@node Working with buffers
@section Creating, killing and moving across buffers

Sooner or later, you will be addicted to emacs-w3m, and you'll have to
manage all your browsing needs with it.  To help you with this daunting
task, we have imagined many different ways to work with emacs-w3m
buffers.

@menu
* Creating and killing buffers:: Creating and killing buffers
* Moving across buffers::        Moving across buffers
* Selecting buffers::            Selecting buffers from a list
@end menu

@node Creating and killing buffers
@subsection Creating and killing buffers
@cindex Creating new buffers
@cindex Killing buffers

It is sometimes useful to create a new buffer without opening a new web
page in it.  This operation is called ``creating a twin copy'' of a
buffer, in emacs-w3m lingo.  It will simply create a new buffer whose
contents are identical to the currently active buffer.

The opposite of this is closing buffers: you can just close one buffer
(because you're not interested in its contents anymore) or you can
decide to close all buffers but the current one.  Emacs-w3m lets you do
this with the following commands:

@table @kbd
@item C-c C-t
@kindex C-c C-t
@findex w3m-copy-buffer
Create an identical copy of the currently active buffer, under a new
name.  This is used to start a new session without loading a web page in
the new buffer (@code{w3m-copy-buffer}).

@item C-c C-w
@kindex C-c C-w
@findex w3m-delete-buffer
Close the current emacs-w3m buffer (@code{w3m-delete-buffer}).

@item C-c M-w
@kindex C-c M-w
@findex w3m-delete-other-buffers
Close all emacs-w3m buffers, but the active one
(@code{w3m-delete-other-buffers}).
@end table

@node Moving across buffers
@subsection Moving across buffers

The commands you will probably use most often are those who allow you
to go to an adjacent buffer; that is a buffer just ``after'' or
``before'' the current one.  The meaning of this will be obvious if you
use tabs: the next buffer is the one just after the active one, on the
right, and the previous buffer is the one on the left.  However, XEmacs
displays tabs in random order unfortunately, so you need to pay
attention to the number which is displayed in each tab in order to know
what is the adjacent buffer if you are using XEmacs.  The key bindings
for these commands are @kbd{C-c C-p} and @kbd{C-c C-n}.

These commands understand the numeric argument convention, i.e. if you
call them with a number N as argument, you will be taken N buffers away
from the current one.  For example, to go two buffers on the right from
the current position, use @kbd{2 C-c C-n}@footnote{You can use @kbd{C-u
2 C-c C-n} instead of @kbd{2 C-c C-n} as usual.  But keep in mind all
numeric keys and minus-sign are assigned to the numeric prefix arguments
in emacs-w3m buffers.}.

@table @kbd
@item C-c C-p
@kindex C-c C-p
@findex w3m-previous-buffer
Move to the previous emacs-w3m buffer.  This is usually the next buffer
to the left in the tabs line under Emacs 21.  If called with a numeric
argument N, move N buffers to the previous (@code{w3m-previous-buffer}).

@item C-c C-n
@kindex C-c C-n
@findex w3m-next-buffer
Move to the next emacs-w3m buffer.  This is usually the next buffer to
the right in the tabs line under Emacs 21.  If called with a numeric
argument N, move N buffers to the next (@code{w3m-next-buffer}).
@end table

Also note that if these commands don't fit you well despite our efforts,
you might find what you need in ``generalist'' buffer management
packages such as ibuffer or iswitchb---since emacs-w3m buffers are
regular Emacs buffers, they will work fine too.

@node Selecting buffers
@subsection Selecting buffers from a list

There are two ways to select emacs-w3m buffers from a list.  The first
one is a minibuffer-based interface, called with @kbd{C-c C-a}.  You can
choose the buffer you want to display using the @kbd{M-p} and @kbd{M-n}
keys (or the ``up'' and ``down'' arrow keys), they will make you cycle
through the list.  You can also edit the prompt and type the title of an
existing web page, using @kbd{TAB} for completion.  For example, if you
have a ``Google Search'' page opened, you can type ``Goo'' then hit
@kbd{TAB} and the page title will be completed.  After the page name,
the buffer name is given (between brackets).  Then use @kbd{RET} to
switch to the buffer you have chosen.

The second and more sophisticated interface is called the emacs-w3m
buffer list, it is invoked with @kbd{C-c C-s}.  It shows you the list of
all opened buffers in a separate window (either a vertical or a
horizontal window---@kbd{C-c C-s} toggles between the two modes) and
allows you to view the buffers in real-time: when you move the point in
the buffer list, the buffer under point is displayed in the main window,
which allows you to have direct visual feedback of the buffer you're
switching to.

To move in the buffer list, you can use the @kbd{p} and @kbd{n} keys
(or the arrow keys).  In the buffer list, @kbd{DEL} and @kbd{SPC} allow
you to scroll the buffer displayed in the main window, which is handy
if you want to check that you're seeing the right buffer.  To select
the buffer under point, you can use the @kbd{RET} key, in which case
the buffer list will be buried, or the @kbd{w} key, in which case the
buffer list will remain visible and the focus given to the main window.

You can also close and create buffers from this menu, using the same
bindings as the one used in regular buffers (@pxref{Creating and killing
buffers}).

Finally, the @kbd{?} key shows a short help, @kbd{g} refreshes the list
and the @kbd{q} key exits the buffer list, not changing the active
buffer.

@table @kbd
@item C-c C-a
@kindex C-c C-a
@findex w3m-switch-buffer
@cindex Switching buffers using the minibuffer
Prompt for a buffer name in the minibuffer.  @kbd{M-p} and @kbd{M-n}
cycle through the list of existing buffers and @kbd{TAB} completes
(@code{w3m-switch-buffer}).

@item C-c C-s
@kindex C-c C-s
@findex w3m-select-buffer
@cindex Switching buffers using the buffer list
Show the buffer list in a separate window (@code{w3m-select-buffer}).
In this window, @kbd{C-c C-s} toggles between horizontal and vertical
modes, @kbd{RET} selects the buffer under point and buries the buffer
list, @kbd{w} selects the buffer under point and gives it the focus,
@kbd{n}, @kbd{p} and the arrow keys can be used to move down or up.
@end table

@node Downloading
@section Downloading a file

It is possible to download (i.e. fetch, but not display) any web page or
file with emacs-w3m: just put the point on the link you want to
download and hit @kbd{d}.  You will be prompted for a filename under
which to save the file locally, by default it will be the name of the
file on the remote server.  Confirm with @kbd{RET}.  The download will
be asynchronous and not block your Emacs session, you can continue your
emacs-w3m browsing in another buffer if you want.

Please note that this download mechanism uses w3m to download things,
you might want to use the more powerful wget downloader instead.  Have a
look at our friend project ``emacs-wget'', its homepage is at
@uref{http://pop-club.hp.infoseek.co.jp/emacs/emacs-wget/}.

@table @kbd
@item d
@kindex d
@findex w3m-download-this-url
@cindex Downloading files
Download the file or page pointed by the link under point
(@code{w3m-download-this-url}).
@end table

@node Submitting Forms
@section Filling in HTML forms

These emacs-w3m commands let you move between forms and fill in fields,
using simple key bindings and optionally prompting you for values in
Emacs windows or in the minibuffer.

The main key binding to remember is @kbd{RET}.  It has different
meanings, depending on the thing under point: for textareas, you will be
prompted for a value in the minibuffer.  For select tags, you will be
given a list of choices in an electric Emacs window (you can move using
the arrow keys, and pick one with the @kbd{RET} key).  For radio and
checkbox buttons, the @kbd{RET} key selects one of the elements.

When in the minibuffer or in the electric window, you can cancel with
the @kbd{C-c C-q} sequence.  To submit the form, use @kbd{C-c C-c}.

@table @kbd
@item ]
Jump to the next form (@code{w3m-next-form}).

@item [
Jump to the previous form (@code{w3m-previous-form}).

@item C-c C-c
Submit form at point (@code{w3m-submit-form}).

@item RET
Edit the value of the form item under point.

@item RET @r{(w3m-form-*-keymap)}
Accept the value.

@item C-c C-q @r{(w3m-form-*-keymap)}
Quit editing the form item, leaving changes.
@end table

@node Pretty Good Features
@chapter Pretty good features

@menu
* Using Search Engines::        Convenient ways to search the web
* Grouping URLs::               Visiting several web pages in one URL
* Weather Information::         It will be fine tomorrow
* Using Antenna::               Raise your antenna
* Showing Directory Tree::      Showing the tree structure of local directory
* Viewing Perl Documents::      Viewing Perl Documents
* Using Namazu::                Searching files with Namazu
* Octet::                       Viewing data in various octal form
@end menu

@node Using Search Engines
@section Convenient ways to search the web
@cindex Search engines

Emacs-w3m comes with advanced features related to search engines, they
are accessible through two interfaces:

@itemize
@item
The regular interface, invoked by the @kbd{S} key in any emacs-w3m
buffer.  It is a simple interactive way to choose which search engine to
use and input a search term; see @ref{The Search Interface}.

@item
The Quicksearch interface: it is a faster (yet more complicated) way to
use search engines, by going to specially crafted URLs.  For more
information about this feature, see @ref{Quick Searching}.
@end itemize

@menu
* The Search Interface::        How to search with emacs-w3m
* Quick Searching::             An alternative (and fast) way to search the web
* Adding New Search Engines::   Using your favorite engines
@end menu

@node The Search Interface
@subsection How to search with emacs-w3m
@cindex Searching

You can fire up the regular search interface by using the @kbd{S} key in
an emacs-w3m buffer (provided you use the default keymap).  You will see
a prompt in the minibuffer, asking for a search term.  Type one or
several words at the prompt, then hit @kbd{RET}.  The result page of
your search in the engine appears, you can then browse the results, just
as if you had used the normal web based entry point to the engine.

You probably noticed that you have not been given a chance to choose
which engine you want to search with.  By default, emacs-w3m will use
the Google search engine, you can change this behavior by customizing
the @code{w3m-search-default-engine} variable (see @ref{Customizable
Variables}), or you can specify the search engine each time you use the
command.

To specify which engine to use, you have to give the command a prefix
argument (usually, this means hitting @kbd{C-u} before the command,
e.g. @kbd{C-u S}).  Emacs-w3m will prompt you for an engine, you can
choose one by typing its name (completion is also available with the
@key{TAB} key).  Once you have made your choice, hit the @kbd{RET} key.
You can then type your search term, hit @kbd{RET}, and you will see the
search results.

@table @kbd
@item S
@kindex S
@findex w3m-search
@vindex w3m-search-default-engine
Begin a new search.  If called with a prefix argument, prompt for the
engine to use (@code{w3m-search}).
@end table

@node Quick Searching
@subsection An alternative (and fast) way to search the web
@cindex Quick Searching
@cindex Special URLs
@vindex w3m-uri-replace-alist
@vindex w3m-search-engine-alist
@vindex w3m-default-coding-system

If you're a ``Web Power User'' (and since you're reading this, you
probably are), you need a quick and efficient way to perform searches.
The Quick Searching feature is one.

What does it do?  It lets you launch web searches by simply going to a
special URL such as @uref{gg:emacs}.  The advantages of this mode of
operation are:

@itemize
@item
It's fast.  You just have to type a URL to choose the engine and the
search word(s), in one go.

@item
It's convenient.  With this feature, you can easily open a new emacs-w3m
tab or window, and launch a search in it, using for example, the @kbd{G}
key to open a URL in a new window, and going to a Quicksearch URL.  You
can also bookmark searches just by bookmarking the special Quicksearch
URL.

@item
It works with the grouping feature.  You can launch two searches at the
same time, with a URL like @uref{group:gg:emacs&ya:w3m}.  This would
for instance launch a search for ``emacs'' on Google and for ``w3m'' on
Yahoo!.  @xref{Grouping URLs}.
@end itemize

Using it is very simple: suppose you want to search for the word ``gnu''
on Google.  Hit @kbd{g} to go to a new URL, and type ``gg:gnu''.  The
first part of this expression, ``gg'' indicates that we want to use the
Google search engine.  The second term is the word we will be searching
for.  The prefix and the search term must be separated by a colon.  Hit
@kbd{RET}, and you will see the results of your search.  Please note
that you can input several words by separating them with spaces (to
type a space in the minibuffer, hit @kbd{C-q} first, e.g. @kbd{C-q
@key{SPC}}).

The default configuration of emacs-w3m includes several prefixes you can
use, they are defined in the @code{w3m-uri-replace-alist} variable.
There's for example ``gg'' for Google, ``ggg'' for Google Groups, ``ya''
for Yahoo!, ``al'' for Altavista, to name a few.  You can also add
prefixes for the search engines you define, @xref{Adding New Search
Engines}.

Instead of prefixes, you can also use full engine names in Quicksearch
URLs, such as ``google'' or ``yahoo''.  These names are defined in
the @code{w3m-search-engine-alist} variable.

@node Adding New Search Engines
@subsection Using your favorite engines
@cindex Adding new search engines

Emacs-w3m has a number of built-in search engines you can use.  What if
you want to use your favorite search engine and it's not listed in the
known search engines?  You have to add it to the list of search
engines, and it's quite easy:

@enumerate
@item
First, you have to find what's the entry point of the search engine you
want to add, for example:

@uref{http://my.searchengine.com/?query=foobar}

where foobar is the term you want to search for.

@item
Once you have this information, add this to your @file{~/.emacs-w3m}
file:

@lisp
(eval-after-load "w3m-search"
  '(add-to-list 'w3m-search-engine-alist
                '("My engine"
                  "http://my.searchengine.com/?query=%s"
                  nil)))
@end lisp

Replace the first field ``My engine'' with the description of your
engine, the second field with the entry point (the @samp{%s} is
important, it will be replaced by the search term when you issue the
search), and the third field is the encoding to use, @code{nil} or
omitting this field means to use the value of
@code{w3m-default-coding-system} as a regular encoding.

For English search engines, you rarely have to worry about this.
However, for some Japanese search engines, you may need to specify
something (e.g. @code{euc-japan}) there.

@item
You can now use this engine to search, using the normal @kbd{S} key in
emacs-w3m.  If you use this engine often, you can also add it to the
Quicksearch (see @ref{Quick Searching}) engines and give it a small
prefix, by adding this to your @file{~/.emacs-w3m} file instead:

@lisp
(eval-after-load "w3m-search"
  '(progn
     (add-to-list 'w3m-search-engine-alist
                  '("My engine"
                    "http://my.searchengine.com/?query=%s"
                    nil))
     (add-to-list 'w3m-uri-replace-alist
                  '("\\`my:" w3m-search-uri-replace "My engine"))))
@end lisp

This way you can also use a URL like @uref{my:foobar} to search for the
term ``foobar'' with your engine.
@end enumerate

@node Grouping URLs
@section Visiting several web pages in one URL
@cindex Grouping URLs

Emacs-w3m can manipulate ``group URLs'': special URLs that contain
several real URLs.  When you open these group URLs, emacs-w3m will open
one buffer for each URL in the group, allowing you to open several pages
in one go.

To build group URLs, you just have to put together (i.e. concatenate)
all the addresses you want to open, separating them with the ampersand
symbol (that's ``&''), and prefixing the grouped URLs with ``group:''.
For example, suppose you want to visit the GNU Project's homepage,
@uref{http://www.gnu.org/}, and the Savannah homepage,
@uref{http://savannah.nongnu.org/}: the group URL would be

@uref{group:http://www.gnu.org/&http://savannah.nongnu.org/}

Since this syntax can be quite hard to use on a daily basis, this
feature will be most useful when used with very short URLs (Quicksearch
URLs for example, see @ref{Quick Searching}); or in non-interactive
contexts.

@node Weather Information
@section It will be fine tomorrow

@node Using Antenna
@section Raise your antenna
@cindex Antenna
@cindex Tracking changes in web pages
@cindex about://antenna/

Antenna is a tool to keep track of changes in web pages.  Using Antenna,
you can periodically check if particular pages have been updated, and if
they haven't, know the last time you saw them.

You can start Antenna using the @kbd{A} key in any emacs-w3m buffer.
Alternatively, you can go to the special URL @uref{about://antenna/}; it
does the same thing.

@menu
* Setting up Antenna::          How to add your web sites to Antenna
* Daily web tracking::          Tracking changes with Antenna
@end menu

@node Setting up Antenna
@subsection How to add your web sites to Antenna
@cindex about://antenna-edit/

Antenna has a specific customization interface accessible via the
``Edit'' button in the Antenna page, or via the special
@uref{about://antenna-edit/} URL.  It is pretty self-explanatory, to add
a website, do the following:

@enumerate
@item
In the ``Key'' field, put the complete URL of the web page you want to
watch, for example ``http://my.website.com/index.html''.

@item
In the ``Title'' field, type a title for your webpage, such as ``My
website''.

@item
In the ``Time'' field, choose either ``Normal'', ``Time'' or ``HNS''.
You probably want the first choice.
@end enumerate

Once all the fields are filled, hit the ``New'' button.  Your website
is now added to the Antenna database; repeat the same steps for the
other sites you want to track.

An alternative way to add a website to Antenna is to go to this site,
and to use the @kbd{+} key.  You will be taken to the Antenna
customization buffer, with all fields already set up for you.  You just
have to hit the buttons ``Save for future sessions'' and ``Finish''.

@table @kbd
@item +
@kindex +
@findex w3m-antenna-add-current-url
Add a URL to the Antenna database.  If called with a prefix argument,
ask for a URL instead of adding the current page
(@code{w3m-antenna-add-current-url}).
@end table

@node Daily web tracking
@subsection Tracking changes with Antenna
@cindex The Antenna interface

On the Antenna page, you will see two sections: one called ``Updated''
and another called ``Visited''.  In the ``Updated'' section, you will
find websites which have changed since the last Antenna update, and in
the ``Visited'' section, the websites which haven't.  In each section,
each line stands for one website of the Antenna database, and has the
following structure:

@samp{  * 2002/12/15 16:43  (T)  My website}

The first part is the last time the website was updated, or if this
information is not available, the last time Antenna noticed a change in
this page.

The @samp{(T)} stands for ``Time'', it means that the change was
detected because the last modification time of that page has changed
since the last Antenna update.  Another possible value here is @samp{S}
(for ``Size''), which means that the change has been detected because
the size of the page has changed.

The last part of this line is the title you gave to this website when
you added it to the database.

Please note that the Antenna database doesn't get automatically updated,
you have to update it each time you want to check if the sites have
changed, either by hitting @kbd{R} in the Antenna page, or by passing a
prefix argument to the command (start Antenna with @kbd{C-u A}, for
example).

@table @kbd
@item A
@kindex A
@findex w3m-antenna
Visit the Antenna page.  If called with a prefix argument, update the
Antenna database before displaying it (@code{w3m-antenna}).
@end table

@node Showing Directory Tree
@section Showing the tree structure of local directory
@cindex Showing the tree structure of local directory

Using the @code{w3m-dtree} command, you can display a tree of all
subdirectories of a local directory, and browse it like a regular web
page.  The emacs-w3m buffer you get when you use this feature is very
similar to the output of the external ``tree'' utility, hence the
name.  Emacs-w3m adds a bonus: if you call the command with a prefix
argument, it will display files as well, turning emacs-w3m into a
full-featured file browser.

Here is an example of what an emacs-w3m dtree run looks like:

@example
/home/romain/.elisp/emacs-w3m/
 |-CVS/
 |-attic/
 |  +-CVS/
 |-autom4te.cache/
 |-doc/
 |  |-CVS/
 |  +-emacs-w3m/
 |-icons/
 |  +-CVS/
 |-patches/
 |  +-CVS/
 +-shimbun/
    +-CVS/
@end example

And with a prefix argument, you get something like this instead:

@example
/home/romain/.elisp/emacs-w3m/ (allfiles)
 |-(f).cvsignore
 |-(f)BUGS.ja
 |-(f)COPYING
 |-[d]CVS/
 |  |-(f)Entries
 |  |-(f)Repository
 |  +-(f)Root
 |-(f)ChangeLog
 |-(f)ChangeLog.1
 |-(f)Makefile
 |-(f)Makefile.in
 |-(f)README
 |-(f)README.ja
@end example

@table @kbd
@item D
@kindex D
@findex w3m-dtree
Prompt for a local directory in the minibuffer, then display its tree
structure.  If called with a prefix argument (e.g. @kbd{C-u D}), show
files in the directories as well (@code{w3m-dtree}).
@end table

@node Viewing Perl Documents
@section Viewing perl documents


@node Using Namazu
@section Searching files with Namazu

(under translation)


@node Octet
@section Viewing data in various octal form


@node Customizable Variables
@chapter Customizable variables
@cindex Customizing user options
@vindex w3m-init-file

A lot of emacs-w3m variables are customizable via the Custom mechanism,
a graphical Emacs interface to define user options.  Custom offers
several methods to define your customizations, you can use for example
@kbd{M-x customize-option} for a single option (i.e. an Emacs Lisp
variable) or @kbd{M-x customize-group} to see all available options
(including variables and faces) for a ``group'' and change them; in
which case the group to use is @code{w3m}.

Alternatively (if you don't want to use Custom), you can put arbitrary
Emacs Lisp expressions in your emacs-w3m initialization file, which is
@file{~/.emacs-w3m} by default.  This example:

@lisp
(setq w3m-home-page "http://emacs-w3m.namazu.org/")
@end lisp

@noindent
would set the default homepage to @uref{http://emacs-w3m.namazu.org/}.
The syntax to use is the same as in your @file{~/.emacs}
file.  @xref{(emacs)Init File}.

Please note that some variables from external modules could be undefined
at the time the @file{~/.emacs-w3m} file is loaded, thus making them
impossible to modify (of course if you don't care about the default
value, you can override them completely in your
@file{~/.emacs-w3m}) file.  The @code{w3m-uri-replace-alist} variable is
a typical example (@pxref{Search Variables}).

@table @code

@item w3m-init-file
When emacs-w3m starts, it will read the @code{w3m-init-file} file.  The
default value is @file{~/.emacs-w3m}.  You probably don't need to change
this.  This is a normal Emacs Lisp file and can be used to avoid
cluttering your @file{~/.emacs} and @file{site-init} files with
emacs-w3m stuff.  Emacs-w3m will also check for files with the same
names as this, but with @file{.elc} and @file{.el} extensions (in other
words, @file{~/.emacs-w3m.elc}, @file{~/.emacs-w3m.el} and
@file{~/.emacs-w3m}, in this order).

@end table

@menu
* General Variables::           General variables
* Image Variables::             Variables related to images
* Bookmark Variables::          Variables related to bookmarks
* Search Variables::            Variables related to searching the web
* Weather Variables::           Variables related to weather information
* Dtree Variables::             Variables related to the dtree feature
* Antenna Variables::           Variables related to antenna
* Perldoc Variables::           Variables related to perldoc
* Namazu Variables::            Variables related to namazu
* Octet Variables::             Variables related to the octet feature
* Other Variables::             Other variables
@end menu

@node General Variables
@section General variables


@node Image Variables
@section Variables related to images


@node Bookmark Variables
@section Variables related to bookmarks


@node Search Variables
@section Variables related to searching the web


@node Weather Variables
@section Variables related to weather information


@node Dtree Variables
@section Variables related to the dtree feature


@node Antenna Variables
@section Variables related to antenna


@node Perldoc Variables
@section Variables related to perldoc


@node Namazu Variables
@section Variables related to namazu


@node Octet Variables
@section Variables related to the octet feature


@node Other Variables
@section Other variables


@node Hooking into MUAs
@chapter Hooking emacs-w3m into mail/newsreaders

This section introduces three Message User Agents (MUAs).  All those
MUAs can display HTML mails properly using emacs-w3m.  You'll find here
HowTo's and some notes about setting up and using emacs-w3m with each
of these MUAs.

Quick note about the conventions we use: what does @samp{message}
mean?@* When a Gnus user says @samp{message}, it often means a draft of
a message to be sent as mail or news.  However, it is the term used by
Mew or Wanderlust users for received mail.  They use @samp{draft} for
the draft of a message to be sent.  On the other hand, a received
message is called an @samp{article} by Gnus users.

@menu
* Gnus::                        Reading HTML mails in Gnus
* Mew::                         Reading HTML mails in Mew
* SEMI MUAs::                   Reading HTML mails in @acronym{SEMI} MUAs
@end menu

@node Gnus
@section Reading HTML mails in Gnus
@cindex Reading HTML mails in Gnus
@vindex mm-inline-text-html-with-images
@vindex mm-inline-text-html-with-w3m-keymap
@vindex mm-text-html-renderer
@vindex w3m-minor-mode
@vindex w3m-minor-mode-command-alist

Did you know that Gnus, the Emacs newsreader, supports emacs-w3m?

Actually, the version of Gnus bundled with Emacs does not support
emacs-w3m (yet).  You'd better use the latest version of Gnus known as
@samp{Gnus v5.10}.  It is available at:

@uref{ftp://ftp.gnus.org/pub/gnus/gnus.tar.gz}

Note: if emacs-w3m @strong{is} supported in the Gnus version that comes
with your Emacs distribution, it means either that this documentation is
out-of-date (please report this bug as described in @ref{Mailing List}),
or that you're using a very old version of emacs-w3m (in which case you
should update it to a newer version).

@itemize @bullet
@item
What can you do with emacs-w3m?

You can convert HTML spam mails to be human-readable using emacs-w3m.
Of course, it works for HTML ham (non-spam) mails as well, and for both
emacs-w3m is probably faster than the default converter.  You don't need
to perform any additional operation.  It will simply be displayed.

On HTML parts of an article buffer, the @code{w3m-minor-mode} is turned
on and you can use the same main keys as the keys of emacs-w3m, for
instance, @key{RET} is for visiting a page which a link in the current
position points to.  Those keys are defined in the
@code{w3m-minor-mode-command-alist} variable.  Keep in mind that some
commands are replaced by others similar to them, for security reasons
(see below).

@item
What do you have to do?

Read the Gnus manual (@pxref{(emacs-mime)Display Customization}).  The
easiest way is to put the following line in your @file{~/.gnus.el} file:

@lisp
(setq mm-text-html-renderer 'w3m)
@end lisp

If you don't need to use emacs-w3m keys in article buffers, add the
following line too:

@lisp
(setq mm-inline-text-html-with-w3m-keymap nil)
@end lisp

@item
Notes

The above description about spam and ham is not for kidding, it's just
here to get your attention.  Some HTML mails might contain a nasty trick
used by spammers, using the @samp{<img>} tag which is far more evil than
the @samp{Click Here!} button.  It is most likely intended to check
whether the ominous spam mail has reached your eyes or not, in which
case the spammer knows for sure that your email address is valid.  It is
done by embedding an identifier string into a URL that you might
automatically retrieve when displaying the image.  By default, the
@code{mm-inline-text-html-with-images} variable is @code{nil} and Gnus
will never connect to the spammer's site arbitrarily.

You can display images inline in an article buffer if you set
@code{mm-inline-text-html-with-images} to @code{t}, can't you?  No, not
exactly: you're still being protected.  If you don't care about leaking
information (i.e. the fact that your mail address is reachable), set the
@code{mm-w3m-safe-url-regexp} variable to @code{nil}.  The default value
for @code{mm-w3m-safe-url-regexp} is @samp{"\\`cid:"} which means we
consider that images included in a mail with the @samp{cid:} URL are
safe (that is, you can display such images without modifying the
@code{mm-w3m-safe-url-regexp} variable).
@end itemize

See also @ref{Nnshimbun}.

@node Mew
@section Reading HTML mails in Mew

By using emacs-w3m with Mew, you can see HTML mails as it intended to be
displayed.  To do so, put the following line in the @file{~/.mew.el}
file:

@lisp
(require 'mew-w3m)
@end lisp

@noindent
With just this, an HTML mail will be displayed in the message window as
if it were a plain text.  You can still use the @kbd{C-c C-e} command
(@code{mew-summary-execute-external}) there.

It is also quite common these days to see mails containing the same
information twice, they use the @samp{multipart/alternative} format
which consists of both a @samp{text/plain} part and a @samp{text/html}
part (what a waste of bandwidth it is).  Mew displays only the
@samp{text/plain} part of such a mail by default.  However, you perhaps
want to see the @samp{text/html} part since you are using emacs-w3m.
If so, add the following lines to the @file{~/.mew.el} file:

@lisp
(setq mew-mime-multipart-alternative-list
      '("Text/Html" "Text/Plain" ".*"))
@end lisp

There are some customizable variables related to Mew:

@table @code
@item mew-use-w3m-minor-mode
If non-@code{nil}, the @code{w3m-minor-mode} is turned on in the message
buffer where a text/html part is displayed, and you can use the same
main keys as the keys of emacs-w3m, for instance, @key{RET} is for
visiting a page which a link in the current position points to.  Those
keys are defined in the @code{w3m-minor-mode-command-alist} variable.
Keep in mind that some commands are replaced by others similar to them,
for security reasons.  The default value is @code{nil}.

@item mew-w3m-auto-insert-image
If non-@code{nil}, you can see images inline in the message buffer when
you read a multipart/related message.  Note that mew-w3m only allows
images contained in the message body with a @samp{cid:} URL to be
displayed (as we consider them safe).  The default value is @code{nil}.

@item mew-w3m-cid-retrieve-hook
A hook run just after retrieving a @samp{cid:} URL.  The default value
is @code{nil}.
@end table

See also @ref{Mew Shimbun}.

@node SEMI MUAs
@section Reading HTML mails in @acronym{SEMI} MUAs

You can display HTML mails as human-readable, using emacs-w3m and
@acronym{SEMI} MUAs, for example, Wanderlust, T-gnus, etc.  Since those
MUAs depend on @acronym{SEMI} (and also @acronym{FLIM}) for MIME
functions, we generically call them @acronym{SEMI} MUAs.  Although
@acronym{SEMI} uses Emacs/W3 for rendering HTML mails by default, it can
easily be altered to emacs-w3m and it will make your cyber life still
more comfortable.

You simply need to put the following line in @file{~/.emacs} file:

@lisp
(require 'mime-w3m)
@end lisp

The @code{mime-w3m} and @code{mime-w3} modules are functionally alike,
as you might have guessed (see how the names sound alike?).  The latter
is included in the @acronym{SEMI} package.

On HTML parts of an article buffer, the @code{w3m-minor-mode} is turned
on and you can use the same main keys as the keys of emacs-w3m, for
instance, @key{RET} is for visiting a page which a link in the current
position points to.  Those keys are defined in the
@code{w3m-minor-mode-command-alist} variable.  Keep in mind that some
commands are replaced by others similar to them, for security reasons.

There are some customizable variables related to the @code{mime-w3m}
module:

@table @code
@item mime-w3m-display-inline-images
If it is non-@code{nil}, images will be displayed inline in HTML mails.
If it is the symbol @code{default} (which is the default) at the first
time, the value of this variable will be replaced with the value of the
@code{w3m-default-display-inline-images} variable.  You probably don't
need to change this.

@item mime-w3m-safe-url-regexp
Regexp matching URLs which are considered to be safe.  The default value
is @samp{"\\`cid:"} which means we consider that images included in a
mail with the @samp{cid:} URLs are safe.  See also @ref{Gnus} about
rogue attacks.

@item mime-w3m-setup-hook
A hook run just after setting up the cooperation of the @code{mime-w3m}
module and @acronym{SEMI}.  The default value is @code{nil}.
@end table

See also @ref{Nnshimbun} if you are using T-gnus or Nana-gnus.

@node Frequently Asked Questions
@chapter There isn't always an answer

@menu
* General FAQ::                 General Questions
* Trouble FAQ::                 Troubleshooting
* Shimbun FAQ::                 Questions of Shimbun Library
@end menu

@node General FAQ
@section General Questions

@itemize @bullet
@item
Q. What's emacs-w3m?

It is an interface program on Emacs which controls w3m.  For more
information, see @ref{Introduction}.

@item
Q. Which emacs versions are supported?

The following Emacsen have been checked for emacs-w3m support:

@itemize @bullet
@item Mule 2.3 (based on Emacs 19.34)
@item Emacs 19.34
@item Emacs 20
@item Emacs 21
@item XEmacs 21.1 with Mule
@item XEmacs 21.2 with Mule (beta37 or greater)
@item XEmacs 21.4 with/without Mule
@item XEmacs 21.5 with/without Mule
@item Meadow
@end itemize

Note that you're required to use @acronym{APEL} if you'd like to run
emacs-w3m under Mule 2.3, Emacs 19.34 or XEmacs.  For more information,
see @ref{Other Requirements}.

Emacs-w3m works on Emacs 19.34 or XEmacs without the Mule feature except
for several commands, such as the command to look weather forecasts in
Japan.  They strongly depends on the Mule feature, so that they must not
work on Emacs 19.34 or XEmacs without Mule.

@item
Q. Which w3m versions are supported?

The following w3m versions have been checked for emacs-w3m support:

@itemize @bullet
@item w3m-0.3 and later
@item w3mmee-p23-2
@end itemize

@item
Q. I've already installed @acronym{APEL} in the XEmacs SUMO package, is
it ok?

There are some problems in the XEmacs @acronym{APEL} package (all
modules have been compiled for XEmacs with Mule); for instance, the
@samp{std11} modules conflict with the @acronym{FLIM}'s one, etc.  Even
though you can use @file{apel-1.23-pkg.tar.gz} or later for both XEmacs
with Mule and non-Mule XEmacs if you don't use @acronym{FLIM} for the
@samp{shimbun} features, we recommend you replace it or newly install
the original @acronym{APEL} package.  See @ref{Other Requirements} where
to get it from.

@item
Q. I've gotten the developing version of emacs-w3m with CVS, however I'm
missing @file{configure} script.

It is necessary to run @samp{autoconf} first, to generate
@file{configure} script.
@end itemize

@node Trouble FAQ
@section Troubleshooting

@itemize @bullet
@item
Q. Why can't I enter a password on pages which require authentication?

Make sure the @code{w3m-async-exec} variable is set to a value other
than @code{nil}.

@item
Q. Why can't I enter a password for a proxy server which requires
authentication?

Make sure the @code{w3m-async-exec} variable is set to a value other
than @code{nil}.

@item
Q. Why can't I follow links?

Emacs-w3m requires a version of w3m which recognizes the @samp{-header}
option.  Check what version of w3m you use.

@item
Q. Why do garbage characters appear?

It could be caused by the following reasons:

@enumerate
@item
Bad HTML file

If the character set specified by the @samp{<meta>} tag differs from
the actual contents in an HTML file, it will not be displayed correctly.
Use the command @kbd{M-x w3m-redisplay-with-charset} or @kbd{C c} to set
the correct character set and to force redisplay of the page.

@item
Limitation of the character sets

A page written by a character set other than ISO-2022-JP(jis), EUC-JP,
or SHIFT_JIS may not be displayed correctly.  Try one of the following
ways:

@enumerate a
@item
Any characters defined in Unicode will be displayed correctly if you
install the Mule-UCS package (@pxref{Other Requirements}).  You need to
make sure that the value of the @code{w3m-use-mule-ucs} variable is set
to a value other than @code{nil} after installing the Mule-UCS package.
In addition, if you want to make Emacs (and also emacs-w3m) handle the
character sets EUC-JISX0213 and ISO-2022-JP-3, you have to install the
@samp{jisx0213} module which is contained in the Mule-UCS package
(though it doesn't work under XEmacs unfortunately).

@item
Install w3mmee or w3m-m17n, and set the @code{w3m-command} variable to
the appropriate value.  And emacs-w3m will use the multi-lingual
features provided by one of those programs.
@end enumerate

@item
Emacsen incompatibility

Under XEmacs 21.1, pages written by the SHIFT_JIS character set may not
be displaied correctly.  There is also a problem in XEmacs 21.2 prior to
the beta 36 version.  You should upgrade your XEmacs if you use such
one.

You should notice that XEmacs versions 21.1 and 21.2 have already been
retired officially.
@end enumerate

@item
Q. Why can't images be shown?

It could be caused by the following reasons:

There is a bug in the earlier versions of the @samp{libungif} library.
You have to install @samp{libungif-4.1.0b1} and later.

You must install the @samp{gifsicle} program if you want to run
emacs-w3m under XEmacs.  @xref{Other Requirements}.

Emacs-w3m doesn't support the old versions of w3m.  Check what version
of w3m you use.

@item
Q. Why can't I browse pages which require cookies?

(This is still an experimental feature.)

Make sure the @code{w3m-use-cookies} variable is set to a value other
than @code{nil}.

@item
Q. Why can't I fill in the form?

(This is still an experimental feature.)

Make sure the @code{w3m-use-form} variable is set to a value other than
@code{nil}.

@item
Q. Why can't I submit a form?

(This is still an experimental feature.)

Make sure the @code{w3m-use-form} variable is set to a value other than
@code{nil}.  You also need to use a version of w3m which recognizes the
@samp{-post} option in order to use this function.  Check what version
of w3m you use.

@item
Q. Why are frames not rendered?

Install w3mmee and put the following line in your @file{~/.emacs} file:

@lisp
(setq w3m-command "w3mmee")
@end lisp

@item
Q. Why are favicon images not displayed in the Emacs 21 tab bar?

Install the @samp{convert} program which is included in ImageMagick.
It is available from: @uref{http://www.imagemagick.org/}

@item
Q. Why does Emacs 21 get locked when a favicon image is going to be
displayed?
@item
Q. My computer accesses the disk drive violently and says @samp{process
convert exited abnormally with code 10}.  What's the story?

Do you use an old version of ImageMagick?  As far as we know, it happens
when you use the @samp{convert} program bundled with ImageMagick 5.2.1.
It has been confirmed that the @samp{convert} program bundled with
ImageMagick 5.4.0-5 (and later) works fine.

If you don't want to use ImageMagick, or if you can't use its most
recent version, add the following line in your @file{~/.emacs-w3m} file:

@lisp
(setq w3m-use-favicon nil)
@end lisp
@end itemize

@node Shimbun FAQ
@section Questions of Shimbun Library

@itemize @bullet
@item
Q. Why are the @samp{shimbun} modules not installed?

Note that the @samp{shimbun} modules (files under the @file{shimbun/}
directory) won't be installed if the @acronym{FLIM} package has not been
installed in your system.

The @samp{configure} script determines automatically whether the
@acronym{FLIM} package is installed or not.  If the @acronym{FLIM}
package is installed in a non-standard directory, the determination
fails.  In this case, you can use the @samp{--with-addpath} configure
option to explicitly set the directory name where the @acronym{FLIM}
package has been installed.  Here's an example:

@example
% ./configure --with-addpath=$HOME/share/emacs/site-lisp/flim
@end example
@end itemize

@node Known Problems
@chapter You can surely solve it


@node Shimbun Library
@chapter A tool for reading a newspaper
@cindex Shimbun library

Shimbun is pronounced ``she-n-boon'' (but actually vowels shouldn't be
prolonged), it means ``newspaper'' in Japanese.  The @samp{shimbun}
library is a collection of many modules, but each of them serves no
useful purpose alone.  This section explains three typical
@samp{shimbun} applications (two of which are included in the
@samp{shimbun} library) and how to make @samp{shimbun} modules by
yourself (you need to be able to write Emacs Lisp programs).  All three
applications make it possible to fetch continuously-updating information
from web sites around the world and to read them as if you were reading
mail messages.

More and more newspapers, mailing list archives, bulletin boards, and
individual diaries (hyper nikki system, weblogs or blogs) are open to
the public through the web.  The @samp{shimbun} library currently
supports Asahi Shimbun, Yomiuri On-line, Emacs Devel, XEmacs Beta,
mailing lists for Gnus, Mew, Wanderlust, etc., the Japanese Prime
Minister Koizumi's mail magazine, Slashdot Japan, and a lot of others.

Note that you need to have installed the @acronym{FLIM} package (and
Gnus if you'd like to use @samp{nnshimbun}) before building and
installing emacs-w3m.  The @acronym{FLIM} package requires the
@acronym{APEL} package.  You might also want to see @xref{Other
Requirements}.

@menu
* Nnshimbun::                   Turning Gnus into a web browser!
* Mew Shimbun::                 Reading web newspapers with Mew
* Shimbun with Wanderlust::     Reading web newspapers with Wanderlust
* Shimbun Sites::               Sites supported by Shimbun
* Shimbun Basics::              How to make a new shimbun module
@end menu

@node Nnshimbun
@section Turning Gnus into a web browser!
@cindex nnshimbun
@cindex Web Newspaper

@samp{Nnshimbun} is a Gnus back end, but it is distributed with
emacs-w3m, not Gnus, exceptionally.  @samp{Nnshimbun} allows you to turn
Gnus into an exceptionally useful web browser.  You can skim through the
articles on a newspaper's web server without having to see all the
advertisement.  You can read articles in mailing list archives as if you
were subscribed to the list.  You can also read submissions in bulletin
boards, etc...  Note that if you want to followup, you still need to use
emacs-w3m as Gnus can't post via the web with @samp{nnshimbun}.

Put the following line in your @file{~/.gnus.el} file:

@lisp
(autoload 'gnus-group-make-shimbun-group "nnshimbun" nil t)
@end lisp

Note: it isn't necessary if you are using T-gnus.

See also @ref{Gnus} for rendering HTML messages with emacs-w3m if you
use Gnus, see @ref{SEMI MUAs} for T-gnus or Nana-gnus instead.

@findex gnus-group-make-shimbun-group
@c @kindex G n (Group)
The easiest way to get started with @samp{nnshimbun} is to use
something like the following in the Group buffer:

@kbd{M-x gnus-group-make-shimbun-group RET asahi RET national RET}
@c @kbd{G n asahi RET national RET}

@noindent
Replace @samp{asahi} and @samp{national} with the keyword corresponding
to the server you'd like to connect to and the group you're interested
in respectively.  You can complete both of those names by using
@key{TAB} or @key{SPC}.

You can also bind that to a key if there's enough room in the
@code{gnus-group-mode-map} map, you can add something like the following
in your @file{~/.gnus.el} file (T-gnus users, you don't need to bother
to add it, since there's already the similar thing in T-gnus):

@lisp
(eval-after-load "gnus-group"
  '(define-key gnus-group-mode-map "Gn"
     'gnus-group-make-shimbun-group))
@end lisp

@noindent
Then, you can use @kbd{G n} instead of @kbd{M-x
gnus-group-make-shimbun-group}.

@emph{Could someone book this keystroke at the Gnus Tower?}

@c Otherwise, you can also see articles by browsing the back end using
@c @kbd{B nnshimbun RET asahi RET}.

@samp{Nnshimbun} simply fetches HTML contents from the web server and
displays them as an article, but it will never save articles in the
local file system, except if you use persistent articles
(@pxref{(gnus)Persistent Articles}).  @samp{Nnshimbun} uses
@acronym{NOV} files for each @samp{nnshimbun} group, and its back end is
almost the same as @samp{nnml}.

The following @samp{nnshimbun} variables can be customized:

@table @code
@item nnshimbun-keep-backlog
@vindex nnshimbun-keep-backlog
@vindex gnus-keep-backlog
This variable overrides the @code{gnus-keep-backlog} variable
(@pxref{(gnus)Article Backlog}) in @samp{nnshimbun} groups.  If you set
@code{nnshimbun-keep-backlog} to a number @var{n}, @samp{nnshimbun} will
store at most @var{n} old articles in a buffer for later re-fetching.
If this variable is non-@code{nil} and is not a number, @samp{nnshimbun}
will store @emph{all} read articles (this is not a good idea).  The
default value is 300.

Note that smaller values may spoil the @code{prefetch-articles} feature
(see below), since @samp{nnshimbun} uses the backlog to keep the
prefetched articles.

@item nnshimbun-directory
@vindex nnshimbun-directory
Directory where @samp{nnshimbun} saves @acronym{NOV} files.  The default
value is @samp{~/News/shimbun/}.
@end table

@cindex group parameters
You can use the specially made group parameter for @samp{nnshimbun} in
addition to the standard group parameters provided by Gnus@footnote{The
easiest way to specify group parameters is to type @kbd{G c} in the
group buffer after moving the point to the group you'd like to customize
(@pxref{(gnus)Group Parameters}).}.  Several parameters for
@samp{nnshimbun} are collected into the single group parameter
@code{nnshimbun-group-parameters} which is a property list (the values
can be different for every group).  Here's an example:

@lisp
'(index-range all prefetch-articles off encapsulate-images on
              expiry-wait 6)
@end lisp

Below is the documentation for those group parameters and related
variables.

@table @code
@item prefetch-articles
@vindex nnshimbun-pre-fetch-article
In a group where this group parameter is set to something else than
@code{off} or @code{nil}, @samp{nnshimbun} not only checks for new
articles, but also downloads them.  Though it will slow checking of new
articles down, you won't be kept waiting when reading articles.  In the
group where this group parameter is not set or its value is @code{nil},
the value of the @code{nnshimbun-pre-fetch-article} variable (@code{off}
by default) is used instead.

@item encapsulate-images
@vindex nnshimbun-encapsulate-images
In a group where this group parameter is set to something else than
@code{off} or @code{nil}, @samp{nnshimbun} will put image data embedded
in the original contents into an article as @samp{multipart/related}
parts of the MIME format.  In the group where this group parameter is
not set or its value is @code{nil}, the value of the
@code{nnshimbun-encapsulate-images} variable is used instead.  The
default value for the @code{nnshimbun-encapsulate-images} variable is
the value of the @code{shimbun-encapsulate-images} variable which is
provided in the @samp{shimbun} library (the default value is probably
@code{t}).

@item index-range
@vindex nnshimbun-index-range
You can specify the range of articles to be fetched from the web server
using the @code{index-range} group parameter.  To specify the range, use
the following values:

@table @code
@item nil
@item all
all pages

@item last
only the latest page
@end table

@table @samp
@item integer N
the latest N pages
@end table

@samp{Nnshimbun} checks whether there are new articles by parsing the
index page of the server.  It is possible that there are two or more
index pages on the server.  For instance, in the case of the mailing
list servers, index pages are generally classified according to the date
on which the article was posted.  It would take a considerable amount of
time to check all those huge index pages especially if you are
connecting via a slow line.

If it is possible, @samp{nnshimbun} won't check index pages which have
already been checked at the last connection.  If you want to save even
more time, use @code{last}.  It makes @samp{nnshimbun} refer to only the
latest index page for checking new articles.

In the group where the @code{index-range} group parameter is not set or
its value is @code{nil}, the value of the @code{nnshimbun-index-range}
variable (@code{nil} by default) is used.

@item nnshimbun-group-parameters-alist
@vindex nnshimbun-group-parameters-alist
This is an Emacs Lisp variable, an alist of regexp of group names and
@samp{nnshimbun} group parameters.  The default value is @code{nil}.
Each element may have the form @samp{(REGEXP KEYWORD VALUE KEYWORD
VALUE...)}, for example:

@lisp
'("^nnshimbun\\+asahi:" index-range all prefetch-articles off
  encapsulate-images on expiry-wait 6)
@end lisp

Since you can use this variable to specify the same @samp{nnshimbun}
group parameters for two or more groups which have similar names (i.e.,
those groups are likely to have similar characteristics each other), it
is useful that it can be used instead of specifying the @samp{nnshimbun}
group parameters to several groups respectively.  If the group parameter
has already been set in a group, that takes precedence over this
variable.
@end table

@cindex article expiry
@cindex auto-expire
@cindex expiry-wait
@vindex nnmail-expiry-wait-function
@vindex nnmail-expiry-wait
You can instruct @samp{nnshimbun} to expire articles@footnote{There are
mainly two ways to expire articles automatically in the @samp{nnshimbun}
groups.  One is to add a group name regular expression (it should begin
with ``^nnshimbun\\+'') to the @code{gnus-auto-expirable-newsgroups}
variable and to put the expiry period for each group into the
@code{nnmail-expiry-wait-function} variable.  Another is to set the
@code{auto-expire} group parameter to @code{t} and to set the expiry
period with the @code{expiry-wait} group parameter in every
@samp{nnshimbun} group which you want to expire automatically.  See
@ref{(gnus)Expiring Mail} for more information.  In the group to which
the @code{expiry-wait} group parameter is not specified, a default
expiry period will be applied.}.  Keep in mind that when an article is
expired, it is not deleted from the remote server, it's still available
there.  What is deleted is the line in your own @acronym{NOV} file for
@samp{nnshimbun}@footnote{The @acronym{NOV} file for @samp{nnshimbun} is
named something like ``~/News/shimbun/asahi/national/.overview''.}
corresponding to the article to be expired.  Then the article won't
appear in the Summary buffer, forever and ever.

If you don't expire articles in @samp{nnshimbun} groups, the
@acronym{NOV} files will continue to grow fat indefinitely and you may
see very old articles in the Summary buffer as if they were existing (in
fact, they might have expired three years ago on the remote server!).
Even if you try to read such an article, nothing will appear in the
article buffer.  On the other hand, most mailing list servers generally
offer all the past articles.  You may not feel like expiring articles in
such groups in order to look back with nostalgia to the good old days
and to be able to read, eyes filled with tears, articles which you
thought long gone.

You can mark @samp{nnshimbun} articles as expirable and specify the
expiry period in each @samp{nnshimbun} group as well as the other mail
back ends.  However, there are a little differences between
@samp{nnshimbun} and the other mail back ends:

@itemize @bullet
@item
First of all, the expiry period is determined with the following
priorities.  Note that the default value might be different from group
to group.

@enumerate
@item
The value of the @code{expiry-wait} group parameter in a group.

@item
The value produced by evaluating the @code{nnmail-expiry-wait-function}
variable for a group.

@item
The default value provided by the @samp{shimbun} module corresponding to
a group.

@item
The value of the @code{nnmail-expiry-wait} variable.
@end enumerate

@item
Second of all, the argument to be passed to the function specified by
the @code{nnmail-expiry-wait-function} variable will contain the names
of the back end and the server like ``nnshimbun+asahi:national'', while
only the group name will be given in the case of the other mail
back ends.  Here's an example:

@lisp
(setq nnmail-expiry-wait-function
      (lambda (group)
        (cond ((string-equal group "ding") 7)
              ((string-equal group "nnshimbun+ding:ding") 'never))))
@end lisp

This means that there are two groups for the same ding mailing list; one
is subscribed as a list member, the other is for reading from the
mailing list archive at the Gnus Towers.  Ahem, isn't it clever?  The
local mail files in the ``ding'' group will be expired in seven days and
your local disk space will be saved, but you can read even the articles
of the last century in the second group (if it is really needed,
though).

@item
Third of all, and this is written down so that you can remember it when
you're filled with doubt: even when all articles from a @samp{nnshimbun}
group should be expired, the most recent one will be kept.  This is not
to satisfy your indecisive heart, it's because the next time you fetch
new articles for this group, @samp{nnshimbun} will know where to begin
and not fetch all the articles all over again.
@end itemize

The group parameters and the variables related to expiring
@samp{nnshimbun} articles are:

@table @code
@item expiry-wait
@cindex expiry-wait
Don't be confused, please.  The @code{expiry-wait} group parameter is
provided as one of the elements of @code{nnshimbun-group-parameters},
the specially made group parameter for @samp{nnshimbun}.  It has the
same name and the same meaning as the standard group parameter.  You may
use whichever you like.  If nnshimbun's one is set to non-@code{nil}
value, it takes precedence over the standard one.  It is provided in
order to concentrate things related to @samp{nnshimbun} at one place of
the ``Gnus Customize'' buffer (which will appear by typing @kbd{G c} in
the group buffer) and to realize managing collectively by the
@code{nnshimbun-group-parameters-alist} variable@footnote{We've already
prepared the answer to the question that why @code{auto-expire}
etc. aren't included in the nnshimbun's special group parameter?  The
answer is, @code{expiry-wait} is handled by the @samp{nnshimbun}
back end, but @code{auto-expire} is handled by the Gnus core.
Therefore, it is contrary to the design policy of Gnus to extend the
Gnus core functions so that it may work for one particular back end
(i.e. reading a value from the nnshimbun's special group parameter).}.
The values which can be used are a number of expiry period, @code{never}
or @code{immediate} as well as the standard group parameter.

@item nnshimbun-keep-unparsable-dated-articles
@vindex nnshimbun-keep-unparsable-dated-articles
If this variable is non-@code{nil}, the articles of which the time of
creation (or the time of arrival) is unknown will never be expired,
since their age is unknown.  The default is @code{t}.  If you set this
variable to @code{nil}, the articles of which the time is unknown will
also be expired unconditionally when the time to expire has come.  Well,
it might prove useful for a general cleaning at the end of a year.
@end table

@node Mew Shimbun
@section Reading web newspapers with Mew

Mew Shimbun is an Emacs Lisp program meant to be used with
@samp{shimbun} and Mew (version 2.1 and later).  The @file{mew-shimbun}
module will be installed together with emacs-w3m if Mew, @acronym{APEL},
and @acronym{FLIM} are also installed.

We recommend you also see @ref{Mew}.

@enumerate
@item
Setting things up

Put the following lines in the last of the @file{~/.mew.el} file:

@format
;;; Loading mew-shimbun, defining keys.
;; (setq mew-shimbun-use-unseen t)              ;;; @footnote{Uncomment
this line if you'd like to manage unseen messages.  It must be placed
before the @code{(require 'mew-shimbun)} line.}
(require 'mew-shimbun)
(define-key mew-summary-mode-map "G"  (make-sparse-keymap))
(define-key mew-summary-mode-map "Gg" 'mew-shimbun-goto-folder)
(define-key mew-summary-mode-map "GG" 'mew-shimbun-goto-unseen-folder)
(define-key mew-summary-mode-map "Gi" 'mew-shimbun-retrieve)
(define-key mew-summary-mode-map "GI" 'mew-shimbun-retrieve-all)
(define-key mew-summary-mode-map "Gr" 'mew-shimbun-re-retrieve)
(define-key mew-summary-mode-map "GR" 'mew-shimbun-re-retrieve-all)
(define-key mew-summary-mode-map "Ge" 'mew-shimbun-expire)
(define-key mew-summary-mode-map "GE" 'mew-shimbun-expire-all)

;; Specifying @samp{shimbun} servers and groups to be read with Mew in the
;; @code{mew-shimbun-folder-groups} variable.  Each element has the form
;; @code{("folder" ("server.group" . range) ...)}.  You can use @code{all},
;; @code{last}, and a number for the @code{range} item.

(setq mew-shimbun-folder-groups
      '(;; Fetching @samp{yomiuri.shakai}, @samp{yomiuri.sports}, etc.
        ;; into the @samp{+shimbun/yomiuri} folder collectively.
        ("yomiuri"
         ("yomiuri.shakai" . 2)
         ("yomiuri.sports". 2)
         ("yomiuri.kokusai". 2))
        ;; Fetching @samp{security-memo.memo}
        ;; into @samp{+shimbun/security-memo}.
        ("security-memo"
         ("security-memo.memo" . 2))
        ("slashdot-jp"
         ("slashdot-jp.story" . last))
        ;; You can read several groups in one folder (@samp{+shimbun/comp})
        ;; as follows even if each group comes from a different server.
        ("comp"
         ("cnet.comp" . last)
         ("zdnet.comp" . last))
        ;; Fetching diaries into @samp{+shimbun/hns/arisawa} and
        ;; @samp{+shimbun/hns/miyoshi} respectively.
        ("hns/arisawa"
         ("hns.arisawa" . last))
        ("hns/miyoshi"
         ("hns.miyoshi" . last))))
@end format

You did the fundamental setups.  For the other user definable variables,
use @kbd{M-x customize-group} for the @code{mew-shimbun} group or see
the source code.

@item
Reading @samp{shimbun} messages

@enumerate a
@item
Getting started

Type @kbd{G I} (@code{mew-shimbun-retrieve-all}) first, after setting
things up as mentioned above.  The @samp{shimbun} folders specified by
the @code{mew-shimbun-folder-groups} variable will be created under the
@samp{+shimbun} parent folder.  Typing @kbd{G I} is also useful when you
have added new groups.  You can change the name of the parent folder
(@samp{+shimbun} by default) by customizing the
@code{mew-shimbun-folder} variable.

@item
Moving into a @samp{shimbun} folder

You can move to any folder (including @samp{shimbun}) by typing @kbd{g}
(@code{mew-summary-goto-folder}), but @kbd{G g}
(@code{mew-shimbun-goto-folder}) is restricted to moving to only the
@samp{shimbun} folder.  In addition, folders which have new messages
(in other words, folders which have not been scanned) will be displayed
when using a prefix argument with @kbd{G g} (i.e. @kbd{C-u G g}).  A
prefix argument similarly affects @kbd{G G} as well.

@item
Fetching messages in each folder

You can fetch new messages for the current folder exclusively by typing
@kbd{G i} (@code{mew-shimbun-retrieve}) in a @samp{shimbun} folder.

@item
Fetching updated messages

If you perform the @kbd{G r} command (@code{mew-shimbun-re-retrieve})
when a particular message is being displayed, the message will be
updated if it is possible, and new messages will be fetched.  With a
prefix argument (i.e. @kbd{C-u G r}), it will attempt to update messages
which are marked with the mark specified by the
@code{mew-shimbun-mark-re-retrieve} variable (@samp{@@} by default).  It
would be useful for CNET, etc.

The @kbd{G R} command (@code{mew-shimbun-re-retrieve-all}) checks the
freshness of all messages and re-fetches the updated messages.  If a
prefix argument is given (i.e. @kbd{C-u G R}), the messages within the
region will be processed.  It is probably worthwhile if the site is
running the hyper nikki system (@samp{nikki} means ``diary'' in
Japanese).
@end enumerate

@item
Managing unseen messages

If you have the following setting in the @file{~/.mew.el} file,

@lisp
(setq mew-shimbun-use-unseen t)
@end lisp

newly fetched messages will be marked with the mark specified by the
@code{mew-shimbun-mark-unseen} variable (@samp{*} by default), and it
will disappear automatically after reading the message.

Normally, the unseen marks will not be saved in the @file{.mew-cache}
file if scanning is not performed after adding or deleting marks in the
Mew summary mode, but if you add the following line to the
@file{~/.mew.el} file,

@lisp
(setq mew-shimbun-use-unseen-cache-save t)
@end lisp

the unseen marks will be saved in the @file{.mew-cache} file
automatically for the @samp{shimbun} groups when exiting Mew or killing
a folder (using @kbd{C-c C-q}).  However, it is not securely saved
@footnote{People who have set the @code{mew-touch-folder-p} variable to
@code{t} will succeed 100% in saving marks, but people who use
@code{nil} value seem not to be 0% successful.}.  To do this securely,
you had better have the habit of performing the @samp{scan update}
command after reading the folder.

If you don't like the @samp{*} mark for unseen messages, customize
the @code{mew-shimbun-mark-unseen} variable (see above).  By specifying
the mark by @kbd{C-u N}, you will be able to lead a better life with
taking care of unseen messages.

@item
Expiring messages

You can expire messages if you set the @code{mew-shimbun-expires}
variable beforehand.  For example:

@lisp
(setq mew-shimbun-expires
      '(("yomiuri" . 7)
        ("asahi" . 1)
        ("slashdot-jp" . 7)
        ("comp" . 7)))
@end lisp

If you set this variable as shown above, you can specify the expiry
period; 7 days for @samp{+shimbun/yomiuri}, 1 day for
@samp{+shimbun/asahi}.  Messages in the @samp{shimbun} folder where the
expiry period is not specified will never be expired.  You can use the
@kbd{G e} command (@code{mew-shimbun-expire}) to expire the expirable
messages in the current folder.  The @kbd{G E} command
(@code{mew-shimbun-expire-all}) is for expiring the expirable messages
in all the @samp{shimbun} folders.  Note that once the messages have
been expired, you cannot recover them.

@item
How to mark messages with @samp{$} as unseen

Put the following lines in the @file{~/.mew.el} file in order to define
the @samp{$} mark and use @samp{$} for the mark of unseen.  See
@uref{http://www.mew.org/ml/mew-dist-2.0/msg01251.html} if you would
like to replace the @samp{$} mark with another.

@format
;;----------------------------------------------------------------------
;;; Code for using @samp{$} as the unseen mark.
(setq mew-mark-unseen ?$)
(setq mew-shimbun-mark-unseen mew-mark-unseen)
(setq mew-mark-show-list (cons mew-mark-unseen mew-mark-show-list))
(setq mew-mark-afterstep-spec
      (cons (cons mew-mark-unseen '(1 0 1 0 0 0 0))
            mew-mark-afterstep-spec))
(setq mew-mark-spec
      (cons (list mew-mark-unseen "unseen" 0 nil nil nil nil nil)
            mew-mark-spec))
(setq mew-highlight-mark-keywords
      (cons
       (cons mew-mark-unseen 'mew-face-mark-unseen)
       mew-highlight-mark-keywords))
(defface mew-face-mark-unseen
  '((((class color) (type tty))
     (:foreground "green"))
    (((class color) (background light))
     (:foreground "deep pink" :bold t :italic t))
    (((class color) (background dark))
     (:foreground "thistle"))
    (t (:bold t)))
  "*Face to highlight the unseen mark"
  :group 'mew-highlight)
(defun mew-summary-unseen (&optional count)
  "Put the unseen mark(default is '$') in COUNT times."
  (interactive "P")
  (mew-mark-put-mark-loop (function mew-summary-unseen-one) count nil))
(defun mew-summary-unseen-one (&optional no-msg)
  "Put the unseen mark(default is '$') on this message."
  (mew-mark-put-mark mew-mark-unseen no-msg))
(defun mew-summary-mark-unseen ()
  "Change the '*' mark into the '$' mark."
  (interactive)
  (mew-summary-exchange-mark mew-mark-review mew-mark-unseen))
(defun mew-thread-mark-unseen ()
  "Put the '$' mark on all messages of the current sub-thread."
  (interactive)
  (mew-thread-mark mew-mark-unseen))

(define-key mew-summary-mode-map "$"  'mew-summary-unseen)
(define-key mew-summary-mode-map "m$" 'mew-summary-mark-unseen)
(define-key mew-summary-mode-map "t$" 'mew-thread-mark-unseen)
;;----------------------------------------------------------------------
@end format
@end enumerate

@node Shimbun with Wanderlust
@section Reading web newspapers with Wanderlust

Wanderlust includes @samp{elmo-shimbun} as an ELMO module, so you can
read @samp{shimbun} by just accessing a folder beginning with @samp{@@}
(@pxref{(wl)Shimbun Folder}).

@node Shimbun Sites
@section Sites supported by Shimbun

This section provides the list of sites supported by @samp{shimbun}
library.  Unfortunately for people who cannot understand Japanese,
almost of supported sites are written in Japanese.

@menu
* Newspapers Supported by Shimbun::
* News Sites Supported by Shimbun::
* Mailing Lists Supported by Shimbun::
* Sport Sites Supported by Shimbun::
* Misc Sites Supported by Shimbun::
@end menu

@node Newspapers Supported by Shimbun
@subsection Newspapers Supported by Shimbun

These are newspapers that are supported by @samp{shimbun} library.

@table @asis
@item @uref{http://www.asahi.com/, Asahi Shimbun}
asahi.business asahi.culture asahi.english asahi.international
asahi.kansai asahi.kansai-special asahi.national asahi.politics
asahi.science asahi.sports

These backends generates articles including only texts; in other hands,
@samp{asahi-html} generates MIME articles that include texts and
photographs.  In order to use the latter backend, specify
asahi-html.business instead of asahi.business as the group name.

@item @uref{http://mytown.asahi.com/, Asahi Shimbun}
asahi-mytown.(hokkaido@dots{}okinawa) asahi-mytown.usa

The Asahi Shimbun local-news sections including US and all the
prefectures of Japan.

@item @uref{http://www.mainichi.co.jp/, Mainichi Shimbun}
mainichi.shakai mainichi.sports mainichi.seiji mainichi.keizai
mainichi.kokusai mainichi.fuho

@item @uref{http://www.nikkansports.com/, Nikkan Sports}
nikkansports.baseball nikkansports.mlb nikkansports.soccer
nikkansports.world-soccer nikkansports.sports nikkansports.battle
nikkansports.horseracing nikkansports.entertainment
nikkansports.society nikkansports.leisure

@item @uref{http://www.nikkei.co.jp/, Nihon Keizai Shimbun}
nikkei.main nikkei.keizai nikkei.market nikkei.kaigai nikkei.sangyo
nikkei.tento nikkei.seiji nikkei.shakai nikkei.newpro nikkei.shasetsu
nikkei.zinzi nikkei.okuyami nikkei.retto

@item @uref{http://www.sponichi.co.jp/, Sponichi}
sponichi.baseball sponichi.soccer sponichi.usa sponichi.others
sponichi.society sponichi.entertainment sponichi.horseracing

@item @uref{http://www.yomiuri.co.jp/, Yomiuri Shimbun}
yomiuri.business yomiuri.editorial yomiuri.national yomiuri.obit
yomiuri.politics yomiuri.sports yomiuri.world

The backend, @samp{yomiuri-html}, is also supported.
@end table

@node News Sites Supported by Shimbun
@subsection News Sites Supported by Shimbun

These are news sites that are supported by @samp{shimbun} library.

@table @asis
@item @uref{http://cnet.sphere.ne.jp/, Japan CNET}
cnet.comp

@item @uref{http://www.watch.impress.co.jp/, Impress}
impress.internet impress.pc impress.akiba impress.game impress.av
impress.jijinews impress.sports

@item @uref{http://japan.linux.com/, japan.linux.com}
linux-ja.news linux-ja.desktop linux-ja.enterprise linux-ja.kernel
linux-ja.opensource linux-ja.security

@item @uref{http://slashdot.jp/, Slashdot Japan}
slashdot-jp.story

@item @uref{http://www.hotwired.co.jp/, HotWired Japan}
wired.business wired.culture wired.technology

@item @uref{http://headlines.yahoo.co.jp/, Yahoo! Japan}
yahoo.politics yahoo.society yahoo.people yahoo.business-all
yahoo.market yahoo.stock yahoo.industry yahoo.international
yahoo.entertainment yahoo.sports yahoo.computer yahoo.hokkaido
yahoo.tohoku yahoo.kanto yahoo.sinetsu yahoo.hokuriku yahoo.tokai
yahoo.kinki yahoo.chugoku yahoo.sikoku yahoo.kyushu yahoo.okinawa

@item @uref{http://www.zdnet.co.jp/, ZDNet Japan}
zdnet.comp zdnet.gamespot
@end table

@node Mailing Lists Supported by Shimbun
@subsection Mailing Lists Supported by Shimbun

These are mailing list archives supported by @samp{shimbun} library.

@table @asis
@item @uref{http://lists.airs.net/semi-gnus/archive/, Semi-gnus Mailing List in Japan}
airs.semi-gnus-ja

@item @uref{http://lists.airs.net/, Wanderlust Mailing List}
airs.wl airs.wl-en

@item @uref{http://www.rc.tutrp.tut.ac.jp/bbdb-ml/, Big Brother DataBase Mailing List}
bbdb-ml.bbdb-ml

@item @uref{http://mail.gnome.org/archives/, GNOME Mailing List}
gnome.balsa-list gnome.calendar-list gnome.cvs-commits-list
gnome.foundation-announce gnome.foundation-list gnome.fplan-list
gnome.gconf-list gnome.gdome gnome.gnome-1.4-list
gnome.gnome-announce-list gnome.gnome-components-list
gnome.gnome-db-list gnome.gnome-de gnome.gnome-debugger-list
gnome.gnome-devel-list gnome.gnome-doc-list gnome.gnome-gui-list
gnome.gnome-hackers gnome.gnome-hackers-readonly
gnome.gnome-hackers-test gnome.gnome-i18n gnome.gnome-i18n-tools
gnome.gnome-kde-list gnome.gnome-list gnome.gnome-office-list
gnome.gnome-pilot-list gnome.gnome-sound-list gnome.gnome-themes-list
gnome.gnome-ui-hackers gnome.gnome-web-list gnome.gnome-webmaster-list
gnome.gnome-workshop-list gnome.gnomecc-list gnome.gnumeric-list
gnome.gtk-app-devel-list gnome.gtk-devel-list gnome.gtk-doc-list
gnome.gtk-i18n-list gnome.gtk-list gnome.gtk-perl-list
gnome.guppi-list gnome.libart gnome.libart-hackers gnome.orbit-list
gnome.vote gnome.wm-spec-list gnome.xml gnome.xslt

@item @uref{http://www.java-conf.gr.jp/archives/, Java Conference Mailing List}
javaconf.servlet-ml javaconf.business-ml
javaconf.duke-in-the-box-ml javaconf.jfriends-ml javaconf.JGT-ml
javaconf.jini-ml javaconf.ejb-ml javaconf.cm-ml javaconf.horb-ml
javaconf.talk-ml

@item @uref{http://www.peanuts.gr.jp/~kei/ml-archive/, LinuxCE JP Mailing List}
linuxce-jp.users

@item @uref{http://www.m17n.org/, Mule Mailing List}
m17n.mule-ja m17n.mule

@item @uref{http://www.ysnb.net/meadow/, Meadow Mailing List}
meadow.meadow-develop meadow.meadow-users-jp

@item @uref{http://www.mew.org/ml/, Mew Mailing List}
mew.mew-dist mew.mew-win32 mew.mew-int

@item @uref{http://www.mew.org/ml/, MagicPoint Mailing List}
mew.mgp-users mew.mgp-users-jp

@item @uref{http://www.namazu.org/ml/, Namazu Mailing List}
namazu.namazu-users-ja namazu.namazu-win32-users-ja
namazu.namazu-users-en namazu.namazu-devel-ja namazu.namazu-devel-en

@item @uref{http://emacs-w3m.namazu.org/ml/, emacs-w3m Mailing List}
namazu.emacs-w3m

@item @uref{http://migemo.namazu.org/ml/, migemo Mailing List}
namazu.migemo

@item @uref{http://www.jp.netbsd.org/ja/JP/ml/, NetBSD JP Mailing List}
netbsd.announce-ja netbsd.junk-ja netbsd.tech-misc-ja
netbsd.tech-pkg-ja netbsd.port-arm32-ja netbsd.port-hpcmips-ja
netbsd.port-mac68k-ja netbsd.port-mips-ja netbsd.port-powerpc-ja
netbsd.hpcmips-changes-ja netbsd.members-ja netbsd.admin-ja
netbsd.www-changes-ja

@item @uref{http://namazu.org/~satoru/archives/, QuickML}
quickml.quickml-users quickml.quickml-server
quickml.chatty quickml.dotnet quickml.linux-zaurus quickml.ming
quickml.pdumpfs quickml.stationery quickml.tty-mania

@item @uref{http://blade.nagaokaut.ac.jp/, Ruby Mailing List}
ruby.comp.lang.ruby ruby.fj.comp.lang.ruby
ruby.ruby-dev ruby.ruby-ext ruby.ruby-list ruby.ruby-math
ruby.ruby-talk

@item @uref{http://linux.toshiba-dme.co.jp/ML/tlinux-users-j/, Toshiba Linux Users JP Mailing List}
toshiba.linux-users-j

@item @uref{http://mi.med.tohoku.ac.jp/~satodai/w3m-dev/, w3m-dev Mailing List}
w3m-dev.w3m-dev

@item @uref{http://yar-3.net/digiko/, digiko Mailing List}
digiko.digiko

@item @uref{http://list-archive.xemacs.org/, XEmacs Mailing List}
xemacs.xemacs-announce xemacs.xemacs-beta-ja
xemacs.xemacs-beta xemacs.xemacs-build-reports xemacs.xemacs-cvs
xemacs.xemacs-design xemacs.xemacs-mule xemacs.xemacs-nt
xemacs.xemacs-patches xemacs.xemacs-users-ja xemacs.xemacs

@item @uref{http://memo.st.ryukoku.ac.jp/archive/, Security MEMO Mailing List}
security-memo.memo

@item @uref{http://lists.debian.or.jp/, Debian JP Mailing List}
debian-jp.debian-announce debian-jp.debian-devel
debian-jp.debian-www debian-jp.debian-users debian-jp.debian-policy
debian-jp.jp-qa

@item @uref{http://lists.debian.org, Debian Mailing List}
debian.debian-announce debian.debian-commercial debian.debian-firewall
debian.debian-french debian.debian-isp debian.debian-italian
debian.debian-kde debian.debian-laptop debian.debian-news
debian.debian-news-german debian.debian-news-portuguese
debian.debian-security-announce debian.debian-testing
debian.debian-user debian.debian-user-catalan
debian.debian-user-french debian.debian-user-polish
debian.debian-user-portuguese debian.debian-user-spanish
debian.debian-user-swedish debian.debian-admintool
debian.debian-apache debian.debian-autobuild debian.debian-beowulf
debian.debian-boot debian.debian-cd debian.debian-ctte
debian.debian-debbugs debian.debian-devel debian.debian-devel-announce
debian.debian-devel-french debian.debian-devel-games
debian.debian-devel-spanish debian.debian-doc debian.debian-dpkg
debian.debian-emacsen debian.debian-events-eu debian.debian-events-na
debian.debian-faq debian.debian-gcc debian.debian-glibc
debian.debian-gtk-gnome debian.debian-hams debian.debian-ipv6
debian.debian-java debian.debian-jr debian.debian-med
debian.debian-mentors debian.debian-newmaint
debian.debian-newmaint-admin debian.debian-ocaml-maint
debian.debian-openoffice debian.debian-perl debian.debian-pilot
debian.debian-policy debian.debian-pool debian.debian-python
debian.debian-qa debian.debian-qa-private debian.debian-release
debian.debian-security debian.debian-snapshots
debian.debian-tetex-maint debian.debian-toolchain debian.debian-vote
debian.debian-wnpp debian.debian-www debian.debian-x debian.deity
debian.debian-chinese debian.debian-chinese-big5
debian.debian-chinese-gb debian.debian-esperanto debian.debian-i18n
debian.debian-japanese debian.debian-l10n-catalan
debian.debian-l10n-dutch debian.debian-l10n-english
debian.debian-l10n-french debian.debian-l10n-italian
debian.debian-l10n-portuguese debian.debian-l10n-spanish
debian.debian-laespiral debian.debian-russian
debian.debian-simplified-chinese debian.debian-68k debian.debian-alpha
debian.debian-arm debian.debian-bsd debian.debian-hppa
debian.debian-hurd debian.debian-ia64 debian.debian-mips
debian.debian-parisc debian.debian-powerpc debian.debian-s390
debian.debian-sparc debian.debian-superh debian.debian-ultralinux
debian.debian-win32 debian.debian-all-changes
debian.debian-alpha-changes debian.debian-arm-changes
debian.debian-books debian.debian-cd-vendors debian.debian-changes
debian.debian-consultants debian.debian-curiosa
debian.debian-devel-all-changes debian.debian-devel-alpha-changes
debian.debian-devel-arm-changes debian.debian-devel-changes
debian.debian-devel-hurd-i386-changes debian.debian-devel-i386-changes
debian.debian-devel-m68k-changes debian.debian-devel-powerpc-changes
debian.debian-devel-sparc-changes debian.debian-hurd-i386-changes
debian.debian-i386-changes debian.debian-legal
debian.debian-m68k-changes debian.debian-mirrors
debian.debian-powerpc-changes debian.debian-project
debian.debian-publicity debian.debian-sgml debian.debian-sparc-changes
debian.lcs-eng debian.lsb-confcall debian.lsb-discuss debian.lsb-impl
debian.lsb-spec debian.lsb-test debian.spi-announce debian.spi-general
debian.vgui-discuss

@item @uref{http://www.kde.gr.jp/ml/, KDE Mailing List in Japan}
kde.Kuser kde.Kdeveloper

@item @uref{http://www.geocrawler.com/, Geocrawler}
All archives of Geocrawler are supported by @samp{shimbun} library.  You
can use the command @kbd{M-x shimbun-geocrawler-add-group RET}, to add
your favorite archive to the variable
@code{shimbun-geocrawler-group-alist}.

@item @uref{http://marc.theaimsgroup.com/, Mailing list ARChives}
Mailing list ARChives (@acronym{MARC}) are supported by @samp{shimbun}
library.  Add a group name of your favorite archive and its URL to the
variable @code{shimbun-marc-aims-group-alist}, and you can browse it.

@item @uref{http://sources.redhat.com/ml/, RedHat Mailing List}
redhat.automake redhat.bug-automake redhat.automake-prs
redhat.automake-cvs redhat.binutils redhat.binutils-cvs
redhat.c++-embedded redhat.crossgcc redhat.cgen redhat.cgen-prs
redhat.cgen-cvs redhat.cygwin redhat.cygwin-xfree redhat.cygwin-announce
redhat.cygwin-xfree-announce redhat.cygwin-apps redhat.cygwin-patches
redhat.cygwin-developers redhat.cygwin-cvs redhat.cygwin-apps-cvs
redhat.docbook-tools-discuss redhat.docbook-tools-announce
redhat.docbook-tools-cvs redhat.docbook redhat.dssslist
redhat.sgml-tools redhat.docbook-apps redhat.ecos-announce
redhat.ecos-devel redhat.ecos-discuss redhat.ecos-maintainers
redhat.ecos-patches redhat.elix redhat.elix-announce redhat.gdb
redhat.gdb-announce redhat.gdb-testers redhat.gdb-testresults
redhat.gdb-patches redhat.gdb-cvs redhat.bug-gdb redhat.gdb-prs
redhat.libc-alpha redhat.libc-hacker redhat.bug-glibc redhat.glibc-cvs
redhat.glibc-linux redhat.bug-gnats redhat.gnats-devel
redhat.gnats-announce redhat.gnats-cvs redhat.gsl-discuss
redhat.gsl-announce redhat.gsl-cvs redhat.guile redhat.guile-emacs
redhat.guile-prs redhat.guile-gtk redhat.bug-guile redhat.guile-cvs
redhat.guile-emacs-cvs redhat.insight redhat.insight-announce
redhat.insight-prs redhat.installshell redhat.inti redhat.kawa
redhat.libffi-discuss redhat.libffi-announce redhat.libstdc++
redhat.libstdc++-cvs redhat.libstdc++-prs redhat.mauve-discuss
redhat.mauve-announce redhat.newlib redhat.pthreads-win32 redhat.rhdb
redhat.rhdb-announce redhat.rhug-rhats redhat.rpm2html-cvs
redhat.rpm2html-prs redhat.rpm2html redhat.sid redhat.sid-announce
redhat.sid-cvs redhat.sourcenav redhat.sourcenav-announce
redhat.sourcenav-prs redhat.win32-x11 redhat.xconq7
redhat.xconq-announce redhat.xconq-cvs

@item @uref{http://www.tech-arts.co.jp/macosx/, MacOSX JP Mailing List}
macosx-jp.macosx-jp macosx-jp.macosx-dev-jp
macosx-jp.macosx-ws-jp macosx-jp.webobjects-jp

@item @uref{http://sourceforge.jp, SourceForge JP}
All archives served by SourceForge JP are supported by @samp{shimbun}
library.  Add a group name of your favorite archive to the variable
@code{shimbun-sourceforge-jp-mailing-lists}, and you can browse it.

@item @uref{http://heimat.jp/~nakaji/elips/, Elips Mailing List}
elips.elips

@item @uref{http://lists.squeakfoundation.org/pipermail/squeak-ja/, Squeak-ja Mailing List}
squeak-ja.main

@item @uref{http://www.sra.co.jp/smalltalk/SML/archives/, Smalltalkers' Salon Mailing List}
sml.main

@item @uref{http://lists.squeakfoundation.org/pipermail/squeak-dev/, Squeak-dev Mailing List}
squeak-dev.main

@item @uref{http://www.mail-archive.com/plucker-*@@rubberchicken.org/maillist.html, Plucker Mailing List}
plucker.announce plucker.list plucker.dev

@item @uref{http://www.pilot-link.org/pipermail/, pilot-link Mailing List}
pilot-link.announce pilot-link.devel pilot-link.general
pilot-link.unix-ng

@item @uref{http://www.thedotin.net/maillists/coldsync-hackers/maillist.html, Coldsync Mailing List}
coldsync.main

@item @uref{http://www.jpilot.org/pipermail/jpilot/, J-Pilot Mailing List}
jpilot.main

@item @uref{http://lists.gnu-designs.com/pipermail/pilot-mailsync/, pilot-mailsync Mailing List}
pilot-mailsync.main

@item @uref{http://www.mozilla.gr.jp/ml/logs/moz-users/, Mozilla Users Mailing List in Japan}
mozilla-jp.users

@item @uref{http://www.tdiary.org/, tDiary Developers Mailing List in Japan}
tdiary-ml.devel tdiary-ml.theme

@end table

Please note that userid and passowrd are required for
@samp{mozilla-jp.users} so you have to write;

@example
machine www.mozilla.gr.jp
path /ml/logs/moz-users/
login mozilla
passwd mozilla
@end example

@noindent
in @file{~/.w3m/passwd} and remove group and others access permissions
from the file.

@node Sport Sites Supported by Shimbun
@subsection Sport Sites Supported by Shimbun

These are sport sites supported by @samp{shimbun} library.

@table @asis
@item @uref{http://www.makanai.com/, makanai}
makanai.f1news

@item @uref{http://www.ksky.ne.jp/~tahara/f1/, F1 FAN}
f1fan.news

@item @uref{http://f1express.cnc.ne.jp/, TOCHUU F1 EXPRESS}
f1express.F1 f1express.Pari-Dakar f1express.CART f1express.All-Japan
f1express.WRC f1express.bike f1express.Tuka-CLUB f1express.etc
f1express.F-Nippon f1express.JGTC f1express.LeMans24 f1express.Indi500
f1express.F3-Japan f1express.Super-Taikyu f1express.AJRC
f1express.F-Toyota f1express.F-Dream f1express.etc-4-Japan
f1express.F3-France f1express.F3-England f1express.F3-Germany
f1express.LeMans-USA f1express.IRL f1express.FSC f1express.Int-F3000
f1express.etc-4-int f1express.WGP f1express.WSB f1express.R2-1
f1express.Suzuka8 f1express.Motegi7 f1express.AJ-Motocross
f1express.AJ-Trial f1express.World-Motocross f1express.WCT
f1express.etc-2 f1express.Inter-GP-Cafe f1express.Takagi
f1express.NASCAR f1express.Kato f1express.Endo f1express.Sato
f1express.Imamiya f1express.Toyota-news f1express.F1-release
f1express.info
@end table

TOCHUU F1 EXPRESS requires @uref{ftp://ftp.m17n.org/pub/mule/Mule-UCS/,
Mule-UCS}.  When Mule-UCS is installed for Emacs-21.2, it is necessary
to apply
@uref{http://tsukuba.m17n.org/mule-archive/2002-3/msg00000.html, the
patch} before installation.

@node Misc Sites Supported by Shimbun
@subsection Misc Sites Supported by Shimbun

These are misc sites supported by @samp{shimbun} library.  WEB BBS and
serial publications are included.

@table @asis
@item @uref{http://www61.tcup.com/6116/yutopia.html, Yutopia BBS}
tcup.yutopia

@item @uref{http://www66.tcup.com/6629/yutopia.html, Meadow BBS}
tcup.meadow

@item @uref{http://www67.tcup.com/6718/yutopia.html, SKK BBS}
tcup.skk

Add appropriate configurations to the variable
@code{shimbun-tcup-group-alist}, you can browse other bulletin board
systems that are provided at @uref{http://www.tcup.com/}.

@item @uref{http://www.vinelinux.org, VineLinux Errata}
vinelinux.errata.2x.i386 vinelinux.errata.2x.ppc
vinelinux.errata.2x.sparc vinelinux.errata.2x.alpha
vinelinux.errata.1x

@item 2ch
This is an example to browse Meadow BBS and emacs-w3m BBS on 2ch.
@lisp
(setq shimbun-2ch-group-alist
      '(("Meadow" .
         "http://pc.2ch.net/test/read.cgi/software/1005469775")
        ("emacs-w3m" .
         "http://pc.2ch.net/test/read.cgi/unix/1013710106")))
@end lisp

@item HNS
This is an example to use @samp{sb-hns}.
@lisp
(setq shimbun-hns-group-alist
      '(("arisawa"                           ;; Group Name
         "http://www.nijino.com/ari/diary/"  ;; URL
         "ari@@mbf.sphere.ne.jp")             ;; E-Mail Address
        ("miyoshi"
         "http://www.be.wakwak.com/cgi-bin/sbox/~miyoshi/hns/"
         "miyoshi@@meadowy.org")))
@end lisp

@item tDiary
This is an example to use @samp{sb-tdiary}.
@lisp
(setq shimbun-tdiary-group-alist
      '(("henahena"                          ;; Group Name
         "http://www.fan.gr.jp/~ring/d/")    ;; URL
        ("yoichi"
         "http://yoichi.geiin.org/d/")))
@end lisp

@item chalow
This is an example to use @samp{sb-chalow}.
@lisp
(setq shimbun-chalow-group-alist
      '(("yto"                               ;; Group Name
         "http://nais.to/~yto/clog/"         ;; URL
         "yto@@nais.to")                      ;; E-mail Address
        ))
@end lisp

@item Wiki contents
This is an example to use @samp{sb-wiki}.  @samp{sb-wiki} support
PukiWiki and Hiki.  If you don't know which regexps to set to 4th and
5th elements of an inner list, just set @code{nil} and you'll just see
all contents of a page.
@lisp
(setq shimbun-wiki-group-alist
      '(("pukiwiki" ;; Group Name 
	 "http://pukiwiki.org/index.php?cmd=rss10" ;; URL
	 "webmaster@@pukiwiki.org" ;; E-Mail Address
	 nil ;; X-Face
	 "\n<h3 id=\"" ;; regexp to represent contents start
	 "</address>") ;; regexp to represent contents end
	("hiki"
	 "http://www.namaraii.com/hiki/?c=rss"
	 "webmaster@@fdiary.net"
	 nil
	 "<div class=\"section\">"
	 "<div class=\"sidebar\">")
	("apollo"
	 "http://wiki.fdiary.net/apollo/?c=rss"
	 "moriq@@moriq.com"
	 nil
	 "<div class=\"section\">"
	 "<div class=\"sidebar\">")
	))
@end lisp

@item @uref{http://www.kantei.go.jp/jp/, Koizumu Cabinet Mail Magazine}
kantei.m-magazine

@item @uref{http://www.jpo.go.jp/, Patent Office in Japan}
jpo.news jpo.revision jpo.lawguide jpo.details

@item @uref{http://www-6.ibm.com/jp/developerworks/, IBM developerWorks} (in Japanese)
ibm-dev.java ibm-dev.linux ibm-dev.opensource ibm-dev.webservices
ibm-dev.xml

@item @uref{http://muchy.com/, Muchy's Palmware Review!}
muchy.review

@item @uref{http://palmoslove.com/, palmoslove}
palmoslove.webnews palmoslove.pdanews palmoslove.sitenews

@item @uref{http://www.pocketgames.jp/, Pocketgames}
pocketgames.news

@item @uref{http://www.wince.ne.jp/, Wincefan}
wincefan.news

@item @uref{http://www.palmfan.com/, PalmFan}
palmfan.news palmfan.palmwarefan

@item @uref{http://homepage1.nifty.com/akiba/plat.html, Report of Electrical Stores Street} (in Japanese)
dennou.report

@item @uref{http://pcweb.mycom.co.jp/column/, PCWEB COLUMN Square}
pcweb-column.gyokai pcweb-column.benri pcweb-column.hitech
pcweb-column.business pcweb-column.winxp pcweb-column.bytes
pcweb-column.newyork pcweb-column.asia pcweb-column.akiba
pcweb-column.rikei pcweb-column.osx pcweb-column.game
pcweb-column.smart98 pcweb-column.win2k pcweb-column.msdos
pcweb-column.muteki pcweb-column.mobile pcweb-column.win98
pcweb-column.ayashii pcweb-column.melon pcweb-column.linux
pcweb-column.scrap pcweb-column.siterev pcweb-column.anime
pcweb-column.soho pcweb-column.trouble pcweb-column.renai
pcweb-column.dream pcweb-column.tworld pcweb-column.camera
pcweb-column.denshi pcweb-column.tsushin pcweb-column.shitumon
pcweb-column.nandemo pcweb-column.hourou pcweb-column.oshigoto
pcweb-column.tech pcweb-column.speed

@item @uref{http://tsuruo.dominohosting.biz/members/tsuruo/, Notes Exhibition}
lotusex.news lotusex.library lotusex.operation lotusex.primer
lotusex.tips lotusex.practical lotusex.qanda lotusex.lounge
lotusex.bbs

@item @uref{http://www.atmarkit.co.jp, @@IT forum}
atmarkit.fwin2k atmarkit.fdotnet atmarkit.fsys atmarkit.fxml
atmarkit.flinux atmarkit.fnetwork atmarkit.fjava 
atmarkit.fsecurity atmarkit.fbiz atmarkit.jibun
@end table

@node Shimbun Basics
@section How to make a new shimbun module
@cindex @file{shimbun.el}

@samp{Shimbun} is a library set of emacs-w3m that enables you to read
certain web contents using Gnus, Wanderlust, or Mew as if they were
email messages.  Here we will explain how to make a new @samp{shimbun}
module.

@menu
* Overview::
* Getting web page and header information::
* Displaying an article::
* Inheriting shimbun module::
@end menu

@node Overview
@subsection Overview

When you make a new @samp{shimbun} module @samp{foobar} for reading
contents of @uref{http://www.foobar.net}, what you have to do first is
to put the following S expressions in the first part of the
@file{sb-foobar.el} file:

@lisp
(require 'shimbun)
(luna-define-class shimbun-foobar (shimbun) ())
@end lisp

@noindent
We will explain what they are below, so you can understand they are just
incantations now.  You have to use the same suffix @samp{foobar} in the
file name (@file{sb-foobar.el}) and the class name
(@samp{shimbun-foobar}) as the second argument for the
@code{luna-define-class} macro.

Major jobs of the @samp{shimbun-foobar} module can be classified broadly
into the following four categories (note that you may rephrase
``folder'' with ``group'' if you are a Gnus user):

@enumerate
@item
Getting a page source from @uref{http://www.foobar.net} in order to
gather articles' subjects etc. when a MUA opens the @samp{foobar}
folder.

@item
Gathering subjects and other necessary informations from the page source
in order to make headlines of articles and returning them as the
structured list called @code{headers}.

@item
Getting a page source for an article from the web site, for example,
@uref{http://www.foobar.net/053003.html}, when MUA requires to display
an article in the @samp{foobar} folder, and

@item
Removing cruft, e.g. advertisements, from the page source and formatting
a raw article.
@end enumerate

@noindent
@code{shimbun-headers} of @file{shimbun.el} does the first job,
@code{shimbun-get-headers} does the second, @code{shimbun-article} does
the third and @code{shimbun-make-contents} does the last.

The @code{shimbun-headers} method does the first job, the
@code{shimbun-get-headers} method does the second, the
@code{shimbun-article} method does the third and the
@code{shimbun-make-contents} method does the last thing.  The default
methods for those categories are defined in the @file{shimbun.el}
module.

Open the @file{shimbun.el} file.  You may see unfamiliar definitions
like @code{luna-define-generic} or @code{luna-define-method} there.  Hm,
they look like @code{defun}, don't you?  You may also see there's just a
doc-string in the former definition and the same symbol is declared
again in the later form.  And further, there are some symbols only
declared by the @code{luna-define-generic} form, not by the
@code{luna-define-method} form.  What on earth are we seeing?  Isn't the
program not written in the Emacs-Lisp language?

The truth is that the @samp{shimbun} modules use the @file{luna.el}
module provided by @acronym{FLIM} which enables you to write object
oriented programs in the Emacs-Lisp language.

There are method programs defined rigidly for the specific purposes in
the @file{shimbun.el} module.  The @code{shimbun-headers} method gets a
page source from a certain URL, the @code{shimbun-get-headers} method
gathers subjects and other informations, etc@dots{} (see above).  They
do routine works, so they cannot take proper method to meet various web
contents in the world.  Eh?  Oh, you shouldn't believe in a heresy!

The @file{shimbun.el} module only provides the default method functions.
Remember the @code{defadvice} feature.  There are three ways to modify
the behavior of a function: @code{:before}, @code{:around} and
@code{:after}.  Similarly, each default @samp{shimbun} method function
can be modified for a certain purpose (note that the @code{:around}
method-qualifier can be omitted).  And it should be written specially
that the modification will be effective only when the specified
@samp{shimbun} module is selected.

Now as you may have understood that the @code{luna-define-generic} form
provides only a husk in a sense, the @code{luna-define-method} form
defines an actual function which can be different for each
@samp{shimbun} module, and the @code{luna-define-class} form declares
the @samp{shimbun} class in the first part of the @file{sb-foobar.el}
module.

@node Getting web page and header information
@subsection Getting web page and header information

Let's identify a target web page URL to gather subjects and other
informations first.  If a web site uses a frame, a target is only one
of the web pages.  Second, lets create a body of the
@code{shimbun-index-url} method function using the
@code{luna-define-method} form in your @file{sb-foobar.el} file.  And
make the user customizable variable @code{shimbun-foobar-groups}, which
we will explain later@footnote{At least one group is necessary for each
@samp{shimbun} module even if you don't want it.}.

@lisp
(defvar shimbun-foobar-url "http://www.foobar.net")

(luna-define-method shimbun-index-url ((shimbun shimbun-foobar))
  shimbun-foobar-url)

(defvar shimbun-foobar-groups '("news"))
@end lisp

After you create a body of the @code{shimbun-index-url} method, the
@code{shimbun-headers} method can get a web page source since the
@file{shimbun.el} module already has the default @code{shimbun-headers}
method.  After the @code{shimbun-headers} method gets a web page source,
it calls the @code{shimbun-get-headers} method to gather headers
information.  As the @file{shimbun.el} module does not have the
@code{shimbun-get-headers} method, you have to create it in your
@file{sb-foobar.el} file.

Now look carefully in the page source and create the
@code{shimbun-get-headers} method in your @file{sb-foobar.el} file.

Create a regular expression that can gather headers information.
Minimally necessary information are subject, date, author, URL and
@code{message-id} of an article.  They are used in MUA as Subject, Date,
From, Xref and Message-ID.

If you want to make an article from a line in a web page source, like:

@example
<a href="053003.html">some talks on May 30(posted by Mikio &lt;foo@@bar.net&gt;)</a>
@end example

@noindent

use the following regexp:

@example
"<a href=\"\\(\\([0-9][0-9][0-9][0-9]\\)\\.html\\)\">\\([^<(]+\\)(posted by \\([^<]+\\))<\/a>"
@end example

@noindent
You can get a value for Xref by
@w{@code{(match-string 1)}}.  You can get a value for Date by modifying
a value of
@w{@code{(match-string 2)}}.  Subject by
@w{@code{(match-string 3)}} and From from
@w{@code{(match-string 4)}}.  You can modify them further for showing
additional information in MUA.  See the @file{sb-muchy.el} file which
makes its original subject form from a web page source.

If URL of an article is a relative path like above, use
@code{w3m-expand-url} to expand it before putting information to
header.  If each article doesn't have a each unique URLs (i.e. URL of
headers and URL of articles are just same), you have to ask Emacs to
remember body of an article when gathering headers information, For more
detail see the files @file{sb-palmfan.el}, @file{sb-dennou.el} and
@file{sb-tcup.el}.

Sometimes you cannot identify Date information when gathering headers
information only from a web page source.  If so, leave it, just set a
null string, @code{""} to its value.  If you can identify Date only when
you see contents of an article, you can set it at that time by using
@code{shimbun-make-contents} method.  And you may use a fixed From for a
web site (e.x. "webmaster@@foobar.net").

Be careful when you build a message-id.  Make sure it has uniqueness
otherwise you may not be able to read some articles in the
@samp{shimbun}@footnote{And more, you may not be able to read actual
email messages from someone when message-ids conflict!}.  Assure
uniqueness by building message-id using date information, a domain of
the page and/or a part of URL of the page.  And use @samp{@@} but
@samp{:} as a part of message-id in order to display inline images.  See
RFC2387 and RFC822 for more detail.

Put these information to header using function
@code{shimbun-make-header} of the @file{shimbun.el} module.

A bare bone of @code{shimbun-get-headers} in your @file{sb-foobar.el}
file is as follows:

@lisp
(luna-define-method shimbun-get-headers ((shimbun shimbun-foobar)
                                         &optional range)
  (let ((regexp "....")
        subject from date id url headers)
    ...
    (catch 'stop
      (while (re-search-forward regexp nil t nil)
        ...
        (when (shimbun-search-id shimbun id)
          (throw 'stop nil))
        (push (shimbun-make-header
               0 (shimbun-mime-encode-string subject)
               (shimbun-mime-encode-string from)
              date id "" 0 0 url)
              headers)))
    headers))
@end lisp

@noindent
Note that you can access @samp{shimbun-foobar} instance via temporary
variable @code{shimbun} in the method.

Now we will explain a user variable @code{shimbun-foobar-groups}.

Assume that you have two groups of articles in
@w{@uref{http://www.foobar.net}} and there are two different web pages
for such groups in where @samp{shimbun} module gathers header
information.  For examples, there are what's new information of the web
site in
@w{@uref{http://www.foobar.net/whatsnew/index.hmtl}}, and there are
archive lists of email messages posted to ML in
@w{@uref{http://www.foobar.net/ml/index.html}}.  In such case you may
want to access the group by @samp{shimbun} folders
@samp{foobar.whatsnew} and @samp{foobar.ml}.  If so, put the following S
expressions to the @file{sb-foobar.el} file.

@lisp
(defvar shimbun-foobar-url "http://www.foobar.net")

(defvar shimbun-foobar-group-path-alist
  '(("whatsnew" . "/whatsnew/index.html")
    ("ml" . "/ml/index.html")))

(defvar shimbun-foobar-groups
  (mapcar 'car shimbun-foobar-group-path-alist))

(luna-define-method shimbun-index-url ((shimbun shimbun-foobar))
  (concat shimbun-foobar-url
          (cdr (assoc (shimbun-current-group-internal shimbun)
                      shimbun-foobar-groups))))
@end lisp

@noindent
You can get the current group by using
@code{shimbun-current-group-internal}.  You can use it in
@code{shimbun-get-headers} method (or others) in order to change its
behavior in accordance with the current group.

Each @samp{shimbun} module needs at least one group.  There is not a
special rule for naming a group, but if you don't find out a good name,
use @samp{news} or @samp{main}.

@node Displaying an article
@subsection Displaying an article

@code{shimbun-article} method defined in the @file{shimbun.el} module
gets URL from Xref information of header, get a web page source from the
URL, and call @code{shimbun-make-contents} in working buffer of the
source.   Major job of @code{shimbun-make-contents} is to process such
HTML.  Imagine that a working buffer has a web page source of an
article.  @code{shimbun-make-contents} defined in the @file{shimbun.el}
module insert (i) header information to top of the buffer, (ii)
@samp{<html>}, @samp{<body>} and etc. right after the information, and
(iii) @samp{</body>} and @samp{</html>} to end of the buffer.  MUA
displays an article as a HTML mail.

If you don't want to process an article, you don't have to define
@code{shimbun-make-contents} in the @file{sb-foobar.el} module.

If you want to remove some part of a web page source of an article at
its top and its end, set regexp to @code{shimbun-foobar-content-start}
that matches content start and @code{shimbun-foobar-content-end} that
matches content end.

@lisp
(defvar shimbun-foobar-content-start "^<body>$")
(defvar shimbun-foobar-content-end "^<\/body>$")
@end lisp

@noindent
@code{shimbun-make-contents} defined in the @file{shimbun.el} module
will remove HTML source from @code{point-min} to
@code{shimbun-foobar-content-start} and from
@code{shimbun-foobar-content-end} to @code{point-max} using the regexps.
Note that it will not remove any HTML source when either of the regexp
searches fails.

If you want to remove unnecessary parts (e.x. advertisements) diligently
by some regexps, define @code{shimbun-make-contents} in your new
@file{sb-foobar.el} file with @code{luna-define-method} specifying
method-qualifier @samp{:before} and clean up an article before
@code{shimbun-make-contents} of the @file{shimbun.el} module is
called@footnote{As you may know, a method that is declared with
@samp{:before} is called first and succeedingly a method of the same
name that is declared without @samp{:before} is called.  If you declare
a method without any method-qualifier, it will overwrite a method of the
same name in parent class.}.  Don't forget to use @code{save-excursion}
in @code{shimbun-make-contents} with @samp{:before} to save point so
that a parent method can work properly.

@lisp
(luna-define-method shimbun-make-contents :before ((shimbun shimbun-foobar)
                                                   header)
  (save-excursion
    ;; cleaning up
    (while (re-search-forward "..." nil t nil)
      (delete-region (match-beginning 0) (match-end 0)))
    ...
    ))
@end lisp

@noindent
For more details see @code{shimbun-make-contents} in the
@file{sb-ibm-dev.el} file.

I said in the subsection of @ref{Getting web page and header
information} that if each article doesn't have a each unique URLs you
have to ask Emacs to remember body of an article when gathering headers
information,  In such case you don't have to get a web page from URL of
Xref in @file{shimbun-article} method.  Just get texts from Emacs
memories and put them with pretty printing.  For more detail see
definitions of @file{shimbun-article} method of @file{sb-palmfan.el},
@file{sb-dennou.el} or @file{sb-tcup.el}.

@node Inheriting shimbun module
@subsection Inheriting shimbun module

There are some famous mailing list manager (or archiver).

@itemize @bullet
@item Mailman
@noindent
The GNU Mailing List Manager, formerly called as @samp{pipermail}.  See
@uref{http://www.gnu.org/software/mailman/index.html} for detail.

@item MHonArc
@noindent
See @uref{http://www.oac.uci.edu/indiv/ehood/mhonarc.html} for detail.

@item fml
@noindent
fml mailing list server/manager.  See
@uref{http://www.fml.org/software/fml/} for detail.

@item mailarc
@noindent
See @uref{http://cvs.namazu.org/mailarc/} for detail.
@end itemize

If you find out one of such mailing list managers' names in a web page
source when you analyze it in the step of @xref{Getting web page and
header information}, you are very lucky@footnote{Such mailing list
managers often show their own name in an archive list page}.  The
modules @file{sb-mailman.el}, @file{sb-mhonarc.el}, @file{sb-fml.el} and
@file{sb-mailarc.el} have the @code{shimbun-get-headers} method, etc,
already, when you write small code that is not defined in such
@samp{shimbun} modules, your new @file{sb-foobar.el} module works!

If you use the @file{sb-mailman.el} module, write the following S
expressions to the top of the @file{sb-foobar.el} file:

@lisp
(require 'shimbun)
(require 'sb-mailman)
(luna-define-class shimbun-foobar (shimbun-mailman) ())
@end lisp

@noindent
Those above mean that @samp{shimbun} module @samp{shimbun-foobar}
inherits shimbun-mailman class@footnote{i.e. shimbun-mailman class is a
parent class.} and methods defined in the @file{sb-mailman.el} module
will be used in @samp{shimbun-foobar} by default.  You can overwrite
some of parent methods, if necessary.

See the @file{sb-pilot-mailsync.el} file as a sample that uses the
@file{sb-mailman.el} module.  You can feel how easy to create a new
@samp{shimbun} module by using such parent modules.

Note that there are some localized version of such mailing list manager,
for examples, some of them show Date information in Japanese.  The
modules @file{sb-mailman.el}, @file{sb-mhonarc.el}, @file{sb-fml.el} and
@file{sb-mailarc.el} assumes that mailing list managers are not
localized.

If you want to read via @samp{shimbun} a web site that uses localized
mailing list manager, you may have to overwrite some methods in the
parent module.

@node Tips
@chapter Some knick-knacks using emacs-w3m
@cindex Tips

Here are some handy tips to use emacs-w3m with other Emacs facilities.

@itemize @bullet
@item browse-url

You can use emacs-w3m with the @code{browse-url} feature.  For instance,
put the following lines in your @file{~/.emacs} file:

@lisp
(setq browse-url-browser-function 'w3m-browse-url)
(autoload 'w3m-browse-url "w3m" "Ask emacs-w3m to show a URL." t)
(global-set-key "\C-xm" 'browse-url-at-point)
@end lisp

Emacs-w3m will now be invoked when you type the @kbd{C-x m} key on a
string which looks like a URL in any Emacs buffer.  In addition, you can
use emacs-w3m to preview an HTML file that you are just editing by
typing the @kbd{C-c C-v} key (note that you need to use Emacs and the
@code{html-mode} major mode to edit the HTML file).

If you'd like to use another web browser than emacs-w3m when using the
@kbd{C-x m} key when you are in an emacs-w3m buffer (who wants to do
so?), add the following advice to @file{~/.emacs} file:

@lisp
(defadvice browse-url-at-point
  (around change-browse-url-browser-function activate)
  "Use Netscape only when it is invoked in an emacs-w3m buffer."
  (let ((browse-url-browser-function
         (if (eq major-mode 'w3m-mode)
             'browse-url-netscape
           'w3m-browse-url)))
    ad-do-it))
@end lisp

@item dired

You can use emacs-w3m to browse an HTML file in a @code{dired} buffer by
typing the @kbd{C-x m} key.  Use the following settings in your
@file{~/.emacs} file:

@lisp
(eval-after-load "dired"
  '(define-key dired-mode-map "\C-xm" 'dired-w3m-find-file))

(defun dired-w3m-find-file ()
  (interactive)
  (require 'w3m)
  (let ((file (dired-get-filename)))
    (if (y-or-n-p (format "Use emacs-w3m to browse %s? "
                          (file-name-nondirectory file)))
        (w3m-find-file file))))
@end lisp

@item hnf-mode

You can see the newest diary using emacs-w3m and the hyper nikki system.
Put the following lines in your @file{~/.emacs} file and type the
@kbd{C-c C-b} key in an @code{hnf-mode} buffer:

@lisp
(autoload 'w3m-browse-url "w3m" nil t)
(defun w3m-hnf-browse-url-w3m (url &optional new-window)
  (interactive (browse-url-interactive-arg "URL: "))
  (save-selected-window
    (pop-to-buffer (get-buffer-create "*w3m*"))
    (w3m-browse-url url new-window)))
(setq hnf-browse-url-browser-function #'w3m-hnf-browse-url-w3m)
@end lisp

@item Gnus

You've mistaken the entrance if you are a Gnus user and this section is
the first page you read in this Info.  See @ref{Hooking into MUAs}
first.

By default, Gnus will not apply the treatment variables, for instance
@code{gnus-treat-strip-banner}, to @samp{text/html} parts.  To have them
applied to @samp{text/html} parts automatically, there are two ways to
do that:

@lisp
;; Apply all the treatments to text/html parts.
(eval-after-load "gnus-art"
  '(add-to-list 'gnus-article-treat-types "text/html"))
@end lisp

@lisp
;; Apply a certain treatment to text/html parts.
(setq gnus-treat-strip-banner '(or t (typep "text/html")))
@end lisp

Also @xref{Customizing Articles, ,Customizing Articles, gnus, The Gnus
Manual}, for details.

In addition, the experimental code below is used to display
@samp{multipart/related} pictures.  The place might be something wrong.

@lisp
(eval-after-load "gnus-art"
  '(or (assoc "multipart/related" gnus-mime-multipart-functions)
       (setq gnus-mime-multipart-functions
             (cons
              (cons
               "multipart/related"
               (byte-compile
                (lambda (handle)
                  (gnus-mime-display-mixed (cdr handle)))))
              gnus-mime-multipart-functions))))
@end lisp

@item yahtml-mode

You can use emacs-w3m to preview an HTML file that just you are editing
with the @code{yahtml-mode}.  Here is an example:

@lisp
(autoload 'w3m-goto-url "w3m")
(defadvice yahtml-browse-html
  (around w3m-yahtml-browse-html activate compile)
  (w3m-goto-url (ad-get-arg 0) t))
@end lisp
@end itemize

@node Mailing List
@chapter Mailing list and submitting bug reports
@cindex Subscribing to the emacs-w3m mailing list
@cindex Reporting bugs

We have set up a mailing list to discuss all things emacs-w3m.  You can
post without subscribing.  If you find a bug, have a feature request, or
have written some code, don't hesitate to post to the list.  And if
you're just a user and like the program, please tell us too!

The address is:

@display
Emacs-w3m Mailing List @t{<emacs-w3m@@namazu.org>}
@end display

You can also send a bug report using the @code{report-emacs-w3m-bug}
command (or the @kbd{C-c C-b} key) if you have set the
@code{mail-user-agent} variable that will work properly.

English and Japanese can be used when posting to this list, since many
of its members are Japanese.  Articles posted to the list are opened to
the public and you can read them on the web (at
@uref{http://emacs-w3m.namazu.org/ml/}), or in NetNews (group
@samp{gmane.emacs.w3m} on the server @samp{news.gmane.org}).

If you want to receive articles by mail, send a mail containing

@example
subscribe Your Name
@end example

(please write your name, not your email address) in its body to
@samp{emacs-w3m-ctl@@namazu.org}, then you can subscribe to the list.
To unsubscribe from it, send a mail containing just

@example
# bye
@end example

in its body to @samp{emacs-w3m-ctl@@namazu.org}.

@node Emacs-w3m Functions
@chapter Details of some emacs-w3m functions
@cindex Functions details


@node Authors
@chapter Persons who wrote this manual

@itemize @bullet
@c alphabetical order in the family names.
@item
Romain FRANCOISE
@item
NAKAJIMA Mikio
@item
Yoichi NAKAYAMA
@item
Hideyuki SHIRAI
@item
TSUCHIYA Masatoshi
@item
Katsumi Yamaoka
@item
Masatake YAMATO
@end itemize

@node Index
@unnumbered Index

@menu
* Concept Index::               Concept Index
* Key Index::                   Key Index
* Variable Index::              Variable Index
* Function Index::              Function Index
@end menu

@node Concept Index
@unnumberedsec Concept Index
@printindex cp

@node Key Index
@unnumberedsec Key Index
@printindex ky

@node Variable Index
@unnumberedsec Variable Index
@printindex vr

@node Function Index
@unnumberedsec Function Index
@printindex fn

@summarycontents
@contents
@bye

@c Local Variables:
@c fill-column: 72
@c End:
